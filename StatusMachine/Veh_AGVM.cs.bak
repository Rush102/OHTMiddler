using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Timers;
using System.Threading;
using System.Threading.Tasks;
using TcpIpClientSample;
using MirleOHT.類別.DCPS;
using AGVM_Vehicle_Communication.NLog_USE;
using AGVM_Vehicle_Communication.ReadCsv;
using Veh_HandShakeData;
using AGVM_Vehicle_Communication.ErrorCode;

namespace AGVM_Vehicle_Communication.StatusMachine
{
    public class Veh_AGVM
    {
        private bool bIsOk2GoOnTrigger = false;
        private VehEventTypes curVehEventType = VehEventTypes.NotDefinedYet;
        static bool blRxDataSent = false;
        static bool blSendDataReceived = false;
        Task task;

        //public event EventHandler<ReportMsgEventArg> eventMsgFromAGVM;
        public event EventHandler<BlockControlQueryArg> eventBlockQuery;
        public event EventHandler<ReportMsgEventArg> eventMsgToAGVM;
        //
        EventType eventTypes;
        CompleteStatus cmpStatus;
        ActiveType activeType;
        PauseEvent pauseContinue;
        VHActionStatus actionStatus;
        VhGuideStatus lGuideStatus, rGuideStatus;
        VhLoadCSTStatus loadStatus;
        VHModeStatus modeStatus;
        VhPowerStatus powerStatus;
        VhStopSingle obstStatus, blockStatus, pauseStatus;
        bool check_UseorNot;
        //
        long time = 10000;
        Veh_AGVM_Comm_Data vehTcpComm;
        enum RxStatus { N0 = 0, Yes = 1 }
        enum TxStatus { No = 0, Yes = 1 }
        enum CmdID { cmd31 = 31, cmd131 = 131, cmd32 = 32, cmd132 = 132, cmd39 = 39, cmd139 = 139 }
        enum VehJobDone { No = 0, Yes = 1 }
        protected enum LoadCommand { UnLoad = 0, Load = 1 }
        LoadCommand loadunloadcheck;
        //LoadCommand enLoad
        //{
        //    get { return loadunloadcheck; }
        //    set { loadunloadcheck = value; }
        //}

        VehJobDone enJobDone;

        System.Timers.Timer timerActionType = new System.Timers.Timer();
        public System.Timers.Timer timerEventSquence = new System.Timers.Timer();                   // EventSquenceStatusMachine_Elapsed ...

        static string prevAddress = string.Empty;
        Veh_AGVM_Global.SequenceEvents seqEvents;

        //MotionInfo_Vehicle_Comm[] motionInfoComm = null;
        //DDS.SampleInfo[] sampleInfo = null;

        MotionInfo_Vehicle_Inter_Comm_ReportData[] motionInfoInterCommReport = null;
        DDS.SampleInfo[] sampleInfo_RptData = null;
        MotionInfo_HandShake_RecieveData[] handShakeRxData = null;
        DDS.SampleInfo[] sampleInfo_RxData = null;
        MotionInfo_HandShake_SendData[] handShakeSendData = null;
        DDS.SampleInfo[] sampleInfo_SendData = null;

        public Veh_AGVM()
        {

            Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enIdle;
            timerEventSquence.Interval = 100;
            timerEventSquence.Elapsed += EventSquenceStatusMachine_Elapsed;
            timerEventSquence.AutoReset = true;
            timerEventSquence.Enabled = true;
            Veh_AGVM_Global.mResetEvent = new ManualResetEvent(false);
            vehTcpComm = new Veh_AGVM_Comm_Data(time);
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        public void EventSquenceStatusMachine_Elapsed(object sender, ElapsedEventArgs e)
        {

            //DDS_Global.motionInfo_VehCommReader.Take(
            //    ref motionInfoComm, ref sampleInfo,
            //    DDS.SampleStateKind.Any, DDS.ViewStateKind.Any, DDS.InstanceStateKind.Any);

            seqEvents = Veh_AGVM_Global.seqEvents;
            //eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  EventSquenceStatusMachine_Elapsed seqEvents = " + seqEvents);
            //eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  EventSquenceStatusMachine_Elapsed CmdID = " + Veh_AGVM_Global.enCmdID);

            switch (seqEvents)
            {
                case Veh_AGVM_Global.SequenceEvents.enIdle:
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = false;                  //added wschen 20171124
                    break;

                case Veh_AGVM_Global.SequenceEvents.enVeh_PowerOn:
                    // Work to do
                    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enIdle;
                    break;

                case Veh_AGVM_Global.SequenceEvents.enVeh_Data:
                    // Work to do
                    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enIdle;
                    break;

                case Veh_AGVM_Global.SequenceEvents.enControl_Start_Stop:
                    // Work to do
                    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enIdle;
                    break;

                case Veh_AGVM_Global.SequenceEvents.enTransferRequest:
                    Veh_TransferRequest_Procedure(Veh_AGVM_Global.enCmdID);
                    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enIdle;
                    break;

                case Veh_AGVM_Global.SequenceEvents.enEventsOnDriving:
                    //Veh_EventsOnDriving_Procedure(Veh_AGVM_Global.enCmdID);
                    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enIdle;
                    break;

                case Veh_AGVM_Global.SequenceEvents.enTransferCancel:   // this part is not using, just let it go. 
                    // Work to do
                    //Veh_EventsOnDriving_Procedure(Veh_AGVM_Global.enCmdID);
                    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enIdle;
                    break;

                case Veh_AGVM_Global.SequenceEvents.enChangeMode:
                    // Work to do
                    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enIdle;
                    break;

                case Veh_AGVM_Global.SequenceEvents.enChangePower:
                    // Work to do
                    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enIdle;
                    break;

                case Veh_AGVM_Global.SequenceEvents.enErrorOccur_Clear:
                    // Work to do
                    break;

                case Veh_AGVM_Global.SequenceEvents.enAutoDrivingTeaching:
                    // Work to do
                    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enIdle;
                    break;

                case Veh_AGVM_Global.SequenceEvents.enGripperTeaching:
                    // Work to do
                    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enIdle;
                    break;

                case Veh_AGVM_Global.SequenceEvents.enVehLogUpLoad:
                    // Work to do
                    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enIdle;
                    break;

                case Veh_AGVM_Global.SequenceEvents.enRecoverFromUnExpPowerFailure:
                    // Work to do
                    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enIdle;
                    break;
            }
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected bool Veh_TransferRequest_Procedure(Veh_AGVM_Global.CmdID enCmdID)
        {

            try
            {
                switch (enCmdID)
                {
                    //++++++++++++++++++++++++++++                 // Roy+180302
                    case Veh_AGVM_Global.CmdID.dark31:
                        #region "dark31"
                        //if (task == null && !task.IsCompleted)                  // ... ??? 
                        //{
                        task = Task.Run(() => ActionTypeStatusMachine());
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_TransferRequest_Procedure : Stop Thread Started.");
                        //}
                        #endregion          // "dark31"

                        break;
                    //++++++++++++++++++++++++++++

                    case Veh_AGVM_Global.CmdID.cmd31:
                        #region "cmd31"
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Warn, null, "@Veh_OHTC : get into the Veh_TransferRequest_Procedure : cmd31 type = {0}", activeType.ToString());                // Roy+180308

                        check_UseorNot = false;

                        Task.Run(() => ActionTypeStatusMachine());

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_OHTC : Veh_TransferRequest_Procedure : " + Veh_AGVM_Global.NowActiveType.ToString() + " Thread Started.");
                        #endregion          // "cmd31"
                        break;

                    case Veh_AGVM_Global.CmdID.cmd32:
                        #region"cmd32"
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Warn, null, "@Veh_AGVM : get into the Veh_TransferRequest_Procedure : cmd32 ");                // Roy+180308
                        if (Veh_AGVM_Global.vehBlockPassReqst == (int)Status.NG)
                        {
                            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToPause;
                            DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.BlockSectionPassReply = Status.NG;                                              // Roy*180319
                            DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section = DDS_Global.motionInfoInterCommReptData.BlockSectionPassReqst.Section; // Roy*180319

                            DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.NG;
                            DDS_Global.motionInfoInterCommSendData.isStop = (int)Status.OK;
                            DDS_Global.motionInfoInterCommSendData.isPause = (int)Status.OK;
                        }
                        else
                        {
                            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToContinue;
                            DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.BlockSectionPassReply = Status.OK;                     // Roy*180319

                            DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section = DDS_Global.motionInfoInterCommReptData.BlockSectionPassReqst.Section;                     // Roy*180319

                            DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
                            DDS_Global.motionInfoInterCommSendData.isStop = (int)Status.NG;
                            DDS_Global.motionInfoInterCommSendData.isPause = (int)Status.NG;
                        }

                        DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);

                        // Inform SendData Sent
                        DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
                        DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                        DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
                        //
                        #endregion          // "cmd32"

                        break;

                    case Veh_AGVM_Global.CmdID.cmd37:
                        #region "cmd37"
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Warn, null, "@Veh_AGVM : Veh_TransferRequest_Procedure : get into the Veh_TransferRequest_Procedure : cmd37");                // Roy+180308
                        Task.Run(() => ActionTypeStatusMachine());                    // Roy+180319
                        break;
                    #endregion

                    case Veh_AGVM_Global.CmdID.cmd39:
                        #region "cmd39"
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Warn, null, "@Veh_AGVM : get into the Veh_TransferRequest_Procedure : cmd39");                // Roy+180308
                        check_UseorNot = true;
                        Task.Run(() => ActionTypeStatusMachine());                    // Roy-171128 .... [Cmd39: 暫停(純)走行] Pause/Stop 或 [Cmd37: 中止搬送/上下貨]  Cancel/Abort 應該都是發生在 其它 狀態機正在執行中 才有作用 ...                   // Roy+180302
                        break;
                    #endregion
                    case Veh_AGVM_Global.CmdID.cmd51:
                        #region "cmd51"
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Warn, null, "@Veh_AGVM : get into the Veh_TransferRequest_Procedure : cmd51");                // Roy+180308
                        check_UseorNot = true;
                        Task.Run(() => ActionTypeStatusMachine());                    // Roy-171128 .... [Cmd39: 暫停(純)走行] Pause/Stop 或 [Cmd37: 中止搬送/上下貨]  Cancel/Abort 應該都是發生在 其它 狀態機正在執行中 才有作用 ...                   // Roy+180302
                        break;
                    #endregion
                    case Veh_AGVM_Global.CmdID.cmd71:
                        #region "cmd71"
                        Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Teaching;
                        check_UseorNot = false;
                        Task.Run(() => ActionTypeStatusMachine());
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Teaching Thread Started.");               // Roy+180302
                        #endregion
                        break;

                }           // # switch (enCmdID)

                return true;
            }
            catch (Exception ex)
            {
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, ex.Message);
                return false;
            }
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        public void ActionTypeStatusMachine()
        {
            Veh_AGVM_Global_Property.arrive_Complete_Check = false;
            Veh_AGVM_Global_Property.abort_On_Check = false;

            if (check_UseorNot == false)
            {
                Veh_AGVM_Global_Property.cmd_Length_Check = 0;  //reset the length

                #region "enActionType"
                switch (Veh_AGVM_Global.enActionType)
                {
                    case Veh_AGVM_Global.ActionType.Movetocharger:
                        Veh_AGVM_Global.checkForNoMoveSend144 = false;
                        Veh_AGVM_Global_Property.lastMoveType_4_Override_Check = Veh_AGVM_Global.ActionType.Move;
                        Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Move;
                        Veh_AGVM_Global_Property.Pre31CmdStep = Pre31CmdSteps.Idle;

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'Single-Move' To address.");               // Roy*171030

                        Veh_Move_Procedure(false, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination);
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Single-Move' To address Complete.");

                        if (Veh_AGVM_Global_Property.abort_On_Check != true)
                        {
                            Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusMovetocharger);
                            Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                        }
                        Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                        Veh_AGVM_Global.checkForNoMoveSend144 = true;
                        break;

                    case Veh_AGVM_Global.ActionType.Move:
                        Veh_AGVM_Global.checkForNoMoveSend144 = false;
                        Veh_AGVM_Global_Property.lastMoveType_4_Override_Check = Veh_AGVM_Global.ActionType.Move;
                        Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Move;
                        Veh_AGVM_Global_Property.Pre31CmdStep = Pre31CmdSteps.Idle;

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'Single-Move' To address.");               // Roy*171030

                        Veh_Move_Procedure(false, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination);
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Single-Move' To address Complete.");

                        if (Veh_AGVM_Global_Property.abort_On_Check != true)
                        {
                            Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusMove);
                            Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                        }
                        Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                        Veh_AGVM_Global.checkForNoMoveSend144 = true;
                        break;

                    case Veh_AGVM_Global.ActionType.Load_Unload:
                        Veh_AGVM_Global.checkForNoMoveSend144 = false;
                        int walkLengthTotal = 0;
                        Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Load_Unload;
                        Veh_AGVM_Global_Property.Pre31CmdStep = Pre31CmdSteps.Idle;

                        string[] loadSection = new string[40];
                        string[] unloadSection = new string[40];
                        //CheckSections.ClassifySections(ref loadSection, ref unloadSection);
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'Loading' Procedure");               // Roy*171030

                        Veh_LoadUnLoad_Procedure(LoadCommand.Load, MoveType.single, Veh_AGVM_Global.GuideSectionsStartToLoad, Veh_AGVM_Global.GuideAddressesStartToLoad, Veh_AGVM_Global.CSTID_Load.ToString());              // Roy*180308 ... temp. 
                        if (Veh_AGVM_Global_Property.IsCmdAbort != true) //override check abort check 
                        {
                            walkLengthTotal = Veh_AGVM_Global_Property.cmd_Length_Check; //load walk length
                            if (bIsOk2GoOnTrigger == false)
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Warn, null, "@Veh_AGVM : ActionTypeStatusMachine => Abort the load unload Procedure");

                                if (Veh_AGVM_Global_Property.abort_On_Check != true)
                                {
                                    Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusAbort);
                                }
                                break;
                            }

                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'UnLoading' Procedure");               // Roy*171030

                            Veh_LoadUnLoad_Procedure(LoadCommand.UnLoad, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination, Veh_AGVM_Global.CSTID_UnLoad.ToString());              // Roy*180308 ... temp.              // Roy*180319
                            Veh_AGVM_Global_Property.cmd_Length_Check = walkLengthTotal + Veh_AGVM_Global_Property.cmd_Length_Check; //unload + load walk length
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => 'UnLoading' Procedure Complete");               // Roy*171030
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => 'Load-n-UnLoad' Procedure Complete");               // Roy*171030
                            if (Veh_AGVM_Global_Property.abort_On_Check != true)
                            {
                                Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusLoadunload);
                                Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                            }
                        }
                        Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                        Veh_AGVM_Global.checkForNoMoveSend144 = true;
                        break;

                    case Veh_AGVM_Global.ActionType.Load:
                        Veh_AGVM_Global.checkForNoMoveSend144 = false;
                        Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Load;
                        Veh_AGVM_Global_Property.Pre31CmdStep = Pre31CmdSteps.Idle;

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'Loading' Procedure");               // Roy*171030

                        Veh_LoadUnLoad_Procedure(LoadCommand.Load, MoveType.single, Veh_AGVM_Global.GuideSectionsStartToLoad, Veh_AGVM_Global.GuideAddressesStartToLoad, Veh_AGVM_Global.CSTID_Load.ToString());              // Roy*180308 ... temp. 

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => 'Loading' Procedure Complete");

                        if (Veh_AGVM_Global_Property.abort_On_Check != true)
                        {
                            Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusLoad);
                            Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                        }
                        Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                        Veh_AGVM_Global.checkForNoMoveSend144 = true;
                        break;

                    case Veh_AGVM_Global.ActionType.UnLoad:
                        Veh_AGVM_Global.checkForNoMoveSend144 = false;
                        Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.UnLoad;
                        Veh_AGVM_Global_Property.Pre31CmdStep = Pre31CmdSteps.Idle;

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Begin 'UnLoading' Procedure");               // Roy*171030

                        Veh_LoadUnLoad_Procedure(LoadCommand.UnLoad, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination, Veh_AGVM_Global.CSTID_UnLoad.ToString());              // Roy*180308 ... temp. 

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  'UnLoading' Procedure Complete");

                        if (Veh_AGVM_Global_Property.abort_On_Check != true)
                        {
                            Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusUnload);
                            Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                        }
                        Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                        Veh_AGVM_Global.checkForNoMoveSend144 = true;
                        break;
                    case Veh_AGVM_Global.ActionType.Override:
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'Override' Procedure");      // Roy*171030
                        Veh_Override_issue();
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => 'Override' Procedure Complete");

                        break;
                    //+++++++++++++++++++++++++++++++++++++++                   // Roy+180319
                    case Veh_AGVM_Global.ActionType.Cancel:
                        //check_UseorNot = true;
                        //Veh_AGVM_Global_Property.lastMoveType_4_Override_Check = Veh_AGVM_Global.ActionType.Cancel;

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'Cancel' Procedure");

                        Veh_Cancel_Procedure();

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => 'Cancel' Procedure Complete");
                        Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusCancel);
                        break;

                    case Veh_AGVM_Global.ActionType.Abort:      //This is the cancel really used.

                        while (!VehCanStop())
                        {
                            Thread.SpinWait(10);
                        }
                        if (Veh_AGVM_Global_Property.Pre31CmdType == Veh_AGVM_Global.ActionType.Unknow)
                        {
                            return;
                        }
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'Abort' Procedure");
                        Veh_Abort_Procedure();
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => 'Abort' Procedure Complete");

                        Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusAbort);
                        Veh_AGVM_Global.checkForNoMoveSend144 = true;
                        break;
                    //+++++++++++++++++++++++++++++++++++++++

                    case Veh_AGVM_Global.ActionType.Cycle:
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'Cycle-Run' Procedure");               // Roy*171030
                        enJobDone = VehJobDone.No;

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => 'Cycle-Run' Procedure Complete");

                        Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusMove);
                        break;

                    //+++++++++++++++++++++++++++++++++++++++                   // Roy+180319
                    case Veh_AGVM_Global.ActionType.Restart:
                        //check_UseorNot = true;
                        if (Veh_AGVM_Global_Property.same_pause_Command_Check == true)
                        {
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'Restart' Procedure");

                            Veh_Restart_Procedure();

                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => 'Restart' Procedure Complete");

                            Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusMove);
                        }
                        else
                        {
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Not match 'Restart' Procedure");
                        }
                        break;
                    //+++++++++++++++++++++++++++++++++++++++
                    case Veh_AGVM_Global.ActionType.Stop:
                        //check_UseorNot = true;
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'Stop' Procedure");               // Roy+180302

                        Veh_Stop_Procedure();               // Roy+180302

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => 'Stop' Procedure Complete");               // Roy+180302

                        Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusMove);
                        //enJobDone = VehJobDone.Yes;                 // Roy-+180308 ...打斷CycleRun內部迴圈用 ... 
                        break;
                    case Veh_AGVM_Global.ActionType.Teaching:
                        //check_UseorNot = true;
                        int completeCode = 1;
                        Veh_Move_Procedure(false, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination);
                        if (Veh_AGVM_Global_Property.cmd_Length_Check != 0)
                        {
                            completeCode = 0;
                        }
                        Veh_AGVM_Global.vehAGVMomm.sned_Str172(completeCode);

                        break;
                    case Veh_AGVM_Global.ActionType.AvoidRequest:
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'AvoidRequest' Procedure");               // Roy+180302

                        break;
                }           // # switch (Veh_AGVM_Global.enActionType)
                #endregion          // "enActionType"
            }
            else if (check_UseorNot == true)
            {

                #region "pauseContinue"
                pauseContinue = Veh_AGVM_Global.now_Pause;

                switch (pauseContinue)
                {
                    case PauseEvent.Continue:
                        if (Veh_AGVM_Global_Property.same_pause_Command_Check == true)
                        {
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'Continue' Procedure");

                            Veh_Continue_Procedure_Restart();
                            Veh_AGVM_Global.checkForNoMoveSend144 = false;
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => 'Continue' Procedure Complete");
                            //Veh_CommandComplete();
                        }
                        else
                        {
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Not match 'Continue' Procedure");
                        }
                        break;

                    case PauseEvent.Pause:
                        if (Veh_AGVM_Global.enActionType == Veh_AGVM_Global.ActionType.Override)
                        {
                            Veh_Override_issue();
                            break;
                        }
                        else
                        {
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => Begin 'Pause' Procedure");               // Roy*171030

                            Veh_Pause_Procedure();
                            Veh_AGVM_Global.checkForNoMoveSend144 = true;
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : ActionTypeStatusMachine => 'Pause' Procedure Complete");
                            //Veh_CommandComplete();
                        }
                        break;
                }           // # switch (pauseContinue)
                #endregion          // "pauseContinue"

            }
        }
        /// <summary>  jason++ 190223
        /// Veh_Override_issue()
        /// This function will do an cancel/abort at first , then send a new message.
        /// </summary>
        protected void Veh_Override_issue()
        {
            string[] loadsection = null;
            string[] unloadsection = null;
            while (!VehCanStop())
            {
                Thread.SpinWait(10);
            }
            if (Veh_AGVM_Global_Property.Pre31CmdType == Veh_AGVM_Global.ActionType.Unknow)
            {
                return;
            }
            Veh_Abort_Procedure();
            Veh_AGVM_Global_Property.IsCmdAbort = false;

            switch (Veh_AGVM_Global_Property.Pre31CmdType)
            {
                case Veh_AGVM_Global.ActionType.Move:
                    if (VertifyOverrideMoveSections())
                    {
                        Veh_AGVM_Global.checkForNoMoveSend144 = false;
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => Begin 'Single-Move' To address.");               // Roy*171030

                        Veh_Move_Procedure(false, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination);

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => Single-Move' To address Complete.");

                        if (Veh_AGVM_Global_Property.abort_On_Check != true)
                        {
                            Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusMove);
                            Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                        }
                        Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                    }
                    break;
                case Veh_AGVM_Global.ActionType.Load:
                    if (VertifyOverrideMoveSections())
                    {
                        Veh_AGVM_Global.checkForNoMoveSend144 = false;
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => Begin 'Loading' Procedure");               // Roy*171030

                        Veh_LoadUnLoad_Procedure(LoadCommand.Load, MoveType.single, Veh_AGVM_Global.GuideSectionsStartToLoad, Veh_AGVM_Global.GuideAddressesStartToLoad, Veh_AGVM_Global.CSTID_Load.ToString());              // Roy*180308 ... temp. 

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => 'Loading' Procedure Complete");

                        if (Veh_AGVM_Global_Property.abort_On_Check != true)
                        {
                            Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusLoad);
                            Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                        }
                        Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                        Veh_AGVM_Global.checkForNoMoveSend144 = true;
                    }
                    break;

                case Veh_AGVM_Global.ActionType.UnLoad:
                    if (VertifyOverrideMoveSections())
                    {
                        Veh_AGVM_Global.checkForNoMoveSend144 = false;
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => Begin 'UnLoading' Procedure");               // Roy*171030

                        Veh_LoadUnLoad_Procedure(LoadCommand.UnLoad, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination, Veh_AGVM_Global.CSTID_UnLoad.ToString());              // Roy*180308 ... temp. 

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => 'UnLoading' Procedure Complete");

                        if (Veh_AGVM_Global_Property.abort_On_Check != true)
                        {
                            Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusUnload);
                            Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                        }
                        Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                        Veh_AGVM_Global.checkForNoMoveSend144 = true;
                    }
                    break;
                case Veh_AGVM_Global.ActionType.Load_Unload:
                    if (VertifyBeforeLoading())
                    {
                        if (VertifyOverrideMoveSections())
                        {
                            Veh_AGVM_Global.checkForNoMoveSend144 = false;
                            int walkLengthTotal = 0;

                            string[] loadSection = new string[40];
                            string[] unloadSection = new string[40];
                            //CheckSections.ClassifySections(ref loadSection, ref unloadSection);
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => Begin 'Loading' Procedure");               // Roy*171030

                            Veh_LoadUnLoad_Procedure(LoadCommand.Load, MoveType.single, Veh_AGVM_Global.GuideSectionsStartToLoad, Veh_AGVM_Global.GuideAddressesStartToLoad, Veh_AGVM_Global.CSTID_Load.ToString());              // Roy*180308 ... temp. 

                            if (bIsOk2GoOnTrigger == false)
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Warn, null, "@Veh_AGVM : Veh_Override_issue => Abort the load unload Procedure");

                                walkLengthTotal = Veh_AGVM_Global_Property.cmd_Length_Check; //load walk length

                                if (Veh_AGVM_Global_Property.abort_On_Check != true)
                                {
                                    Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusAbort);
                                }
                                break;
                            }

                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => Begin 'UnLoading' Procedure");               // Roy*171030

                            Veh_LoadUnLoad_Procedure(LoadCommand.UnLoad, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination, Veh_AGVM_Global.CSTID_UnLoad.ToString());              // Roy*180308 ... temp.              // Roy*180319
                            Veh_AGVM_Global_Property.cmd_Length_Check = walkLengthTotal + Veh_AGVM_Global_Property.cmd_Length_Check; //unload + load walk length

                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => 'UnLoading' Procedure Complete");               // Roy*171030
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => 'Load-n-UnLoad' Procedure Complete");               // Roy*171030

                            if (Veh_AGVM_Global_Property.abort_On_Check != true)
                            {
                                Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusLoadunload);
                                Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                            }
                        }
                        Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                        Veh_AGVM_Global.checkForNoMoveSend144 = true;
                    }
                    else
                    {
                        if (VertifyOverrideMoveSections())
                        {
                            Veh_AGVM_Global.checkForNoMoveSend144 = false;
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => L_UL Begin 'UnLoading' Procedure");               // Roy*171030

                            Veh_LoadUnLoad_Procedure(LoadCommand.UnLoad, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination, Veh_AGVM_Global.CSTID_UnLoad.ToString());              // Roy*180308 ... temp. 

                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => L_UL 'UnLoading' Procedure Complete");
                            if (Veh_AGVM_Global_Property.IsCmdAbort != true)
                            {
                                Veh_LoadUnLoad_Procedure(LoadCommand.UnLoad, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination, Veh_AGVM_Global.CSTID_UnLoad.ToString());              // Roy*180308 ... temp. 
                                Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                            }
                            Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                            Veh_AGVM_Global.checkForNoMoveSend144 = true;
                        }
                    }
                    break;
                default:
                    break;

            }
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        /// <summary>  jason++ 190509
        /// Veh_Avoid_Request_issue()
        /// This function will do an cancel/abort at first , then give a new guiding addresses and sections for a new moving. 
        /// After ending the new moving, send an ID_152 to AGVC.
        /// When recieve the AGVC ID_52 , AGVC will give an override cmd by ID_31 just after it. 
        /// </summary>
        protected void Veh_Avoid_Request_issue()
        {
            string[] loadsection = null;
            string[] unloadsection = null;
            while (!VehCanStop())
            {
                Thread.SpinWait(10);
            }
            if (Veh_AGVM_Global_Property.Pre31CmdType == Veh_AGVM_Global.ActionType.Unknow)
            {
                return;
            }
            Veh_Abort_Procedure();
            Veh_AGVM_Global_Property.IsCmdAbort = false;

            switch (Veh_AGVM_Global_Property.Pre31CmdType)
            {
                case Veh_AGVM_Global.ActionType.Move:
                    if (VertifyOverrideMoveSections())
                    {
                        Veh_AGVM_Global.checkForNoMoveSend144 = false;
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => Begin 'Single-Move' To address.");               // Roy*171030

                        Veh_Move_Procedure(false, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination);

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => Single-Move' To address Complete.");

                        if (Veh_AGVM_Global_Property.abort_On_Check != true)
                        {
                            Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusMove);
                            Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                        }
                        Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                    }
                    break;
                case Veh_AGVM_Global.ActionType.Load:
                    if (VertifyOverrideMoveSections())
                    {
                        Veh_AGVM_Global.checkForNoMoveSend144 = false;
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => Begin 'Loading' Procedure");               // Roy*171030

                        Veh_LoadUnLoad_Procedure(LoadCommand.Load, MoveType.single, Veh_AGVM_Global.GuideSectionsStartToLoad, Veh_AGVM_Global.GuideAddressesStartToLoad, Veh_AGVM_Global.CSTID_Load.ToString());              // Roy*180308 ... temp. 

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => 'Loading' Procedure Complete");

                        if (Veh_AGVM_Global_Property.abort_On_Check != true)
                        {
                            Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusLoad);
                            Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                        }
                        Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                        Veh_AGVM_Global.checkForNoMoveSend144 = true;
                    }
                    break;

                case Veh_AGVM_Global.ActionType.UnLoad:
                    if (VertifyOverrideMoveSections())
                    {
                        Veh_AGVM_Global.checkForNoMoveSend144 = false;
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => Begin 'UnLoading' Procedure");               // Roy*171030

                        Veh_LoadUnLoad_Procedure(LoadCommand.UnLoad, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination, Veh_AGVM_Global.CSTID_UnLoad.ToString());              // Roy*180308 ... temp. 

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => 'UnLoading' Procedure Complete");

                        if (Veh_AGVM_Global_Property.abort_On_Check != true)
                        {
                            Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusUnload);
                            Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                        }
                        Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                        Veh_AGVM_Global.checkForNoMoveSend144 = true;
                    }
                    break;
                case Veh_AGVM_Global.ActionType.Load_Unload:
                    if (VertifyBeforeLoading())
                    {
                        if (VertifyOverrideMoveSections())
                        {
                            Veh_AGVM_Global.checkForNoMoveSend144 = false;
                            int walkLengthTotal = 0;

                            string[] loadSection = new string[40];
                            string[] unloadSection = new string[40];
                            //CheckSections.ClassifySections(ref loadSection, ref unloadSection);
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => Begin 'Loading' Procedure");               // Roy*171030

                            Veh_LoadUnLoad_Procedure(LoadCommand.Load, MoveType.single, Veh_AGVM_Global.GuideSectionsStartToLoad, Veh_AGVM_Global.GuideAddressesStartToLoad, Veh_AGVM_Global.CSTID_Load.ToString());              // Roy*180308 ... temp. 

                            if (bIsOk2GoOnTrigger == false)
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Warn, null, "@Veh_AGVM : Veh_Override_issue => Abort the load unload Procedure");

                                walkLengthTotal = Veh_AGVM_Global_Property.cmd_Length_Check; //load walk length

                                if (Veh_AGVM_Global_Property.abort_On_Check != true)
                                {
                                    Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusAbort);
                                }
                                break;
                            }

                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => Begin 'UnLoading' Procedure");               // Roy*171030

                            Veh_LoadUnLoad_Procedure(LoadCommand.UnLoad, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination, Veh_AGVM_Global.CSTID_UnLoad.ToString());              // Roy*180308 ... temp.              // Roy*180319
                            Veh_AGVM_Global_Property.cmd_Length_Check = walkLengthTotal + Veh_AGVM_Global_Property.cmd_Length_Check; //unload + load walk length

                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => 'UnLoading' Procedure Complete");               // Roy*171030
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => 'Load-n-UnLoad' Procedure Complete");               // Roy*171030

                            if (Veh_AGVM_Global_Property.abort_On_Check != true)
                            {
                                Veh_CommandComplete(Veh_AGVM_Global.completeStatus.CmpStatusLoadunload);
                                Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                            }
                        }
                        Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                        Veh_AGVM_Global.checkForNoMoveSend144 = true;
                    }
                    else
                    {
                        if (VertifyOverrideMoveSections())
                        {
                            Veh_AGVM_Global.checkForNoMoveSend144 = false;
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => L_UL Begin 'UnLoading' Procedure");               // Roy*171030

                            Veh_LoadUnLoad_Procedure(LoadCommand.UnLoad, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination, Veh_AGVM_Global.CSTID_UnLoad.ToString());              // Roy*180308 ... temp. 

                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Veh_Override_issue => L_UL 'UnLoading' Procedure Complete");
                            if (Veh_AGVM_Global_Property.IsCmdAbort != true)
                            {
                                Veh_LoadUnLoad_Procedure(LoadCommand.UnLoad, MoveType.single, Veh_AGVM_Global.GuideSectionsToDestination, Veh_AGVM_Global.GuideAddressesToDestination, Veh_AGVM_Global.CSTID_UnLoad.ToString());              // Roy*180308 ... temp. 
                                Veh_AGVM_Global_Property.Pre31CmdType = Veh_AGVM_Global.ActionType.Unknow;
                            }
                            Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                            Veh_AGVM_Global.checkForNoMoveSend144 = true;
                        }
                    }
                    break;
                default:
                    break;

            }
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        private static bool VehCanStop()
        {
            bool temp = false;
            if (Veh_AGVM_Global_Property.Pre31CmdStep == Pre31CmdSteps.Moving)
            {
                temp = true;
            }
            return temp;
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        private bool VertifyBeforeLoading()
        {
            string loadSection = CheckSections.FindSectionOfAddress(Veh_AGVM_Global.LoadAddress);

            return Veh_AGVM_Global.GuideSections.Contains(loadSection);
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        private bool VertifyOverrideMoveSections()
        {
            int index = 0;
            int overrideGuideSectionLength = Veh_AGVM_Global.GuideSections.Length;
            while (index < overrideGuideSectionLength)
            {
                if (Veh_AGVM_Global.GuideSections[index] == Veh_AGVM_Global_Property.curSection)
                {
                    if (index > 0)
                    {
                        Veh_AGVM_Global.GuideSections = Veh_AGVM_Global.GuideSections.Skip(index).ToArray();
                    }
                    break;
                }
                index++;
            }

            if (index == overrideGuideSectionLength)
            {
                //FindSectionFailReport();
                return false;
            }

            return true;
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected void Veh_CommandComplete(Veh_AGVM_Global.completeStatus comstatus)
        {
            Veh_AGVM_Global_Property.Pre31CmdStep = Pre31CmdSteps.MoveComplete;
            MotionInfo_Vehicle_Inter_Comm_ReportData tempfor144 = new MotionInfo_Vehicle_Inter_Comm_ReportData();

            tempfor144.Address = Veh_AGVM_Global.Address;
            tempfor144.Section = Veh_AGVM_Global.Section;
            tempfor144.BlockControlSection = Veh_AGVM_Global.BlockControlSection;
            tempfor144.cmpCode = Veh_AGVM_Global.cmpCode;
            tempfor144.cmpStatus = Veh_AGVM_Global.cmpStatus;
            tempfor144.DistanceFromSectionStart = Veh_AGVM_Global.DistanceFromSectionStart;
            tempfor144.WalkLength = Veh_AGVM_Global.vehWalkLength;
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_CommandComplete tempfor144.DistanceFromSectionStart = {0}", tempfor144.DistanceFromSectionStart.ToString());                // Roy+180308

            tempfor144.vehLeftGuideLockStatus = Veh_AGVM_Global.vehLeftGuideLockStatus;
            tempfor144.vehRightGuideLockStatus = Veh_AGVM_Global.vehRightGuideLockStatus;
            tempfor144.vehModeStatus = Veh_AGVM_Global.vehModeStatus;
            tempfor144.vehLoadStatus = Veh_AGVM_Global.vehLoadStatus;
            tempfor144.vehPauseStatus = Veh_AGVM_Global.vehPauseStatus;
            tempfor144.eventTypes = Veh_AGVM_Global.eventTypes;
            tempfor144.vehBlockStopStatus = Veh_AGVM_Global.vehBlockStopStatus;
            tempfor144.vehObstacleStopStatus = Veh_AGVM_Global.vehObstStopStatus;
            tempfor144.vehObstDist = Veh_AGVM_Global.vehObstDist;
            tempfor144.loadStatus.Veh_CSTID = Veh_AGVM_Global.CSTID_Load;
            tempfor144.unLoadStatus.Veh_CSTID = Veh_AGVM_Global.CSTID_UnLoad;
            tempfor144.vehActionStatus = Veh_AGVM_Global.vehActionStatus;
            tempfor144.HIDControlSection = Veh_AGVM_Global.HIDControlSection;
            tempfor144.BatteryCapacity = Veh_AGVM_Global.BatteryCapacity;
            tempfor144.BatteryTemperature = Veh_AGVM_Global.BatteryTemperature;
            MotionInfo_Vehicle_Inter_Comm_ReportData nothing = new MotionInfo_Vehicle_Inter_Comm_ReportData();
            nothing.cmpStatus = (int)comstatus;
            nothing.WalkLength = Veh_AGVM_Global_Property.cmd_Length_Check;
            SendValuesForRept(nothing, "132");
            ///
            /// Write the situation to the host.
            ///
            SendValuesForRept(tempfor144, "144");
            Veh_AGVM_Global_Property.already_have_command_Check = false;   //
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected bool Veh_LoadUnLoad_Procedure(LoadCommand enLoad, MoveType type, string[] Ssections, string[] addresses, string cstID)                // Roy+180308
        {
            bool done = false;
            string loadStatus = string.Empty;
            string[] sections = null;
            bIsOk2GoOnTrigger = false;                         // Roy+180308
            int Store_Start_length = 0;
            int[] reserve_direction_list = null;
            try
            {
                int has_already_Count = 0;
                //int reserve_direction_list_count = 0;
                if (Ssections.Count() != 0 && addresses.Count() != 0)
                {
                    sections = new TransSectioncs().TransMap4AGV(Ssections, addresses, out Store_Start_length, ref reserve_direction_list);
                    //DDS_Global.motionInfoInterCommSendData.udtMove.GuidingSections = new TransSectioncs().TransMap4AGV(sectionsArray, addressesArray, out Store_Start_length, ref reserve_direction_list);
                    //reserve_direction_list_count = reserve_direction_list.Count();
                }
                //Veh_AGVM_Global.Store_Start_Length = Store_Start_length;
                #region Inform OHT Vehicle move to Load Port or Unload Port
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "Veh_LoadUnLoad_Procedure Enter the {0}", enLoad.ToString());
                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToMove;
                DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = (int)MoveType.single;                //+++               // Roy+180319

                DDS_Global.motionInfoInterCommSendData.udtMove.GuidingSections = sections;
                //System.Diagnostics.Debug.Assert(sections.Count() > 0);                        // Roy+180308               // Roy-190205

                if (enLoad == LoadCommand.Load)
                {
                    DDS_Global.motionInfoInterCommSendData.udtMove.ForLoading = 1;                  // Roy+190205
                    DDS_Global.motionInfoInterCommSendData.udtMove.ForUnLoading = 0;                  // Roy+190205
                    DDS_Global.motionInfoInterCommSendData.udtMove.ForMaintain = 0;                  // Roy+190205

                    DDS_Global.motionInfoInterCommSendData.udtMove.Address = Veh_AGVM_Global.LoadAddress;
                    loadStatus = "Load";

                    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++               // Roy+190205
                    if (sections == null)
                    {
                        DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToLoad;
                        sendloading();
                    }
                    else if (sections.Count() == 0)
                    {
                        DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToLoad;
                        sendloading();
                    }
                    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                }
                else
                {
                    DDS_Global.motionInfoInterCommSendData.udtMove.ForLoading = 0;                  // Roy+190205
                    DDS_Global.motionInfoInterCommSendData.udtMove.ForUnLoading = 1;                  // Roy+190205
                    DDS_Global.motionInfoInterCommSendData.udtMove.ForMaintain = 0;                  // Roy+190205

                    DDS_Global.motionInfoInterCommSendData.udtMove.Address = Veh_AGVM_Global.UnloadAddress;              // Veh_AGVM_Global.ToAddress;               // Roy*180319
                    loadStatus = "UnLoad";

                    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++               // Roy+190205
                    if (sections == null)
                    {
                        DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToUnload;
                        sendunloading();
                    }
                    else if (sections.Count() == 0)
                    {
                        DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToUnload;
                        sendunloading();
                    }
                    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                }

                DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = type;
                DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isStop = (int)Status.NG;
                DDS_Global.motionInfoInterCommSendData.isPause = (int)Status.NG;

                //
                //DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);
                if (sections == null)
                {
                    DDS.ReturnCode status = DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);
                }
                else if (sections.Length != 0)
                {
                    DDS.ReturnCode status = DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);
                }
                //eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "~~~1281 returncode = " + status.ToString());
                // Inform SendData Sent
                DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
                DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
                //
                #endregion


                #region DDS Share Memory Exchange
                motionInfoInterCommReport = null;
                sampleInfo_RptData = null;

                done = false;                           // Roy+180308 

                //
                Veh_AGVM_Global_Property.Pre31CmdStep = Pre31CmdSteps.Moving;
                while (!done)
                {
                    DDS_Global.motionInfo_HandShakeRecieveDataReader.Take(
                        ref handShakeRxData,
                        ref sampleInfo_RxData,
                        DDS.SampleStateKind.Any,
                        DDS.ViewStateKind.Any,
                        DDS.InstanceStateKind.Any);

                    DDS_Global.motionInfo_HandShakeSendDataReader.Take(
                        ref handShakeSendData,
                        ref sampleInfo_SendData,
                        DDS.SampleStateKind.Any,
                        DDS.ViewStateKind.Any,
                        DDS.InstanceStateKind.Any);

                    // Handshaking with OHT 
                    if (handShakeSendData != null)
                    {
                        foreach (MotionInfo_HandShake_SendData data in handShakeSendData)
                        {
                            if (data.cmdReceive == 1)
                            {
                                Veh_AGVM_Global.blSendDataReceived = true;
                                DDS_Global.motionInfoHandShakeTxData.cmdSend = 0;
                                DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                                DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
                            }
                            else
                            {
                                Veh_AGVM_Global.blSendDataReceived = false;
                            }
                        }
                        //blRxDataSent = true;
                    }

                    if (handShakeRxData != null)
                    {
                        foreach (MotionInfo_HandShake_RecieveData data in handShakeRxData)
                        {
                            if (data.cmdSend == 1)
                            {
                                Veh_AGVM_Global.blRxDataSent = true;
                                DDS_Global.motionInfoHandShakeRxData.cmdReceive = 1;
                                DDS_Global.motionInfo_HandShakeRecieveDataWriter.Write(DDS_Global.motionInfoHandShakeRxData);
                            }
                            else
                            {
                                Veh_AGVM_Global.blRxDataSent = false;
                            }
                        }
                        //blRxDataSent = true;
                    }

                    //
                    Veh_AGVM_Global.blRxDataSent = true;

                    #region Check OHT Vehicle Motion Status via DDS Exchanged Data
                    if (Veh_AGVM_Global.blRxDataSent)
                    {
                        DDS_Global.motionInfo_VehInterCommReptDataReader.Take(
                                ref motionInfoInterCommReport,
                                ref sampleInfo_RptData,
                                 DDS.SampleStateKind.Any, DDS.ViewStateKind.Any, DDS.InstanceStateKind.Any);
                        if (sections != null)
                        {
                            if (sections.Length != 0 && sections[0] != null)
                            {
                                if (motionInfoInterCommReport != null)
                                {
                                    AnalyzeDDSFeedback(enLoad, ref done, motionInfoInterCommReport, cstID, reserve_direction_list, ref has_already_Count);
                                }           // #  if (motionInfoInterCommReport != null)
                            }
                            else
                            {
                                if (cstID != "XXX")
                                {
                                    done = TrigEventLoadUnLoadingArrival_No_Section_Load_Unload(enLoad, cstID);
                                }
                            }
                        }
                        else
                        {
                            if (cstID != "XXX")
                            {
                                done = TrigEventLoadUnLoadingArrival_No_Section_Load_Unload(enLoad, cstID);
                            }
                        }
                    }           // #  if (Veh_AGVM_Global.blRxDataSent)
                    #endregion

                    SpinWait.SpinUntil(() => false, 10);
                }               //# while (!done) 
                #endregion
                if (Veh_AGVM_Global_Property.abort_On_Check != true)
                {
                    WaitForLoadUnLoading(enLoad);                         // Roy*180308 ... from WaitForLoading to WaitForLoadUnLoading
                }


                return true;
            }
            catch (Exception ex)
            {
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL Veh_LoadUnLoad_Procedure: {1}", DateTime.Now.ToString("HH:mm:ss.fff"), ex.Message);               // Roy*171030
                return false;
            }
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++                    // Roy+180308
        protected bool TrigEventLoadUnLoadingArrival(LoadCommand enLoad, MotionInfo_Vehicle_Inter_Comm_ReportData data, string cstID)
        {
            string loadStatus = string.Empty;
            bIsOk2GoOnTrigger = true;
            if (enLoad == LoadCommand.Load)
            {
                Veh_AGVM_Global_Property.Pre31CmdStep = Pre31CmdSteps.Loading;
                #region "load-arrival event"
                loadStatus = "Load";
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : Address {1} Load Port Arrival.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address, loadStatus);

                Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Load;
                DDS_Global.motionInfoInterCommSendData.udtLoad.Veh_CSTID = cstID;                     // Roy*180319
                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToLoad;

                DDS_Global.motionInfoInterCommSendData.udtMove.ForLoading = 1;                  // Roy+190205
                DDS_Global.motionInfoInterCommSendData.udtMove.ForUnLoading = 0;                  // Roy+190205
                DDS_Global.motionInfoInterCommSendData.udtMove.ForMaintain = 0;                  // Roy+190205

                DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isStop = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isPause = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.udtMove.GuidingSections = new string[0]; // Use for clear out the place of OHT.
                //
                DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);

                // Inform SendData Sent
                DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
                DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);

                // When motion stopped, report Load Arrival
                if (!Veh_AGVM_Global.OffLineTest)
                {
                    // With Connection to AGVM

                    SendValuesForRept(data, "136");

                    if (!vehTcpComm.TcpIpTimeOut)
                    {
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2}: Address {1} Load Cmd-Sent Complete.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address, loadStatus);
                    }
                    else
                    {
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : AGVM Connection TimeOut.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address, loadStatus);
                        Veh_TcpIpComm_TimeOutStop(MoveType.single);
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  : Stop Loading");
                    }
                }
                else
                {
                    // Without Connection to AGVM
                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : Address {1} Load Cmd-Sent Complete.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address, loadStatus);
                }

                //
                ////done = true;
                #endregion          // "load-arrival event"

            }
            else
            {
                Veh_AGVM_Global_Property.Pre31CmdStep = Pre31CmdSteps.Unloading;
                #region "unload-arrival event"
                loadStatus = "UnLoad";

                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : Address {1} UnLoad Port Arrival.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address, loadStatus);

                //Wait for the Vehicle to arrive at the Load Port 

                Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.UnLoad;
                DDS_Global.motionInfoInterCommSendData.udtUnLoad.Veh_CSTID = cstID;                     // Roy*180319
                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToUnload;

                DDS_Global.motionInfoInterCommSendData.udtMove.ForLoading = 0;                  // Roy+190205
                DDS_Global.motionInfoInterCommSendData.udtMove.ForUnLoading = 1;                  // Roy+190205
                DDS_Global.motionInfoInterCommSendData.udtMove.ForMaintain = 0;                  // Roy+190205

                DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isStop = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isPause = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.udtMove.GuidingSections = new string[0]; // Use for clear out the place of OHT.
                //
                DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);

                // Inform SendData Sent
                DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
                DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);

                // When motion stopped, report UnLoad Arrival
                if (!Veh_AGVM_Global.OffLineTest)
                {
                    // With Connection to AGVM
                    SendValuesForRept(data, "136");

                    if (!vehTcpComm.TcpIpTimeOut)
                    {
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2}: Address {1} UnLoad Cmd-Sent Complete.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address, loadStatus);
                    }
                    else
                    {
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : AGVM Connection TimeOut.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address, loadStatus);
                        Veh_TcpIpComm_TimeOutStop(MoveType.single);
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  : Stop UnLoading");
                    }
                }
                else
                {
                    // Without Connection to AGVM
                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : Address {1} UnLoad Cmd-Sent Complete.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address, loadStatus);
                }

                //
                ////done = true;
                #endregion          // "unload-arrival event"

            }

            return true;
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected bool TrigEventLoadUnLoadingArrival_No_Section_Load_Unload(LoadCommand enLoad, string cstID)
        {
            string loadStatus = string.Empty;
            bIsOk2GoOnTrigger = true;

            if (enLoad == LoadCommand.Load)
            {
                Veh_AGVM_Global_Property.Pre31CmdStep = Pre31CmdSteps.Loading;
                #region "load-arrival event"
                loadStatus = "Load";
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : Address {1} Load Port Arrival.", DateTime.Now.ToString("HH:mm:ss.fff"), Veh_AGVM_Global.Address, loadStatus);

                Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Load;
                DDS_Global.motionInfoInterCommSendData.udtLoad.Veh_CSTID = cstID;                     // Roy*180319
                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToLoad;

                DDS_Global.motionInfoInterCommSendData.udtMove.ForLoading = 1;                  // Roy+190205
                DDS_Global.motionInfoInterCommSendData.udtMove.ForUnLoading = 0;                  // Roy+190205
                DDS_Global.motionInfoInterCommSendData.udtMove.ForMaintain = 0;                  // Roy+190205

                DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isStop = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isPause = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.udtMove.GuidingSections = new string[0]; // Use for clear out the place of OHT.
                //
                DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);

                // Inform SendData Sent
                DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
                DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);

                // When motion stopped, report Load Arrival
                if (!Veh_AGVM_Global.OffLineTest)
                {
                    // With Connection to AGVM
                    MotionInfo_Vehicle_Inter_Comm_ReportData tempforLoadUnload = new MotionInfo_Vehicle_Inter_Comm_ReportData();

                    tempforLoadUnload.Address = Veh_AGVM_Global.Address;
                    tempforLoadUnload.Section = Veh_AGVM_Global.Section;
                    tempforLoadUnload.BlockControlSection = Veh_AGVM_Global.BlockControlSection;
                    tempforLoadUnload.cmpCode = Veh_AGVM_Global.cmpCode;
                    tempforLoadUnload.cmpStatus = Veh_AGVM_Global.cmpStatus;
                    tempforLoadUnload.DistanceFromSectionStart = Veh_AGVM_Global.DistanceFromSectionStart;
                    tempforLoadUnload.vehLeftGuideLockStatus = Veh_AGVM_Global.vehLeftGuideLockStatus;
                    tempforLoadUnload.vehRightGuideLockStatus = Veh_AGVM_Global.vehRightGuideLockStatus;
                    tempforLoadUnload.vehModeStatus = Veh_AGVM_Global.vehModeStatus;
                    tempforLoadUnload.vehLoadStatus = Veh_AGVM_Global.vehLoadStatus;
                    tempforLoadUnload.vehPauseStatus = Veh_AGVM_Global.vehPauseStatus;
                    tempforLoadUnload.eventTypes = Veh_AGVM_Global.eventTypes;
                    tempforLoadUnload.vehBlockStopStatus = Veh_AGVM_Global.vehBlockStopStatus;
                    tempforLoadUnload.vehObstacleStopStatus = Veh_AGVM_Global.vehObstStopStatus;
                    tempforLoadUnload.vehObstDist = Veh_AGVM_Global.vehObstDist;
                    tempforLoadUnload.loadStatus.Veh_CSTID = Veh_AGVM_Global.CSTID_Load;
                    tempforLoadUnload.unLoadStatus.Veh_CSTID = Veh_AGVM_Global.CSTID_UnLoad;
                    tempforLoadUnload.vehActionStatus = Veh_AGVM_Global.vehActionStatus;
                    tempforLoadUnload.HIDControlSection = Veh_AGVM_Global.HIDControlSection;

                    SendValuesForRept(tempforLoadUnload, "136");

                    if (!vehTcpComm.TcpIpTimeOut)
                    {
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2}: Address {1} Load Cmd-Sent Complete.", DateTime.Now.ToString("HH:mm:ss.fff"), Veh_AGVM_Global.Address, loadStatus);
                    }
                    else
                    {
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : AGVM Connection TimeOut.", DateTime.Now.ToString("HH:mm:ss.fff"), Veh_AGVM_Global.Address, loadStatus);
                        Veh_TcpIpComm_TimeOutStop(MoveType.single);
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  : Stop Loading");
                    }
                }
                else
                {
                    // Without Connection to AGVM
                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : Address {1} Load Cmd-Sent Complete.", DateTime.Now.ToString("HH:mm:ss.fff"), Veh_AGVM_Global.Address, loadStatus);
                }

                //
                ////done = true;
                #endregion          // "load-arrival event"

            }
            else
            {
                Veh_AGVM_Global_Property.Pre31CmdStep = Pre31CmdSteps.Unloading;
                #region "unload-arrival event"
                loadStatus = "UnLoad";

                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : Address {1} UnLoad Port Arrival.", DateTime.Now.ToString("HH:mm:ss.fff"), Veh_AGVM_Global.Address, loadStatus);

                //Wait for the Vehicle to arrive at the Load Port 

                Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.UnLoad;
                DDS_Global.motionInfoInterCommSendData.udtUnLoad.Veh_CSTID = cstID;                     // Roy*180319
                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToUnload;

                DDS_Global.motionInfoInterCommSendData.udtMove.ForLoading = 0;                  // Roy+190205
                DDS_Global.motionInfoInterCommSendData.udtMove.ForUnLoading = 1;                  // Roy+190205
                DDS_Global.motionInfoInterCommSendData.udtMove.ForMaintain = 0;                  // Roy+190205

                DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isStop = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isPause = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.udtMove.GuidingSections = new string[0]; // Use for clear out the place of OHT.
                //
                DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);

                // Inform SendData Sent
                DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
                DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);

                // When motion stopped, report UnLoad Arrival
                if (!Veh_AGVM_Global.OffLineTest)
                {
                    // With Connection to AGVM
                    MotionInfo_Vehicle_Inter_Comm_ReportData tempforLoadUnload = new MotionInfo_Vehicle_Inter_Comm_ReportData();

                    tempforLoadUnload.Address = Veh_AGVM_Global.Address;
                    tempforLoadUnload.Section = Veh_AGVM_Global.Section;
                    tempforLoadUnload.BlockControlSection = Veh_AGVM_Global.BlockControlSection;
                    tempforLoadUnload.cmpCode = Veh_AGVM_Global.cmpCode;
                    tempforLoadUnload.cmpStatus = Veh_AGVM_Global.cmpStatus;
                    tempforLoadUnload.DistanceFromSectionStart = Veh_AGVM_Global.DistanceFromSectionStart;
                    tempforLoadUnload.vehLeftGuideLockStatus = Veh_AGVM_Global.vehLeftGuideLockStatus;
                    tempforLoadUnload.vehRightGuideLockStatus = Veh_AGVM_Global.vehRightGuideLockStatus;
                    tempforLoadUnload.vehModeStatus = Veh_AGVM_Global.vehModeStatus;
                    tempforLoadUnload.vehLoadStatus = Veh_AGVM_Global.vehLoadStatus;
                    tempforLoadUnload.vehPauseStatus = Veh_AGVM_Global.vehPauseStatus;
                    tempforLoadUnload.eventTypes = Veh_AGVM_Global.eventTypes;
                    tempforLoadUnload.vehBlockStopStatus = Veh_AGVM_Global.vehBlockStopStatus;
                    tempforLoadUnload.vehObstacleStopStatus = Veh_AGVM_Global.vehObstStopStatus;
                    tempforLoadUnload.vehObstDist = Veh_AGVM_Global.vehObstDist;
                    tempforLoadUnload.loadStatus.Veh_CSTID = Veh_AGVM_Global.CSTID_Load;
                    tempforLoadUnload.unLoadStatus.Veh_CSTID = Veh_AGVM_Global.CSTID_UnLoad;
                    tempforLoadUnload.vehActionStatus = Veh_AGVM_Global.vehActionStatus;
                    tempforLoadUnload.HIDControlSection = Veh_AGVM_Global.HIDControlSection;

                    SendValuesForRept(tempforLoadUnload, "136");

                    if (!vehTcpComm.TcpIpTimeOut)
                    {
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2}: Address {1} UnLoad Cmd-Sent Complete.", DateTime.Now.ToString("HH:mm:ss.fff"), Veh_AGVM_Global.Address, loadStatus);
                    }
                    else
                    {
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : AGVM Connection TimeOut.", DateTime.Now.ToString("HH:mm:ss.fff"), Veh_AGVM_Global.Address, loadStatus);
                        Veh_TcpIpComm_TimeOutStop(MoveType.single);
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  : Stop UnLoading");
                    }
                }
                else
                {
                    // Without Connection to AGVM
                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : Address {1} UnLoad Cmd-Sent Complete.", DateTime.Now.ToString("HH:mm:ss.fff"), Veh_AGVM_Global.Address, loadStatus);
                }

                //
                ////done = true;
                #endregion          // "unload-arrival event"

            }

            return true;
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++           
        protected void WaitForLoadUnLoading(LoadCommand enLoad)                         // Roy*180308 ... from WaitForLoading to WaitForLoadUnLoading
        {
            bool Wdone = false;

            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Enter '{1}' Procedure ... ", DateTime.Now.ToString("HH:mm:ss.fff"), enLoad.ToString());                    // Roy+180308

            while (!Wdone)
            {
                //eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Wait for Loading : done = {0} ... ", done);                    // Roy+180308

                DDS_Global.motionInfo_HandShakeRecieveDataReader.Take(
                    ref handShakeRxData,
                    ref sampleInfo_RxData,
                    DDS.SampleStateKind.Any,
                    DDS.ViewStateKind.Any,
                    DDS.InstanceStateKind.Any);

                DDS_Global.motionInfo_HandShakeSendDataReader.Take(
                    ref handShakeSendData,
                    ref sampleInfo_SendData,
                    DDS.SampleStateKind.Any,
                    DDS.ViewStateKind.Any,
                    DDS.InstanceStateKind.Any);

                // Handshaking with OHT 
                if (handShakeSendData != null)
                {
                    foreach (MotionInfo_HandShake_SendData data in handShakeSendData)
                    {
                        if (data.cmdReceive == 1)
                        {
                            Veh_AGVM_Global.blSendDataReceived = true;
                            DDS_Global.motionInfoHandShakeTxData.cmdSend = 0;
                            DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                            DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
                        }
                        else
                        {
                            Veh_AGVM_Global.blSendDataReceived = false;
                        }
                    }           // #  foreach (MotionInfo_HandShake_SendData data in handShakeSendData)
                }

                //
                if (handShakeRxData != null)
                {
                    foreach (MotionInfo_HandShake_RecieveData data in handShakeRxData)
                    {
                        if (data.cmdSend == 1)
                        {
                            Veh_AGVM_Global.blRxDataSent = true;
                            DDS_Global.motionInfoHandShakeRxData.cmdReceive = 1;
                            DDS_Global.motionInfo_HandShakeRecieveDataWriter.Write(DDS_Global.motionInfoHandShakeRxData);
                        }
                        else
                        {
                            Veh_AGVM_Global.blRxDataSent = false;
                        }
                    }           // # foreach (MotionInfo_HandShake_RecieveData data in handShakeRxData)
                }

                Veh_AGVM_Global.blRxDataSent = true; // jason++ for something weird

                //
                if (Veh_AGVM_Global.blRxDataSent)
                {
                    DDS_Global.motionInfo_VehInterCommReptDataReader.Take(
                            ref motionInfoInterCommReport,
                            ref sampleInfo_RptData,
                             DDS.SampleStateKind.Any, DDS.ViewStateKind.Any, DDS.InstanceStateKind.Any);

                    if (motionInfoInterCommReport != null)
                    {
                        foreach (MotionInfo_Vehicle_Inter_Comm_ReportData data in motionInfoInterCommReport)
                        {

                            //Loading Status report 
                            switch (data.eventTypes)
                            {
                                //jason++ 181031
                                case (int)VehEventTypes.Load_Pick:
                                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : Load pick.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);

                                    if (!Veh_AGVM_Global.OffLineTest)
                                    {
                                        // With Connection to AGVM
                                        Veh_AGVM_Global.load_Process = "starting";
                                        SendValuesForRept(data, "136");
                                        Veh_AGVM_Global.load_Process = null;

                                    }
                                    break;

                                case (int)VehEventTypes.Unload_Place:
                                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {2} : Unload pick.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);           // Roy*190205

                                    if (!Veh_AGVM_Global.OffLineTest)
                                    {
                                        // With Connection to AGVM
                                        Veh_AGVM_Global.unload_Process = "starting";
                                        SendValuesForRept(data, "136");
                                        Veh_AGVM_Global.unload_Process = null;
                                    }
                                    break;

                                //jason++ 181031
                                case (int)VehEventTypes.Load_Complete:
                                    //Send Request to AGVM
                                    Veh_AGVM_Global.load_Process = "complete";
                                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Wait for Loading : Load Complete 1 Address {1} Arrived.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());                         // Roy*180308
                                    Veh_AGVM_Global.hasCst = VhLoadCSTStatus.Exist;                  //For report to AGVM

                                    //++++++++++++++++++++++++++                    // Roy+180308
                                    if (enLoad != LoadCommand.Load)
                                    {
                                        System.Diagnostics.Debug.Assert(false);
                                    }
                                    //++++++++++++++++++++++++++

                                    if ((data.cmpCode == (int)VehCompleteFlag.Finished) && (data.cmpStatus == (int)VehCompleteStatus.CmpAsNormal))
                                    {
                                        //
                                        if (!Veh_AGVM_Global.OffLineTest)
                                        {
                                            SendValuesForRept(data, "136");
                                            Veh_AGVM_Global.load_Process = null;

                                            if (!vehTcpComm.TcpIpTimeOut)
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Wait for Loading : Load Complete 2 Address {1} Arrived.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());                         // Roy*180308
                                            }
                                            else
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Wait for Loading/Unloading : AGVM Connection TimeOut.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());                         // Roy*180308
                                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Wait for Loading : TimeOut Stop Moving");                         // Roy*180308
                                            }
                                        }
                                        else
                                        {
                                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Wait for Loading : Load Complete 3 Address {1} Arrived.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());                         // Roy*180308
                                        }

                                        //
                                        Wdone = true;
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Wait for Loading : Wdone = {1}.", DateTime.Now.ToString("HH:mm:ss.fff"), Wdone);                         // Roy*180308

                                        SendValuesForRept(data, "144");
                                    }

                                    break;


                                case (int)VehEventTypes.Unload_Complete:
                                    //Send Request to AGVM
                                    Veh_AGVM_Global.unload_Process = "complete";
                                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Wait for Unloading : UnLoad Complete 0 Address {1} Arrived.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());                         // Roy*180308
                                    Veh_AGVM_Global.hasCst = VhLoadCSTStatus.NotExist;              //For report to AGVM

                                    //++++++++++++++++++++++++++                    // Roy+180308
                                    if (enLoad == LoadCommand.Load)
                                    {
                                        System.Diagnostics.Debug.Assert(false);
                                    }
                                    //++++++++++++++++++++++++++

                                    if ((data.cmpCode == (int)VehCompleteFlag.Finished) && (data.cmpStatus == (int)VehCompleteStatus.CmpAsNormal))
                                    {
                                        //
                                        if (!Veh_AGVM_Global.OffLineTest)
                                        {
                                            SendValuesForRept(data, "136");
                                            Veh_AGVM_Global.unload_Process = null;

                                            if (!vehTcpComm.TcpIpTimeOut)
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Wait for Unloading : UnLoad Complete 1 Address {1} Arrived.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());                         // Roy*180308
                                            }
                                            else
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Wait for Unloading : AGVM Connection TimeOut.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());                         // Roy*180308
                                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Wait for Unloading : TimeOut Stop Moving");                         // Roy*180308
                                            }
                                        }
                                        else
                                        {
                                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Wait for UnLoading : UnLoad Complete 2 Address {1} Arrived.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());                         // Roy*180308
                                        }

                                        Wdone = true;
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Wait for UnLoading : Wdone = {1}.", DateTime.Now.ToString("HH:mm:ss.fff"), Wdone);                         // Roy*180308

                                        SendValuesForRept(data, "144");

                                    }

                                    break;

                            }           // # switch (data.eventTypes)

                            //prevAddress = data.Address;                           // Roy-180308
                            //Wait for the Vehicle to arrive at the Load Port 
                        }           // # foreach (MotionInfo_Vehicle_Inter_Comm_ReportData data in motionInfoInterCommReport)

                    }           // # if (motionInfoInterCommReport != null)
                }           // # if (Veh_AGVM_Global.blRxDataSent)

                SpinWait.SpinUntil(() => false, 10);                    // 無需如此精準地　耗用CPU資源, 應改用Join即可 ...
            }           // # while (!done)

            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  : Exit '{1}' Procedure ... ", DateTime.Now.ToString("HH:mm:ss.fff"), enLoad.ToString());                    // Roy+180308
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected bool Veh_Move_Procedure(bool done, MoveType type, string[] sectionsArray, string[] addressesArray)
        {
            bool bIsOk2GoOnTrigger = false;
            try
            {
                int Store_Start_length = 0;
                int has_already_Count = 0;
                int reserve_direction_list_count = 0;
                int[] reserve_direction_list = null;
                DDS_Global.motionInfoInterCommSendData.udtMove.GuidingSections = new TransSectioncs().TransMap4AGV(sectionsArray, addressesArray, out Store_Start_length, ref reserve_direction_list);
                reserve_direction_list_count = reserve_direction_list.Count();
                Veh_AGVM_Global.Store_Start_Length = Store_Start_length;
                // Here need to put addresses.
                DDS_Global.motionInfoInterCommSendData.udtMove.Address = Veh_AGVM_Global.Address;

                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToMove;
                DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = (int)MoveType.single;                //+++               // Roy+180319

                DDS_Global.motionInfoInterCommSendData.udtMove.ForLoading = 0;                  // Roy+190205
                DDS_Global.motionInfoInterCommSendData.udtMove.ForUnLoading = 0;                  // Roy+190205
                DDS_Global.motionInfoInterCommSendData.udtMove.ForMaintain = 0;                  // Roy+190205

                DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = type;
                DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isStop = (int)Status.NG;
                DDS_Global.motionInfoInterCommSendData.isPause = (int)Status.NG;
                //
                DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);
                // Inform SendData Sent
                DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
                DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Fatal, null, "@Veh_Move_Procedure : Send the Move command to the AGV");
                //
                motionInfoInterCommReport = null;
                sampleInfo_RptData = null;
                //
                done = false;

                Veh_AGVM_Global.chargeport = false;
                Veh_AGVM_Global_Property.Pre31CmdStep = Pre31CmdSteps.Moving;
                while (!done)
                {
                    //if (!Veh_AGVM_Global.blCycleRun) enJobDone = VehJobDone.Yes;
                    DDS_Global.motionInfo_HandShakeRecieveDataReader.Take(
                        ref handShakeRxData,
                        ref sampleInfo_RxData,
                        DDS.SampleStateKind.Any,
                        DDS.ViewStateKind.Any,
                        DDS.InstanceStateKind.Any);

                    DDS_Global.motionInfo_HandShakeSendDataReader.Take(
                        ref handShakeSendData,
                        ref sampleInfo_SendData,
                        DDS.SampleStateKind.Any,
                        DDS.ViewStateKind.Any,
                        DDS.InstanceStateKind.Any);

                    if (handShakeSendData != null)
                    {
                        foreach (MotionInfo_HandShake_SendData data in handShakeSendData)
                        {
                            if (data.cmdReceive == 1)
                            {
                                Veh_AGVM_Global.blSendDataReceived = true;
                                DDS_Global.motionInfoHandShakeTxData.cmdSend = 0;
                                DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                                DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
                            }
                            else
                            {
                                Veh_AGVM_Global.blSendDataReceived = false;
                            }
                        }
                    }

                    if (handShakeRxData != null)
                    {
                        foreach (MotionInfo_HandShake_RecieveData data in handShakeRxData)
                        {
                            if (data.cmdSend == 1)
                            {
                                Veh_AGVM_Global.blRxDataSent = true;
                                DDS_Global.motionInfoHandShakeRxData.cmdReceive = 1;
                                DDS_Global.motionInfo_HandShakeRecieveDataWriter.Write(DDS_Global.motionInfoHandShakeRxData);
                            }
                            else
                            {
                                Veh_AGVM_Global.blRxDataSent = false;
                            }
                        }
                    }

                    Veh_AGVM_Global.blRxDataSent = true;

                    if (Veh_AGVM_Global.blRxDataSent)
                    {
                        DDS_Global.motionInfo_VehInterCommReptDataReader.Take(
                                ref motionInfoInterCommReport,
                                ref sampleInfo_RptData,
                                 DDS.SampleStateKind.Any, DDS.ViewStateKind.Any, DDS.InstanceStateKind.Any);

                        if (motionInfoInterCommReport != null)
                        {
                            string cstID = "XXX";
                            AnalyzeDDSFeedback(LoadCommand.Load, ref done, motionInfoInterCommReport, cstID, reserve_direction_list, ref has_already_Count);

                        }           // # if (motionInfoInterCommReport != null)
                    }           // # if (Veh_AGVM_Global.blRxDataSent)
                    //new Fake144ForChargeMode().Fake144forChargeMode(done);
                    SpinWait.SpinUntil(() => false, 10);
                }           // # while (enJobDone == VehJobDone.No)

                return true;
            }
            catch (Exception ex)
            {
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, ex.Message);
                return false;
            }
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected void AnalyzeDDSFeedback(LoadCommand enload, ref bool done, MotionInfo_Vehicle_Inter_Comm_ReportData[] motionInfoInterCommReport, string cstID, int[] reserve_direction_list, ref int has_already_Count)
        {
            foreach (MotionInfo_Vehicle_Inter_Comm_ReportData data in motionInfoInterCommReport)
            {
                //Transport report and Block Query
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL @@@@@@eventTypes = {1 }.", DateTime.Now.ToString("HH:mm:ss.fff"), data.eventTypes);
                /*
                 * Check the error code for the AGV
                 */
                if (data.ErrorCode != 0)
                {
                    //ErrorHandling(ref done);
                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : !!!!!! Error Code != 0 , Please check again.");
                    done = true;
                    return;
                }
                #region Check Vehicle Motion Status for reporting to AGVM
                switch (data.eventTypes)
                {
                    case (int)VehEventTypes.Address_Pass:

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : Address {1} Passed.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);

                        if (!Veh_AGVM_Global.OffLineTest)
                        {
                            // With Connection to AGVM
                            SendValuesForRept(data, "134");
                            SendValuesForRept(data, "144");
                            if (!vehTcpComm.TcpIpTimeOut)
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2}: Address {1} Passed Sent.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                            }
                            else
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : AGVM Connection TimeOut.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                                Veh_TcpIpComm_TimeOutStop(MoveType.cycle);
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : Stop Moving");
                            }
                        }
                        else
                        {
                            // Without Connection to AGVM
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : Address {1} Passed.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                        }
                        break;

                    case (int)VehEventTypes.BlockSection_Query:                     // Roy*180319
                                                                                    //Send Request to AGVM
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, " @Veh_AGVM : VLVUL {2} : ####Send Block Query Address {1}", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);               // Roy*171030
                        // Send BlockQuery to AGVM if OffLineTest is false
                        Veh_AGVM_Global.BlockControlSection = data.BlockControlSection;                    // Roy+171128
                        Veh_AGVM_Global.queryBlockSection = data.Section;
                        Veh_AGVM_Global.queryVehAddres = data.Address;
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, " @Veh_AGVM : VLVUL {2} : ####Send Block Query section {1}", DateTime.Now.ToString("HH:mm:ss.fff"), Veh_AGVM_Global.BlockControlSection.ToString(), loadStatus);               // Roy*171030
                        if (!Veh_AGVM_Global.OffLineTest)           // w/wo Connection to AGVM
                        {
                            // With Connection to AGVM
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1}: ####Block Query Wait for Reply", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);
                            SendValuesForRept(data, "136");

                            // waiting for AGVM reply 
                            do
                            {
                                Thread.Sleep(10);
                            } while (Veh_AGVM_Global.check_recieve_36 == false);

                            if (!vehTcpComm.TcpIpTimeOut)
                            {
                                //Internal Trigger
                                //OnEventBlockControlQuery(new BlockControlQueryArg(data.BlockPassReqst));
                                // AGVM Reply

                                if (Veh_AGVM_Global.blBlockCtrl)            // w/wo BlockOuery Option  // This flag is control by the check box.
                                {
                                    // With BlockControl option
                                    // AGVM signaled
                                    if (Veh_AGVM_Global.vehBlockPassReply == (int)Status.OK)
                                    {
                                        Veh_BlockControl_Move_Continue(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1}: ####Block Query Move Grant-Pass ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                    }
                                    else
                                    {
                                        Veh_BlockControl_Move_Stop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : ####Block Query Stop Moving ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                    }
                                }
                                else
                                {
                                    // No BlockControl option. Just Move 
                                    Veh_BlockControl_Move_Continue(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1}: ####No Block Query Move Grant-Pass ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                }
                            }
                            else
                            {
                                //Raise Timeout Event
                                //Block Control Time out
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Block Query Time Out", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : TimeOut Stop Moving ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);
                            }
                        }
                        else
                        {
                            //Without connection to AGVM
                            // OffLineTest is true
                            if (Veh_AGVM_Global.vehBlockPassReply == (int)Status.OK)
                            {
                                Veh_BlockControl_Move_Continue(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Block Query Move Grant-Pass ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                            }
                            else
                            {
                                Veh_BlockControl_Move_Stop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Block Query Stop Moving ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                            }
                        }
                        break;

                    case (int)VehEventTypes.PostBlockSectionExit:
                        //Send Request to AGVM
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, " @Veh_AGVM : VLVUL {2} : Send Block release Address {1}", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);               // Roy*171030
                        //Console.WriteLine("{0} Exit the section [{2}]  the address [{1}]", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), data.Section.ToString());                                        // Send BlockQuery to AGVM if OffLineTest is false
                        Veh_AGVM_Global.BlockControlSection = data.BlockControlSection;                    // Roy+171128
                        Veh_AGVM_Global.queryBlockSection = data.Section;
                        Veh_AGVM_Global.queryVehAddres = data.Address;      //Use this address to tell the AGVM the exit address.//181129
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, " @Veh_AGVM : VLVUL {2} : Send Block release Address {1}", DateTime.Now.ToString("HH:mm:ss.fff"), Veh_AGVM_Global.BlockControlSection.ToString(), loadStatus);               // Roy*171030
                        if (!Veh_AGVM_Global.OffLineTest)           // w/wo Connection to AGVM
                        {
                            // With Connection to AGVM
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1}: Block release Wait for Reply", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);
                            SendValuesForRept(data, "136");

                            // waiting for AGVM reply 
                            if (!vehTcpComm.TcpIpTimeOut)
                            {
                                //Internal Trigger
                                //OnEventBlockControlQuery(new BlockControlQueryArg(data.BlockPassReqst));
                                // AGVM Reply

                                if (Veh_AGVM_Global.blBlockCtrl)            // w/wo BlockOuery Option
                                {
                                    // With BlockControl option
                                    //AGVM signaled
                                    if (Veh_AGVM_Global.vehBlockPassReply == (int)Status.OK)
                                    {
                                        //Veh_BlockControl_Move_Continue(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1}: Pass the block section {0} ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus, data.BlockSectionPassReqst);               // Roy*171030
                                    }
                                    else
                                    {
                                        //Veh_BlockControl_Move_Stop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Block Query Stop Moving", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                    }
                                }
                                else
                                {
                                    // No BlockControl option. Just Move 
                                    //Veh_BlockControl_Move_Continue(MoveType.single);                         // jason-- 181113
                                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1}: No Block Query Move Grant-Pass", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                }
                            }
                            else
                            {
                                //Raise Timeout Event
                                //Block Control Time out
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Block Query Time Out", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : TimeOut Stop Moving ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);
                            }
                        }
                        else
                        {
                            //Without connection to AGVM
                            // OffLineTest is true
                            if (Veh_AGVM_Global.vehBlockPassReply == (int)Status.OK)
                            {
                                Veh_BlockControl_Move_Continue(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Block Query Move Grant-Pass ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                            }
                            else
                            {
                                Veh_BlockControl_Move_Stop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Block Query Stop Moving ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                            }
                        }
                        break;

                    case (int)VehEventTypes.Address_Arrival:
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : Address {1} Arrived.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);

                        if (!Veh_AGVM_Global.OffLineTest)
                        {
                            // With Connection to AGVM
                            SendValuesForRept(data, "134");
                            SendValuesForRept(data, "144");
                            if (!vehTcpComm.TcpIpTimeOut)
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2}: Address {1} Arrived.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                            }
                            else
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : AGVM Connection TimeOut.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : Stop Moving");
                            }
                        }
                        else
                        {
                            // Without Connection to AGVM
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : Address {1} Arrived.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                        }
                        break;

                    case (int)VehEventTypes.Moving_Restart:
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Restarted~~~ VLVUL {2} : Address {1} Restarted.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);

                        if (!Veh_AGVM_Global.OffLineTest)
                        {
                            // With Connection to AGVM
                            data.vehActionStatus = 1;
                            SendValuesForRept(data, "144");

                            if (!vehTcpComm.TcpIpTimeOut)
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2}: Address {1} Restarted.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                            }
                            else
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : AGVM Connection TimeOut.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : Stop Moving");
                            }
                        }
                        else
                        {
                            // Without Connection to AGVM
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : Address {1} Restarted.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                        }
                        break;

                    case (int)VehEventTypes.Moving_Pause:
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Paused~~~ VLVUL {2} : Address {1} Paused.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);

                        if (!Veh_AGVM_Global.OffLineTest)
                        {
                            // With Connection to AGVM
                            SendValuesForRept(data, "144");

                            if (!vehTcpComm.TcpIpTimeOut)
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2}: Address {1} Paused.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                            }
                            else
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : AGVM Connection TimeOut.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : Stop Moving");
                            }
                        }
                        else
                        {
                            // Without Connection to AGVM
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : Address {1} Paused.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                        }
                        break;
                    //++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    //++++++++++++++++++++++++++++++++++++++++++++++++++++++                    // Roy+180308
                    case (int)VehEventTypes.Moving_Complete:
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Complete~~~ VLVUL {2} : Address {1} Complete.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                        Veh_AGVM_Global_Property.cmd_Length_Check = (Int32)data.WalkLength;
                        if (data.Address == "28074" || data.Address == "24070")
                        {
                            Veh_AGVM_Global.chargeport = true;
                        }
                        if (!Veh_AGVM_Global.OffLineTest)
                        {
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL DistanceFromSectionStart {2}: dist {1} Complete.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), data.DistanceFromSectionStart);

                            // With Connection to AGVM
                            SendValuesForRept(data, "144");
                            if (Veh_AGVM_Global.enActionType == Veh_AGVM_Global.ActionType.Move || Veh_AGVM_Global.enActionType == Veh_AGVM_Global.ActionType.Load ||
                                Veh_AGVM_Global.enActionType == Veh_AGVM_Global.ActionType.UnLoad)
                            {
                                Veh_AGVM_Global_Property.cmd_Length_Check = (Int32)data.WalkLength; //jason+190220  Use for save the cmd length 
                            }
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : Complete~~~ Veh_AGVM_Global_Property.cmd_Length_Check = {0}.", Veh_AGVM_Global_Property.cmd_Length_Check);

                            if (!vehTcpComm.TcpIpTimeOut)
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2}: Address {1} Complete.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL : data.Address = {0}.", data.Address);
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL : udtMove.Address = {0}.", DDS_Global.motionInfoInterCommSendData.udtMove.Address);

                                if (data.Address == DDS_Global.motionInfoInterCommSendData.udtMove.Address)                // Roy+180319
                                {
                                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL : bIsOk2GoOnTrigger = true.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);

                                    bIsOk2GoOnTrigger = true;
                                }
                                else if (Veh_AGVM_Global_Property.abort_On_Check == true)
                                {
                                    bIsOk2GoOnTrigger = true;
                                }
                            }
                            else
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : AGVM Connection TimeOut.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                                Veh_TcpIpComm_TimeOutStop(MoveType.single);
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : Stop Moving");
                            }
                        }
                        else
                        {
                            // Without Connection to AGVM
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : Address {1} Complete.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);

                            if (data.Address == DDS_Global.motionInfoInterCommSendData.udtMove.Address)                // Roy+180319
                            {
                                bIsOk2GoOnTrigger = true;
                            }
                        }
                        if (bIsOk2GoOnTrigger)
                        {
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {2} : Address {1} Moving_Complete ~ Relay/Trig signal ...", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);
                            // 
                            Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                            if (cstID != "XXX")
                            {
                                done = TrigEventLoadUnLoadingArrival(enload, data, cstID);
                            }
                            else
                            {
                                done = true;
                            }
                        }
                        else if (Veh_AGVM_Global_Property.abort_On_Check == true)
                        {
                            done = true;
                            Veh_AGVM_Global_Property.arrive_Complete_Check = true;
                        }
                        break;
                    //190315 jason-- cancel the no use case;
                    case (int)VehEventTypes.PostBlockNHidSectionExit:
                        //Send Request to AGVM
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, " @Veh_AGVM : VLVUL {2} : Send PostBlockNHidSectionExit release Address {1}", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);               // Roy*171030
                        Console.WriteLine("{0} PostBlockNHidSectionExit the section [{2}]  the address [{1}]", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), data.Section.ToString());                                        // Send BlockQuery to AGVM if OffLineTest is false
                        Veh_AGVM_Global.BlockControlSection = data.BlockControlSection;                    // Roy+171128
                        Veh_AGVM_Global.queryBlockSection = data.Section;
                        Veh_AGVM_Global.queryVehAddres = data.Address;      //Use this address to tell the AGVM the exit address.//181129

                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, " @Veh_AGVM : VLVUL {2} : Send PostBlockNHidSectionExit release Address {1}", DateTime.Now.ToString("HH:mm:ss.fff"), Veh_AGVM_Global.BlockControlSection.ToString(), loadStatus);               // Roy*171030

                        if (!Veh_AGVM_Global.OffLineTest)           // w/wo Connection to AGVM
                        {
                            // With Connection to AGVM
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1}: PostBlockNHidSectionExit release Wait for Reply", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);
                            SendValuesForRept(data, "136");

                            // waiting for AGVM reply 
                            if (!vehTcpComm.TcpIpTimeOut)
                            {
                                //Internal Trigger
                                //OnEventBlockControlQuery(new BlockControlQueryArg(data.BlockPassReqst));
                                // AGVM Reply

                                if (Veh_AGVM_Global.blBlockCtrl)            // w/wo BlockOuery Option
                                {
                                    // With BlockControl option
                                    //AGVM signaled
                                    if (Veh_AGVM_Global.vehBlockPassReply == (int)Status.OK)
                                    {
                                        //Veh_BlockControl_Move_Continue(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1}: Pass the block section {0} ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus, data.BlockSectionPassReqst);               // Roy*171030
                                    }
                                    else
                                    {
                                        //Veh_BlockControl_Move_Stop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Block Query Stop Moving", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                    }
                                }
                                else
                                {
                                    // No BlockControl option. Just Move 
                                    //Veh_BlockControl_Move_Continue(MoveType.single);                         // jason-- 181113
                                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1}: No Block Query Move Grant-Pass", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                }
                            }
                            else
                            {
                                //Raise Timeout Event
                                //Block Control Time out
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Block Query Time Out", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : TimeOut Stop Moving ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);
                            }
                        }
                        else
                        {
                            //Without connection to AGVM
                            // OffLineTest is true
                            if (Veh_AGVM_Global.vehBlockPassReply == (int)Status.OK)
                            {
                                Veh_BlockControl_Move_Continue(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Block Query Move Grant-Pass ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                            }
                            else
                            {
                                Veh_BlockControl_Move_Stop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Block Query Stop Moving ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                            }
                        }
                        break;
                    case (int)VehEventTypes.ReserveSection_Query:
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, " @Veh_AGVM : VLVUL {2} : Send ReserveSection_Query request Address {1}", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);               // Roy*171030
                        Veh_AGVM_Global.ReserveSection = data.ReserveSectionPassReqst.SectionList;
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, " @Veh_AGVM : VLVUL {2} : Send ReserveSection_Query request sections {1}", DateTime.Now.ToString("HH:mm:ss.fff"), Veh_AGVM_Global.Section.ToString(), loadStatus);               // Roy*171030
                        /*
                         * Check how many reserve should be take, and the next start point;
                         */
                        int reserveNum = Veh_AGVM_Global.ReserveSection.Count();
                        Veh_AGVM_Global_Property.reserve_Count_Check = reserveNum;
                        Veh_AGVM_Global_Property.has_already_Count_Check = has_already_Count;
                        Veh_AGVM_Global_Property.reserve_direction_List_Check = reserve_direction_list;

                        if (!Veh_AGVM_Global.OffLineTest)        // w/wo Connection to AGVM
                        {
                            // With Connection to AGVM
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1}: ReserveSection_Query request Wait for Reply", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);
                            SendValuesForRept(data, "136");
                            // waiting for AGVM reply 
                            if (!vehTcpComm.TcpIpTimeOut)
                            {
                                if (Veh_AGVM_Global.blBlockCtrl)
                                {
                                    // With BlockControl option
                                    //AGVM signaled
                                    if (Veh_AGVM_Global.vehReserveReply == (int)Status.OK)
                                    {
                                        Veh_ReserveControl_Continue(MoveType.single);
                                        has_already_Count++;
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1}: Pass the Reserve section {0} ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus, data.ReserveSectionPassReqst);               // Roy*171030
                                    }
                                    else
                                    {
                                        Veh_ReserveControl_Stop(MoveType.single);
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Reserve Query Stop Moving", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                    }
                                }
                                else
                                {
                                    Veh_ReserveControl_Continue(MoveType.single);
                                    has_already_Count++;
                                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1}: No Reserve Query Move Grant-Pass", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                }
                            }
                            else
                            {
                                //Raise Timeout Event

                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Reserve Query Time Out", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : TimeOut Stop Moving ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);
                            }
                        }
                        else
                        {
                            //Without connection to AGVM
                            // OffLineTest is true
                            if (Veh_AGVM_Global.vehReserveReply == (int)Status.OK)
                            {
                                Veh_ReserveControl_Continue(MoveType.single);
                                has_already_Count++;
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Reserve Query Move Grant-Pass ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                            }
                            else
                            {
                                Veh_ReserveControl_Stop(MoveType.single);
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : VLVUL {1} : Reserve Query Stop Moving ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                            }
                        }
                        break;
                }
                #endregion
            }

        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++                   // Roy+180319
        protected bool Veh_Cancel_Procedure()
        {
            try
            {
                // Send the Guiding sections
                ////DDS_Global.motionInfoInterCommSendData.Move.Sections = Veh_AGVM_Global.GuideSections;              
                ////DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section = "";                 // Veh_AGVM_Global.querySection;       
                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToCancel;
                //DDS_Global.motionInfoInterCommSendData.Move.Type = MoveType.single;            

                DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isStop = (int)StopStatus.StopYes;
                DDS_Global.motionInfoInterCommSendData.isPause = (int)PauseStatus.PauseYes;
                DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);

                // Inform SendData Sent
                DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
                DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);

                //In this part cancel need to wait for the cancel complete and the address, sections, distance etc
                Veh_AGVM_Global_Property.cancel_Complete_Check = false;
                bool done = false;
                while (!done)
                {
                    if (Veh_AGVM_Global.blRxDataSent)
                    {
                        DDS.ReturnCode status = DDS_Global.motionInfo_VehInterCommReptDataReader.Take(
                                ref motionInfoInterCommReport,
                                ref sampleInfo_RptData,
                                 DDS.SampleStateKind.Any, DDS.ViewStateKind.Any, DDS.InstanceStateKind.Any);

                        if (status == DDS.ReturnCode.Ok)
                        {
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Vehicle Send Data");
                        }

                        if (motionInfoInterCommReport != null)
                        {
                            string cstID = "XXX";
                            //AnalyzeDDSFeedback(LoadCommand.Load, ref done, motionInfoInterCommReport, cstID);
                        }
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, ex.Message);
                return false;
            }
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected bool DDS_Abort_Func()
        {
            try
            {
                // Send the Guiding sections
                ////DDS_Global.motionInfoInterCommSendData.Move.Sections = Veh_AGVM_Global.GuideSections;              
                ////DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section = "";                 // Veh_AGVM_Global.querySection;       
                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToAbort;
                //DDS_Global.motionInfoInterCommSendData.Move.Type = MoveType.single;            

                DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isStop = (int)StopStatus.StopYes;
                DDS_Global.motionInfoInterCommSendData.isPause = (int)PauseStatus.PauseYes;
                DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);

                // Inform SendData Sent
                DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
                DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);

                return true;
            }
            catch (Exception ex)
            {
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, ex.Message);
                return false;
            }
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected bool Veh_Abort_Procedure()
        {
            //Wait for loading/unloading complete

            //Force to stop current move.

            if (VehCanStop())
            {
                Veh_AGVM_Global_Property.abort_On_Check = true;
                Veh_AGVM_Global_Property.IsCmdAbort = true;
                DDS_Abort_Func(); //Veh_OHTC_Global.Section
                //Thread.SpinWait(200);
            }

            while (Veh_AGVM_Global_Property.arrive_Complete_Check == false)
            {
                Thread.SpinWait(100);
            }

            return true;
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected bool Veh_Pause_Procedure()
        {
            try
            {
                // Send the Guiding sections
                //DDS_Global.motionInfoInterCommSendData.Move.Sections = Veh_AGVM_Global.GuideSections;                 // Roy-180319
                //DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section = "";                 // Veh_AGVM_Global.querySection;                     // Roy-*180319
                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToPause;             // CmdType.Stop;                  // Roy*180302
                //DDS_Global.motionInfoInterCommSendData.Move.Type = MoveType.single;                 // Roy-180319

                DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isStop = (int)StopStatus.StopYes;
                DDS_Global.motionInfoInterCommSendData.isPause = (int)PauseStatus.PauseYes;
                DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);

                // Inform SendData Sent
                DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
                DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
                Veh_AGVM_Global_Property.cancel_Complete_Check = false;
                do
                {
                    if (Veh_AGVM_Global.blRxDataSent)
                    {
                        DDS.ReturnCode status = DDS_Global.motionInfo_VehInterCommReptDataReader.Take(
                                ref motionInfoInterCommReport,
                                ref sampleInfo_RptData,
                                 DDS.SampleStateKind.Any, DDS.ViewStateKind.Any, DDS.InstanceStateKind.Any);

                        if (status == DDS.ReturnCode.Ok)
                        {
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Vehicle Send Data");
                        }

                        if (motionInfoInterCommReport != null)
                        {
                            foreach (MotionInfo_Vehicle_Inter_Comm_ReportData data in motionInfoInterCommReport)
                            {

                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Fatal, null, "@Veh_Move_Procedure :data eventType = " + data.eventTypes);
                                //eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "data.eventTypes = " + data.eventTypes);
                                switch (data.eventTypes)
                                {
                                    case (int)VehEventTypes.Address_Pass:
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Fatal, null, "@Veh_AGVM :  Veh_Move_Procedure: Address {1} Passed.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());               // Roy*171030

                                        if (!Veh_AGVM_Global.OffLineTest)
                                        {
                                            // With Connection to AGVM
                                            SendValuesForRept(data, "134");
                                            SendValuesForRept(data, "144");
                                            if (!vehTcpComm.TcpIpTimeOut)
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Fatal, null, "@Veh_AGVM :  Veh_Move_Procedure: Address {1} Passed Sent.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());
                                            }
                                            else
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Fatal, null, "@Veh_AGVM :  Veh_Move_Procedure: AGVM Connection TimeOut.");
                                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Fatal, null, "@Veh_AGVM :  Veh_Move_Procedure: Stop Moving");
                                            }
                                        }
                                        else
                                        {
                                            // Without Connection to AGVM
                                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Fatal, null, "@Veh_AGVM :  Veh_Move_Procedure: Address {1} Passed.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());

                                        }

                                        break;

                                    case (int)VehEventTypes.BlockSection_Query:                     // Roy*180319
                                        //Send Request to AGVM
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, " @Veh_AGVM :  Veh_Move_Procedure: Send Block Query Address {1}", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());               // Roy*171030
                                        //
                                        Veh_AGVM_Global.BlockControlSection = data.BlockControlSection;                    // Roy+171128
                                        Veh_AGVM_Global.queryBlockSection = data.Section;
                                        Veh_AGVM_Global.queryVehAddres = data.Address;

                                        // Send BlockQuery to AGVM if OffLineTest is false
                                        if (!Veh_AGVM_Global.OffLineTest)           // w/wo Connection to AGVM
                                        {
                                            // With Connection to AGVM
                                            SendValuesForRept(data, "134");

                                            // waiting for AGVM reply 
                                            if (!vehTcpComm.TcpIpTimeOut)
                                            {
                                                //Internal Trigger
                                                //OnEventBlockControlQuery(new BlockControlQueryArg(data.BlockPassReqst));
                                                // AGVM Reply

                                                if (Veh_AGVM_Global.blBlockCtrl)            // w/wo BlockOuery Option
                                                {
                                                    // With BlockControl option
                                                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Block Query Wait for Reply");               // Roy*171030

                                                    //AGVM signaled
                                                    if (Veh_AGVM_Global.vehBlockPassReply == (int)Status.OK)
                                                    {
                                                        Veh_BlockControl_Move_Continue(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Block Query Move Grant-Pass ");               // Roy*171030
                                                    }
                                                    else
                                                    {
                                                        Veh_BlockControl_Move_Stop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Block Query Stop Moving ");               // Roy*171030
                                                    }

                                                }
                                                else
                                                {
                                                    // No BlockControl option. Just Move 
                                                    Veh_BlockControl_Move_Continue(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Block Query Move Grant-Pass ");               // Roy*171030
                                                }
                                            }
                                            else
                                            {
                                                //Raise Timeout Event
                                                //Block Control Time out
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Block Query Time Out");               // Roy*171030
                                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: TimeOut Stop Moving ");
                                            }
                                        }
                                        else
                                        {
                                            //Without connection to AGVM
                                            // OffLineTest is true
                                            if (Veh_AGVM_Global.vehBlockPassReply == (int)Status.OK)
                                            {
                                                Veh_BlockControl_Move_Continue(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Block Query Move Grant-Pass ");               // Roy*171030
                                            }
                                            else
                                            {
                                                Veh_BlockControl_Move_Stop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Block Query Stop Moving ");               // Roy*171030
                                            }
                                        }

                                        break;

                                    case (int)VehEventTypes.PostBlockSectionExit:
                                        //Send Request to AGVM
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, " @Veh_AGVM :  {2} : Send Block release Address {1}", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString(), loadStatus);               // Roy*171030
                                        // Send BlockQuery to AGVM if OffLineTest is false
                                        Veh_AGVM_Global.BlockControlSection = data.BlockControlSection;                    // Roy+171128
                                        Veh_AGVM_Global.queryBlockSection = data.Section;
                                        Veh_AGVM_Global.queryVehAddres = data.Address;

                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, " @Veh_AGVM :  {2} : Send Block release Address {1}", DateTime.Now.ToString("HH:mm:ss.fff"), Veh_AGVM_Global.BlockControlSection.ToString(), loadStatus);               // Roy*171030

                                        if (!Veh_AGVM_Global.OffLineTest)           // w/wo Connection to AGVM
                                        {
                                            // With Connection to AGVM
                                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {1}: Block release Wait for Reply", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);
                                            SendValuesForRept(data, "136");

                                            // waiting for AGVM reply 
                                            if (!vehTcpComm.TcpIpTimeOut)
                                            {
                                                //Internal Trigger
                                                //OnEventBlockControlQuery(new BlockControlQueryArg(data.BlockPassReqst));
                                                // AGVM Reply

                                                if (Veh_AGVM_Global.blBlockCtrl)            // w/wo BlockOuery Option
                                                {
                                                    // With BlockControl option
                                                    //AGVM signaled
                                                    if (Veh_AGVM_Global.vehBlockPassReply == (int)Status.OK)
                                                    {
                                                        Veh_BlockControl_Move_Continue(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {1}: Block Query Move Grant-Pass ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                                    }
                                                    else
                                                    {
                                                        Veh_BlockControl_Move_Stop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {1} : Block Query Stop Moving ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                                    }
                                                }
                                                else
                                                {
                                                    // No BlockControl option. Just Move 
                                                    Veh_BlockControl_Move_Continue(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {1}: No Block Query Move Grant-Pass ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                                }
                                            }
                                            else
                                            {
                                                //Raise Timeout Event
                                                //Block Control Time out
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {1} : Block Query Time Out", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {1} : TimeOut Stop Moving ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);
                                            }
                                        }
                                        else
                                        {
                                            //Without connection to AGVM
                                            // OffLineTest is true
                                            if (Veh_AGVM_Global.vehBlockPassReply == (int)Status.OK)
                                            {
                                                Veh_BlockControl_Move_Continue(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {1} : Block Query Move Grant-Pass ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                            }
                                            else
                                            {
                                                Veh_BlockControl_Move_Stop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  {1} : Block Query Stop Moving ", DateTime.Now.ToString("HH:mm:ss.fff"), loadStatus);               // Roy*171030
                                            }
                                        }

                                        //Internal Trigger
                                        //OnEventBlockControlQuery(new BlockControlQueryArg(data.BlockPassReqst));
                                        //Wait for AGVM Reply
                                        break;

                                    case (int)VehEventTypes.Address_Arrival:
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Address {1} Arrived", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());               // Roy*171030

                                        if (!Veh_AGVM_Global.OffLineTest)
                                        {
                                            SendValuesForRept(data, "134");
                                            SendValuesForRept(data, "144");
                                            if (!vehTcpComm.TcpIpTimeOut)
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Address {1} Arrived Sent.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());
                                            }
                                            else
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: AGVM Connection TimeOut.");
                                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: TimeOut Stop Moving");
                                            }
                                        }
                                        else
                                        {
                                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Address {1} Arrived.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());
                                        }

                                        break;

                                    case (int)VehEventTypes.Moving_Restart:
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Moving Restarted at Address {1}", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());               // Roy*171030

                                        if (!Veh_AGVM_Global.OffLineTest)
                                        {
                                            SendValuesForRept(data, "144");

                                            if (!vehTcpComm.TcpIpTimeOut)
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Address {1} Moving Restarted.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());
                                            }
                                            else
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: AGVM Connection TimeOut.");
                                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: TimeOut Stop Moving");
                                            }
                                        }
                                        else
                                        {
                                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Address {1} Moving Restarted.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());
                                        }

                                        break;

                                    case (int)VehEventTypes.Moving_Pause:
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Moveing Paused at address {1}", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());               // Roy*171030

                                        if (!Veh_AGVM_Global.OffLineTest)
                                        {
                                            SendValuesForRept(data, "144");

                                            if (!vehTcpComm.TcpIpTimeOut)
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Address {1} Moving Paused.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());
                                            }
                                            else
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: AGVM Connection TimeOut.");
                                                Veh_TcpIpComm_TimeOutStop(MoveType.single);                         // Roy*180308 ... from cycle to single 
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: TimeOut Stop Moving");
                                            }
                                        }
                                        else
                                        {
                                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Address {1} Moving Paused.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());
                                        }
                                        Veh_AGVM_Global_Property.cancel_Complete_Check = true;
                                        break;


                                    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++                      // Roy+180308
                                    case (int)VehEventTypes.Moving_Complete:                    // cycle不適用 ...
                                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Moving Complete {1}", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());

                                        if (!Veh_AGVM_Global.OffLineTest)
                                        {
                                            SendValuesForRept(data, "132");

                                            if (!vehTcpComm.TcpIpTimeOut)
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Address {1} Moving Complete.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());
                                            }
                                            else
                                            {
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: AGVM Connection TimeOut.");
                                                Veh_TcpIpComm_TimeOutStop(MoveType.single);
                                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: TimeOut Stop Moving");
                                            }
                                        }
                                        else
                                        {
                                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM :  Veh_Move_Procedure: Address {1} Moving complete.", DateTime.Now.ToString("HH:mm:ss.fff"), data.Address.ToString());
                                        }

                                        if (data.Address == DDS_Global.motionInfoInterCommSendData.udtMove.Address)                // Roy+180319
                                        {
                                            enJobDone = VehJobDone.Yes;                     //+++ 
                                        }
                                        Veh_AGVM_Global_Property.cancel_Complete_Check = true;
                                        break;
                                        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                                }
                            }
                        }
                    }
                } while (Veh_AGVM_Global_Property.cancel_Complete_Check != true);

                return true;
            }
            catch (Exception ex)
            {
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, ex.Message);
                return false;
            }
        }
        //+++++++++++++++++++++++++++++++++++++++++++++                 // Roy+180302
        protected bool Veh_Stop_Procedure()
        {
            try
            {
                // Send the Guiding sections
                DDS_Global.motionInfoInterCommSendData.udtMove.GuidingSections = Veh_AGVM_Global.GuideSectionsToDestination;
                DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section = "";                 // Veh_AGVM_Global.querySection;                     // Roy*180319
                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToStop;
                DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = MoveType.cycle;             // MoveType.single;
                DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.NG;               // (int)Status.OK;
                DDS_Global.motionInfoInterCommSendData.isStop = (int)StopStatus.StopYes;
                DDS_Global.motionInfoInterCommSendData.isPause = (int)PauseStatus.PauseYes;
                DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Warn, null, "@Veh_AGVM : motionInfoInterCommSendData  F:Veh_Continue_Procedure_Restart Section = {0}", DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section);

                // Inform SendData Sent
                DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
                DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
                DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);

                return true;
            }
            catch (Exception ex)
            {
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, ex.Message);
                return false;
            }
        }
        //+++++++++++++++++++++++++++++++++++++++++++++
        public void SendValuesForRept(MotionInfo_Vehicle_Inter_Comm_ReportData reptData, string sCmd)
        {
            if (reptData.Address != "")
            {
                Veh_AGVM_Global.Address = reptData.Address;
            }
            if (reptData.Section != "")
            {
                Veh_AGVM_Global.Section = reptData.Section;
                Veh_AGVM_Global.DriveDirection = new TransSectioncs().Setdirection(Veh_AGVM_Global.Section);
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Warn, null, "@Veh_AGVM : SendValuesForRept Section DriveDirection = {0}", Veh_AGVM_Global.DriveDirection);

            }
            string allStopString = TransCommand_StopCommand.transCommand_StopCommand(reptData.stopStatusForEvent);
            Veh_AGVM_Global.BlockControlSection = reptData.BlockControlSection;
            Veh_AGVM_Global.cmpCode = reptData.cmpCode;
            Veh_AGVM_Global.cmpStatus = reptData.cmpStatus;
            Veh_AGVM_Global.DistanceFromSectionStart = (int)reptData.DistanceFromSectionStart;
            //Console.WriteLine("DistanceFromSectionStart = "+ reptData.DistanceFromSectionStart.ToString());
            Veh_AGVM_Global.vehLeftGuideLockStatus = reptData.vehLeftGuideLockStatus;
            Veh_AGVM_Global.vehRightGuideLockStatus = reptData.vehRightGuideLockStatus;
            Veh_AGVM_Global.vehModeStatus = reptData.vehModeStatus;
            Veh_AGVM_Global.vehLoadStatus = reptData.vehLoadStatus;
            Veh_AGVM_Global.vehWalkLength = (Int32)reptData.WalkLength;
            Veh_AGVM_Global.BatteryCapacity = reptData.BatteryCapacity;
            Veh_AGVM_Global.BatteryTemperature = reptData.BatteryTemperature;
            switch (reptData.WheelAngle)
            {
                case VehWheelSteeringAngle.Zero:
                    Veh_AGVM_Global.SteeringWheel = 0;
                    break;
                case VehWheelSteeringAngle.LeftNinety:
                    Veh_AGVM_Global.SteeringWheel = 90;
                    break;
                case VehWheelSteeringAngle.RightNinety:
                    Veh_AGVM_Global.SteeringWheel = -90;
                    break;
            }
            switch (reptData.ChargeStatus)
            {
                case 0:
                    Veh_AGVM_Global.ChargeStatus = VhChargeStatus.ChargeStatusNone;
                    break;
                case 1:
                    Veh_AGVM_Global.ChargeStatus = VhChargeStatus.ChargeStatusHandshaking;
                    break;
                case 2:
                    Veh_AGVM_Global.ChargeStatus = VhChargeStatus.ChargeStatusCharging;
                    break;
            }
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : WalkLength = {0}", Veh_AGVM_Global.vehWalkLength);

            if (allStopString[8].ToString() == "1" || allStopString[16].ToString() == "1")  //8 => pauseStatus
                Veh_AGVM_Global.vehPauseStatus = 1;
            else
                Veh_AGVM_Global.vehPauseStatus = 0;

            if (allStopString[13].ToString() == "1" || allStopString[11].ToString() == "1")
                Veh_AGVM_Global.vehBlockStopStatus = 1;
            else
                Veh_AGVM_Global.vehBlockStopStatus = 0;

            if (allStopString[10].ToString() == "1")
                Veh_AGVM_Global.vehObstStopStatus = 1;
            else
                Veh_AGVM_Global.vehObstStopStatus = 0;

            //Veh_AGVM_Global.vehObstStopStatus = reptData.vehObstacleStopStatus;
            Veh_AGVM_Global.eventTypes = reptData.eventTypes;
            Veh_AGVM_Global.vehObstDist = reptData.vehObstDist;
            Veh_AGVM_Global.vehModeStatus = reptData.vehModeStatus;
            if (Veh_AGVM_Global.fakeID == false)
            {
                Veh_AGVM_Global.CSTID_Load = reptData.loadStatus.Veh_CSTID;
                Veh_AGVM_Global.CSTID_UnLoad = reptData.unLoadStatus.Veh_CSTID;
            }
            Veh_AGVM_Global.vehActionStatus = reptData.vehActionStatus;
            if (allStopString[10].ToString() == "1")
                Veh_AGVM_Global.vehHIDStopStatus = 1;
            else
                Veh_AGVM_Global.vehHIDStopStatus = 0;
            Veh_AGVM_Global.HIDControlSection = reptData.HIDControlSection;
            Veh_AGVM_Global.cstID = Veh_AGVM_Global.CSTID_Load;
            #region Conversion between EventTypes, CmpCode,..
            EventTypeConv(Veh_AGVM_Global.eventTypes, ref eventTypes);
            CompleteStatusConv(Veh_AGVM_Global.cmpStatus, ref cmpStatus);
            GuideStatusConv(Veh_AGVM_Global.vehLeftGuideLockStatus, ref lGuideStatus);
            GuideStatusConv(Veh_AGVM_Global.vehRightGuideLockStatus, ref rGuideStatus);
            StopStatusConv(Veh_AGVM_Global.vehBlockStopStatus, ref blockStatus);
            StopStatusConv(Veh_AGVM_Global.vehObstStopStatus, ref obstStatus);
            StopStatusConv(Veh_AGVM_Global.vehPauseStatus, ref pauseStatus);
            LoadStatusConv(Veh_AGVM_Global.vehLoadStatus, ref loadStatus);
            ModeStatusConv(Veh_AGVM_Global.vehModeStatus, ref modeStatus);
            ActionStatusConv(Veh_AGVM_Global.vehActionStatus, ref actionStatus);
            #endregion
            EventType transEventType = new EventType();
            loadStatus = Veh_AGVM_Global.hasCst;
            // Send Data to AGVM
            string msg = string.Empty;
            transEventType = TransCommand.transCommand_EventType(Veh_AGVM_Global.eventTypes);
            switch (sCmd)
            {
                case "134":
                    if (!Veh_AGVM_Global.OffLineTest)
                    {
                        Veh_AGVM_Global.vehAGVMomm.sned_Str134("ID_134", transEventType, Veh_AGVM_Global.Section,
                            Veh_AGVM_Global.Address, Veh_AGVM_Global.BlockControlSection,
                            lGuideStatus, rGuideStatus, blockStatus, pauseStatus, obstStatus, loadStatus, (DriveDirction)Veh_AGVM_Global.DriveDirection,
                            Veh_AGVM_Global.DistanceFromSectionStart);
                    }

                    GetReptMsg("134", ref msg);
                    OnEventMsgToAGVM(new ReportMsgEventArg(msg));

                    break;
                case "143":
                    if (!Veh_AGVM_Global.OffLineTest)
                    {
                        Veh_AGVM_Global.vehAGVMomm.sned_Str143(Veh_AGVM_Global.Address, Veh_AGVM_Global.Section, modeStatus, actionStatus, 0, 0, 0, 0, 0, 0, 0, 0, "0", "0", "0", Veh_AGVM_Global.BatteryTemperature);
                    }
                    GetReptMsg("143", ref msg);
                    OnEventMsgToAGVM(new ReportMsgEventArg(msg));
                    break;
                case "144":
                    if (!Veh_AGVM_Global.OffLineTest)
                    {
                        Veh_AGVM_Global.vehAGVMomm.sned_Str144("ID_144",
                            Veh_AGVM_Global.Address, Veh_AGVM_Global.Section,
                            modeStatus, actionStatus, powerStatus, Veh_AGVM_Global.hasCst, obstStatus, blockStatus,
                            pauseStatus, lGuideStatus, rGuideStatus,
                            (int)Veh_AGVM_Global.DistanceFromSectionStart, (DriveDirction)Veh_AGVM_Global.DriveDirection, 
                            Veh_AGVM_Global.BatteryCapacity, Veh_AGVM_Global.BatteryTemperature , Veh_AGVM_Global.SteeringWheel, Veh_AGVM_Global.ChargeStatus);
                    }

                    GetReptMsg("144", ref msg);
                    OnEventMsgToAGVM(new ReportMsgEventArg(msg));

                    break;

                case "132":
                    if (!Veh_AGVM_Global.OffLineTest)
                    {
                        Veh_AGVM_Global.vehAGVMomm.sned_Str132(
                            Veh_AGVM_Global.command_ID_from_AGVM,
                            activeType,
                            Veh_AGVM_Global.CSTID_Load.ToString(),
                            Veh_AGVM_Global.cmpCode,
                            cmpStatus, Veh_AGVM_Global.vehWalkLength);
                    }

                    GetReptMsg("132", ref msg);
                    OnEventMsgToAGVM(new ReportMsgEventArg(msg));

                    break;

                case "136":                                                         //jason++ 181025
                    if ((Veh_AGVM_Global.hasCst == VhLoadCSTStatus.NotExist) && (transEventType == EventType.AdrOrMoveArrivals))
                    {
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : 136-1 {0}:  BlockControlSection = {1}", loadStatus, Veh_AGVM_Global.BlockControlSection);

                        Veh_AGVM_Global.vehAGVMomm.sned_Str136(
                            "ID_136",
                            EventType.LoadArrivals,
                            Veh_AGVM_Global.Section,
                            Veh_AGVM_Global.Address,
                            null, //Veh_AGVM_Global.ReserveSection,
                            Veh_AGVM_Global.BlockControlSection,
                            Veh_AGVM_Global.HIDControlSection,
                            Veh_AGVM_Global.hasCst,
                            Veh_AGVM_Global.cstID,
                            Veh_AGVM_Global.vehBlockPassReply.ToString(),
                            Veh_AGVM_Global.vehHIDPassReply.ToString(),
                            (int)Veh_AGVM_Global.DistanceFromSectionStart
                            );
                        Veh_AGVM_Global.check_LoadArrived = true;
                    }
                    else if ((Veh_AGVM_Global.hasCst == VhLoadCSTStatus.Exist) && (transEventType == EventType.AdrOrMoveArrivals))
                    {
                        eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : 136-2 {0}:  BlockControlSection = {1}", loadStatus, Veh_AGVM_Global.BlockControlSection);

                        if (!Veh_AGVM_Global.OffLineTest)
                        {
                            Veh_AGVM_Global.vehAGVMomm.sned_Str136(
                                "ID_136",
                                EventType.UnloadArrivals,
                                Veh_AGVM_Global.Section,
                                Veh_AGVM_Global.Address,
                                null, //Veh_AGVM_Global.ReserveSection,
                                Veh_AGVM_Global.BlockControlSection,
                                Veh_AGVM_Global.HIDControlSection,
                                Veh_AGVM_Global.hasCst,
                                Veh_AGVM_Global.cstID,
                                Veh_AGVM_Global.vehBlockPassReply.ToString(),
                                Veh_AGVM_Global.vehHIDPassReply.ToString(),
                                (int)Veh_AGVM_Global.DistanceFromSectionStart
                                );
                            //Veh_AGVM_Global.check_LoadArrived = false;
                        }
                        GetReptMsg("136", ref msg);
                        OnEventMsgToAGVM(new ReportMsgEventArg(msg));
                    }
                    else if (Veh_AGVM_Global.load_Process != null)
                    {
                        if (Veh_AGVM_Global.load_Process == "starting")
                        {
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : 136-load {0}: Load starting", loadStatus, Veh_AGVM_Global.BlockControlSection);

                            Veh_AGVM_Global.vehAGVMomm.sned_Str136(
                                "ID_136",
                                EventType.Vhloading,
                                Veh_AGVM_Global.Section,
                                Veh_AGVM_Global.Address,
                                null, //Veh_AGVM_Global.ReserveSection,
                                Veh_AGVM_Global.BlockControlSection,
                                Veh_AGVM_Global.HIDControlSection,
                                Veh_AGVM_Global.hasCst,
                                Veh_AGVM_Global.cstID,
                                Veh_AGVM_Global.vehBlockPassReply.ToString(),
                                Veh_AGVM_Global.vehHIDPassReply.ToString(),
                                (int)Veh_AGVM_Global.DistanceFromSectionStart
                                );
                        }
                        if (Veh_AGVM_Global.load_Process == "complete")
                        {
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : 136-load {0}: Load Complete", loadStatus, Veh_AGVM_Global.BlockControlSection);

                            Veh_AGVM_Global.vehAGVMomm.sned_Str136(
                                "ID_136",
                                EventType.LoadComplete,
                                Veh_AGVM_Global.Section,
                                Veh_AGVM_Global.Address,
                                null, //Veh_AGVM_Global.ReserveSection,
                                Veh_AGVM_Global.BlockControlSection,
                                Veh_AGVM_Global.HIDControlSection,
                                Veh_AGVM_Global.hasCst,
                                Veh_AGVM_Global.cstID,
                                Veh_AGVM_Global.vehBlockPassReply.ToString(),
                                Veh_AGVM_Global.vehHIDPassReply.ToString(),
                                (int)Veh_AGVM_Global.DistanceFromSectionStart
                                );
                        }
                    }
                    else if (Veh_AGVM_Global.unload_Process != null)
                    {
                        if (Veh_AGVM_Global.unload_Process == "starting")
                        {
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : 136-unload {0}: unload starting", loadStatus, Veh_AGVM_Global.BlockControlSection);

                            Veh_AGVM_Global.vehAGVMomm.sned_Str136(
                                "ID_136",
                                EventType.Vhunloading,
                                Veh_AGVM_Global.Section,
                                Veh_AGVM_Global.Address,
                                null, //Veh_AGVM_Global.ReserveSection,
                                Veh_AGVM_Global.BlockControlSection,
                                Veh_AGVM_Global.HIDControlSection,
                                Veh_AGVM_Global.hasCst,
                                Veh_AGVM_Global.cstID,
                                Veh_AGVM_Global.vehBlockPassReply.ToString(),
                                Veh_AGVM_Global.vehHIDPassReply.ToString(),
                                (int)Veh_AGVM_Global.DistanceFromSectionStart
                                );
                        }
                        if (Veh_AGVM_Global.unload_Process == "complete")
                        {
                            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : 136-unload {0}: unload Complete", loadStatus, Veh_AGVM_Global.BlockControlSection);

                            Veh_AGVM_Global.vehAGVMomm.sned_Str136(
                                "ID_136",
                                EventType.UnloadComplete,
                                Veh_AGVM_Global.Section,
                                Veh_AGVM_Global.Address,
                                null, //Veh_AGVM_Global.ReserveSection,
                                Veh_AGVM_Global.BlockControlSection,
                                Veh_AGVM_Global.HIDControlSection,
                                Veh_AGVM_Global.hasCst,
                                Veh_AGVM_Global.cstID,
                                Veh_AGVM_Global.vehBlockPassReply.ToString(),
                                Veh_AGVM_Global.vehHIDPassReply.ToString(),
                                (int)Veh_AGVM_Global.DistanceFromSectionStart
                                );
                        }
                    }
                    else
                    {
                        if (!Veh_AGVM_Global.OffLineTest)
                        {
                            switch (transEventType)
                            {
                                case EventType.BlockReq:
                                    Veh_AGVM_Global.vehAGVMomm.sned_Str136(
                                    "ID_136",
                                    transEventType,
                                    Veh_AGVM_Global.Section,
                                    Veh_AGVM_Global.Address,
                                    null, //Veh_AGVM_Global.ReserveSection,
                                    Veh_AGVM_Global.BlockControlSection,
                                    Veh_AGVM_Global.HIDControlSection,
                                    Veh_AGVM_Global.hasCst,
                                    Veh_AGVM_Global.cstID,
                                    Veh_AGVM_Global.vehBlockPassReply.ToString(),
                                    Veh_AGVM_Global.vehHIDPassReply.ToString(),
                                    (int)Veh_AGVM_Global.DistanceFromSectionStart
                                    );
                                    break;
                                case EventType.BlockRelease:
                                    Veh_AGVM_Global.vehAGVMomm.sned_Str136(
                                    "ID_136",
                                    transEventType,
                                    Veh_AGVM_Global.Section,
                                    Veh_AGVM_Global.Address,
                                    null, //
                                    Veh_AGVM_Global.BlockControlSection,
                                    Veh_AGVM_Global.HIDControlSection,
                                    Veh_AGVM_Global.hasCst,
                                    Veh_AGVM_Global.cstID,
                                    Veh_AGVM_Global.Address.ToString(),
                                    Veh_AGVM_Global.vehHIDPassReply.ToString(),
                                    (int)Veh_AGVM_Global.DistanceFromSectionStart
                                    );
                                    break;
                                case EventType.ReserveReq:
                                    Veh_AGVM_Global.vehAGVMomm.sned_Str136(
                                    "ID_136",
                                    transEventType,
                                    Veh_AGVM_Global.Section,
                                    Veh_AGVM_Global.Address,
                                    Veh_AGVM_Global.ReserveSection,
                                    Veh_AGVM_Global.BlockControlSection,
                                    Veh_AGVM_Global.HIDControlSection,
                                    Veh_AGVM_Global.hasCst,
                                    Veh_AGVM_Global.cstID,
                                    Veh_AGVM_Global.vehBlockPassReply.ToString(),
                                    Veh_AGVM_Global.vehHIDPassReply.ToString(),
                                    (int)Veh_AGVM_Global.DistanceFromSectionStart
                                    );
                                    break;
                                    //default:
                                    //Here needs some more stuff for HID.
                                    //Veh_AGVM_Global.check_LoadArrived = false;
                            }
                            if (Veh_AGVM_Global.eventTypes == 18)
                            {
                                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : block && HID release", loadStatus, Veh_AGVM_Global.BlockControlSection);

                                Veh_AGVM_Global.vehAGVMomm.sned_Str136(
                                    "ID_136",
                                    EventType.BlockRelease,
                                    Veh_AGVM_Global.Section,
                                    Veh_AGVM_Global.Address,
                                    null, //Veh_AGVM_Global.ReserveSection,
                                    Veh_AGVM_Global.BlockControlSection,
                                    Veh_AGVM_Global.HIDControlSection,
                                    Veh_AGVM_Global.hasCst,
                                    Veh_AGVM_Global.cstID,
                                    Veh_AGVM_Global.Address.ToString(),
                                    Veh_AGVM_Global.vehHIDPassReply.ToString(),
                                    (int)Veh_AGVM_Global.DistanceFromSectionStart
                                    );
                                break;
                            }
                        }
                        GetReptMsg("136", ref msg);
                        OnEventMsgToAGVM(new ReportMsgEventArg(msg));
                    }
                    break;
                case "172":
                    if (!Veh_AGVM_Global.OffLineTest)
                    {
                        Veh_AGVM_Global.vehAGVMomm.sned_Str172(0);
                    }
                    GetReptMsg("172", ref msg);
                    OnEventMsgToAGVM(new ReportMsgEventArg(msg));
                    break;
                case "174":
                    if (!Veh_AGVM_Global.OffLineTest)
                    {
                        Veh_AGVM_Global.vehAGVMomm.sned_Str174(Veh_AGVM_Global.Address, 0);
                    }
                    GetReptMsg("174", ref msg);
                    OnEventMsgToAGVM(new ReportMsgEventArg(msg));
                    break;
                case "194":
                    if (!Veh_AGVM_Global.OffLineTest)
                    {
                        Veh_AGVM_Global.vehAGVMomm.sned_Str194("0", 0);
                    }
                    GetReptMsg("194", ref msg);
                    OnEventMsgToAGVM(new ReportMsgEventArg(msg));
                    break;
                case "152":
                    if (!Veh_AGVM_Global.OffLineTest)
                    {
                        Veh_AGVM_Global.vehAGVMomm.sned_Str152(0);
                    }

                    GetReptMsg("152", ref msg);
                    OnEventMsgToAGVM(new ReportMsgEventArg(msg));

                    break;
            }
        }
        //+++++++++++++++++++++++++++++++++++++++                   // Roy+180319
        protected void Veh_Restart_Procedure()
        {
            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToRestart;
            if (DDS_Global.checkblock == true)                   //For passing the block 
            {
                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToBlockSectionQueryResult;
                DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section = DDS_Global.NGsection;
            }
            //DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.BlockSectionPassReply = Status.OK;               
            //DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section = "";                 // DDS_Global.motionInfoInterCommReptData.BlockSectionPassReqst.Section;                     // Roy-*180319

            DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
            DDS_Global.motionInfoInterCommSendData.isStop = (int)Status.NG;
            DDS_Global.motionInfoInterCommSendData.isPause = (int)Status.NG;
            DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);

            // Inform SendData Sent
            DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
            DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
            DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
        }
        //+++++++++++++++++++++++++++++++++++++++        
        protected bool Veh_PowerOn_Procedure()  // What should here do? 181008
        {
            try
            {

                return true;
            }
            catch (Exception ex)
            {
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, ex.Message);
                return false;
            }
        }

        protected void Veh_Continue_Procedure_Restart()
        {
            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToRestart;
            if (DDS_Global.checkblock == true)
            {
                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToContinue; //CmdType.CmdToBlockSectionQueryResult;      jason*181221
                DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section = DDS_Global.NGsection;
            }
            DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.BlockSectionPassReply = Status.OK;                     // Roy*180319
            //DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section = DDS_Global.motionInfoInterCommReptData.BlockSectionPassReqst.Section;                     // Roy*180319

            DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
            DDS_Global.motionInfoInterCommSendData.isStop = (int)Status.NG;
            DDS_Global.motionInfoInterCommSendData.isPause = (int)Status.NG;
            DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Warn, null, "@Veh_AGVM : motionInfoInterCommSendData  F:Veh_Continue_Procedure_Restart Section = {0}", DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section);

            // Inform SendData Sent
            DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
            DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
            DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++              // Roy+180319
        protected void Veh_HIDControl_Move_Continue(MoveType mType)
        {
            // Send Continue Message to Vehicle
            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToHIDSectionQueryResult;
            DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = mType;

            DDS_Global.motionInfoInterCommSendData.HIDSectionPassReply.Section = Veh_AGVM_Global.HIDControlSection;

            DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
            DDS_Global.motionInfoInterCommSendData.HIDSectionPassReply.HIDSectionPassReply = Status.OK;
            DDS_Global.motionInfoInterCommSendData.isStop = (int)StopStatus.StopNo;
            DDS_Global.motionInfoInterCommSendData.isPause = (int)PauseStatus.PauseNo;
            DDS_Global.motionInfoInterCommSendData.HIDControlTimeOut = false;
            DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);

            // Inform SendData Sent
            DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
            DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
            DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
            //
        }

        protected void Veh_HIDControl_Move_Stop(MoveType mType)
        {
            // Send Pause Message to Vehicle
            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToHIDSectionQueryResult;
            DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = mType;
            DDS_Global.motionInfoInterCommSendData.HIDSectionPassReply.Section = Veh_AGVM_Global.queryHIDSection;

            DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.NG;
            DDS_Global.motionInfoInterCommSendData.isStop = (int)StopStatus.StopYes;
            DDS_Global.motionInfoInterCommSendData.isPause = (int)PauseStatus.PauseYes;
            DDS_Global.motionInfoInterCommSendData.HIDControlTimeOut = false;
            DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);

            // Inform SendData Sent
            DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
            DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
            DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
            //
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected void Veh_BlockControl_Move_Continue(MoveType mType)
        {
            // Send Continue Message to Vehicle
            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToBlockSectionQueryResult;                     // Roy*180319
            DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = mType;

            //DDS_Global.motionInfoInterCommSendData.BlockPassReply.Section = Veh_AGVM_Global.querySection;                           // Roy-171002
            DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section = Veh_AGVM_Global.BlockControlSection;                   // Roy+171002                     // Roy*180319

            DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
            DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.BlockSectionPassReply = Status.OK;                     // Roy*180319
            DDS_Global.motionInfoInterCommSendData.isStop = (int)StopStatus.StopNo;
            DDS_Global.motionInfoInterCommSendData.isPause = (int)PauseStatus.PauseNo;
            DDS_Global.motionInfoInterCommSendData.BlockControlTimeOut = false;
            DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : motionInfoInterCommSendData  F:Veh_BlockControl_Move_Continue Section = {0}", DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section);
            // Inform SendData Sent
            DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
            DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
            DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
            //
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected void Veh_ReserveControl_Continue(MoveType mType)
        {
            // Send Continue Message to Vehicle
            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToReserveSectionQueryResult;                     // Roy*180319
            DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = mType;
            DDS_Global.motionInfoInterCommSendData.ReserveSectionPassReply.ReserveSectionPassReply = Status.OK;
            DDS_Global.motionInfoInterCommSendData.ReserveSectionPassReply.SectionList = Veh_AGVM_Global.ReserveSection;
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : motionInfoInterCommSendData  F:Veh_ReserveControl_Continue Veh_AGVM_Global.ReserveSection = {0}", Veh_AGVM_Global.ReserveSection);

            DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.OK;
            DDS_Global.motionInfoInterCommSendData.isStop = (int)StopStatus.StopNo;
            DDS_Global.motionInfoInterCommSendData.isPause = (int)PauseStatus.PauseNo;
            DDS_Global.motionInfoInterCommSendData.BlockControlTimeOut = false;
            DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : motionInfoInterCommSendData  F:Veh_ReserveControl_Continue Section = {0}", DDS_Global.motionInfoInterCommSendData.ReserveSectionPassReply.SectionList);

            DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
            DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
            DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected void Veh_BlockControl_Move_Stop(MoveType mType)
        {
            // Send Pause Message to Vehicle
            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToBlockSectionQueryResult;                     // Roy*180319
            DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = mType;
            DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section = Veh_AGVM_Global.BlockControlSection;                     // Roy*180319

            DDS_Global.NGsection = DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section; //jason++ 181219

            DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.NG;
            DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.BlockSectionPassReply = Status.NG;
            DDS_Global.motionInfoInterCommSendData.isStop = (int)StopStatus.StopYes;
            DDS_Global.motionInfoInterCommSendData.isPause = (int)PauseStatus.PauseYes;
            DDS_Global.motionInfoInterCommSendData.BlockControlTimeOut = false;
            DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : motionInfoInterCommSendData  F:Veh_BlockControl_Move_Stop Section = {0}", DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section);

            // Inform SendData Sent
            DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
            DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
            DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
            //
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected void Veh_ReserveControl_Stop(MoveType mType)
        {
            // Send Pause Message to Vehicle
            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToReserveSectionQueryResult;                     // Roy*180319
            DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = mType;
            //DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section = Veh_AGVM_Global.BlockControlSection;                     // Roy*180319

            DDS_Global.NGsection = DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section; //jason++ 181219

            DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.NG;
            DDS_Global.motionInfoInterCommSendData.ReserveSectionPassReply.ReserveSectionPassReply = Status.NG;
            DDS_Global.motionInfoInterCommSendData.isStop = (int)StopStatus.StopYes;
            DDS_Global.motionInfoInterCommSendData.isPause = (int)PauseStatus.PauseYes;
            DDS_Global.motionInfoInterCommSendData.BlockControlTimeOut = false;
            DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : motionInfoInterCommSendData  F:Veh_BlockControl_Move_Stop Section = {0}", DDS_Global.motionInfoInterCommSendData.BlockSectionPassReply.Section);

            // Inform SendData Sent
            DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
            DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
            DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
            //
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected void Veh_TcpIpComm_TimeOutStop(MoveType mType)
        {
            // Send Pause Message to Vehicle
            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToStop;
            DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = mType;
            DDS_Global.motionInfoInterCommSendData.isContinue = (int)Status.NG;
            DDS_Global.motionInfoInterCommSendData.isStop = (int)StopStatus.StopYes;
            DDS_Global.motionInfoInterCommSendData.isPause = (int)PauseStatus.PauseYes;
            DDS_Global.motionInfoInterCommSendData.BlockControlTimeOut = true;
            DDS_Global.motionInfo_VehInterCommSendDataWriter.Write(DDS_Global.motionInfoInterCommSendData);

            // Inform SendData Sent
            DDS_Global.motionInfoHandShakeTxData.cmdSend = 1;
            DDS_Global.motionInfoHandShakeTxData.cmdReceive = 0;
            DDS_Global.motionInfo_HandShakeSendDataWriter.Write(DDS_Global.motionInfoHandShakeTxData);
            //
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        protected void GetReptMsg(string id, ref string msg)
        {

            msg = string.Format(
                    @"Cmd_ID: {0},
                    Event Type: {1},
                    Current Section: {2},
                    Current Address: {3},
                    BlockCtrl Section: {4},
                    Left Guide Status: {5},
                    Right Guide Status: {6},
                    Block Status: {7},
                    Pause Status : {8},
                    Obstacle Stop Status: {9},
                    Load Cst Status: {10},
                    Distance From Section Start: {11}",
                    id, eventTypes.ToString(),
                    Veh_AGVM_Global.Section, Veh_AGVM_Global.Address, Veh_AGVM_Global.BlockControlSection,
                    lGuideStatus.ToString(), rGuideStatus.ToString(), blockStatus.ToString(),
                    pauseStatus.ToString(), obstStatus.ToString(), loadStatus.ToString(),
                    Veh_AGVM_Global.DistanceFromSectionStart.ToString());
        }

        protected void sendloading()
        {
            Veh_AGVM_Global.vehAGVMomm.sned_Str136(
                                "ID_136",
                                EventType.LoadArrivals,
                                Veh_AGVM_Global.Section,
                                Veh_AGVM_Global.Address,
                                null, //Veh_AGVM_Global.ReserveSection,
                                Veh_AGVM_Global.BlockControlSection,
                                Veh_AGVM_Global.HIDControlSection,
                                Veh_AGVM_Global.hasCst,
                                Veh_AGVM_Global.cstID,
                                Veh_AGVM_Global.vehBlockPassReply.ToString(),
                                Veh_AGVM_Global.vehHIDPassReply.ToString(),
                                (int)Veh_AGVM_Global.DistanceFromSectionStart
                                );
            Thread.Sleep(500);
            //Veh_AGVM_Global.vehAGVMomm.sned_Str136(
            //                    "ID_136",
            //                    EventType.Vhloading,
            //                    Veh_AGVM_Global.Section,
            //                    Veh_AGVM_Global.Address,
            //                    null, //Veh_AGVM_Global.ReserveSection,
            //                    Veh_AGVM_Global.BlockControlSection,
            //                    Veh_AGVM_Global.HIDControlSection,
            //                    Veh_AGVM_Global.hasCst,
            //                    Veh_AGVM_Global.cstID,
            //                    Veh_AGVM_Global.vehBlockPassReply.ToString(),
            //                    Veh_AGVM_Global.vehHIDPassReply.ToString(),
            //                    (int)Veh_AGVM_Global.DistanceFromSectionStart
            //                    );
        }

        protected void sendunloading()
        {
            Veh_AGVM_Global.vehAGVMomm.sned_Str136(
                                "ID_136",
                                EventType.UnloadArrivals,
                                Veh_AGVM_Global.Section,
                                Veh_AGVM_Global.Address,
                                null, //Veh_AGVM_Global.ReserveSection,
                                Veh_AGVM_Global.BlockControlSection,
                                Veh_AGVM_Global.HIDControlSection,
                                Veh_AGVM_Global.hasCst,
                                Veh_AGVM_Global.cstID,
                                Veh_AGVM_Global.vehBlockPassReply.ToString(),
                                Veh_AGVM_Global.vehHIDPassReply.ToString(),
                                (int)Veh_AGVM_Global.DistanceFromSectionStart
                                );
            Thread.Sleep(500);
            //Veh_AGVM_Global.vehAGVMomm.sned_Str136(
            //                    "ID_136",
            //                    EventType.Vhunloading,
            //                    Veh_AGVM_Global.Section,
            //                    Veh_AGVM_Global.Address,
            //                    null, //Veh_AGVM_Global.ReserveSection,
            //                    Veh_AGVM_Global.BlockControlSection,
            //                    Veh_AGVM_Global.HIDControlSection,
            //                    Veh_AGVM_Global.hasCst,
            //                    Veh_AGVM_Global.cstID,
            //                    Veh_AGVM_Global.vehBlockPassReply.ToString(),
            //                    Veh_AGVM_Global.vehHIDPassReply.ToString(),
            //                    (int)Veh_AGVM_Global.DistanceFromSectionStart
            //                    );
        }
        #region Report Type Conversion
        protected void EventTypeConv(int type, ref EventType eType)
        {
            switch (type)
            {
                case 0:
                    eType = EventType.LoadArrivals;
                    break;

                case 1:
                    eType = EventType.LoadComplete;
                    break;

                case 2:
                    eType = EventType.UnloadArrivals;
                    break;

                case 3:
                    eType = EventType.UnloadComplete;
                    break;

                //case 4:   //jason-- 180829
                //    eType = EventType.AdrArrivals;                  //.MovePause;                   // Roy*171128
                //    break;
                case 4:     //jason++ 180829
                    eType = EventType.AdrOrMoveArrivals;                  //.MovePause;                   // Roy*171128
                    break;
                case 5:
                    eType = EventType.AdrPass;
                    break;

                case 6:

                    //eType = EventType.MovePause;
                    break;

                case 7:
                    //eType = EventType.MoveRestart;
                    break;

                case 8:
                    eType = EventType.BlockReq;
                    break;
            }
        }

        protected void CompleteStatusConv(int status, ref CompleteStatus cStatus)
        {
            switch (status)
            {
                case 0:
                    cStatus = CompleteStatus.CmpStatusMove;
                    break;

                case 1:
                    //jason-- 180829
                    cStatus = CompleteStatus.CmpStatusLoad;
                    break;

                case 2:
                    cStatus = CompleteStatus.CmpStatusUnload;
                    break;

                case 3:
                    cStatus = CompleteStatus.CmpStatusLoadunload;
                    break;
                case 4:
                    cStatus = CompleteStatus.CmpStatusHome;
                    break;
                case 5:
                    cStatus = CompleteStatus.CmpStatusOverride;
                    break;
                case 6:
                    cStatus = CompleteStatus.CmpStatusCstIdrenmae;
                    break;
                case 7:
                    cStatus = CompleteStatus.CmpStatusMtlhome;
                    break;
                case 10:
                    cStatus = CompleteStatus.CmpStatusMoveToCharger;
                    break;
                case 11:
                    cStatus = CompleteStatus.CmpStatusSystemOut;
                    break;
                case 12:
                    cStatus = CompleteStatus.CmpStatusSystemIn;
                    break;
                case 20:
                    cStatus = CompleteStatus.CmpStatusCancel;
                    break;
                case 21:
                    cStatus = CompleteStatus.CmpStatusAbort;
                    break;
                case 22:
                    cStatus = CompleteStatus.CmpStatusVehicleAbort;
                    break;
                case 23:
                    cStatus = CompleteStatus.CmpStatusIdmisMatch;
                    break;
                case 24:
                    cStatus = CompleteStatus.CmpStatusIdreadFailed;
                    break;
                case 64:
                    cStatus = CompleteStatus.CmpStatusInterlockError;
                    break;
            }
        }

        protected void ActiveTypeConv(int type, ref ActiveType aType)
        {
            switch (type)
            {
                case 0:
                    aType = ActiveType.Move;
                    break;

                case 1:
                    aType = ActiveType.Load;
                    break;

                case 2:
                    aType = ActiveType.Unload;
                    break;

                case 3:
                    aType = ActiveType.Loadunload;
                    break;

                //case 4:   //jason-- 180829
                //    aType = ActiveType.Teaching;
                //    break;

                case 4:     //jason++ 180829
                    aType = ActiveType.Home;
                    break;

                case 6:    //jason++ 180829 5-- 6++
                    aType = ActiveType.Round;
                    break;
            }
        }

        protected void LoadStatusConv(int status, ref VhLoadCSTStatus lStatus)
        {
            switch (status)
            {
                case 0:
                    lStatus = VhLoadCSTStatus.NotExist;
                    break;

                case 1:
                    lStatus = VhLoadCSTStatus.Exist;
                    break;
            }
        }

        protected void StopStatusConv(int status, ref VhStopSingle stopStatus)
        {
            switch (status)
            {
                case 0:
                    stopStatus = VhStopSingle.StopSingleOff;
                    break;

                case 1:
                    stopStatus = VhStopSingle.StopSingleOn;
                    break;
            }
        }

        protected void GuideStatusConv(int status, ref VhGuideStatus gStatus)
        {
            switch (status)
            {
                case 0:
                    gStatus = VhGuideStatus.Unlock;
                    break;

                case 1:
                    gStatus = VhGuideStatus.Lock;
                    break;
            }
        }

        protected void ModeStatusConv(int status, ref VHModeStatus mstatus)
        {
            switch (status)
            {
                //case 0:       //jason-- 180829
                //    mstatus = VHModeStatus.Auto;
                //    break;
                case 0:         //jason++ 180829
                    mstatus = VHModeStatus.AutoRemote;
                    break;

                case 1:
                    mstatus = VHModeStatus.InitialPowerOff;
                    break;

                case 2:
                    mstatus = VHModeStatus.InitialPowerOn;
                    break;

                case 3:
                    mstatus = VHModeStatus.Manual;
                    break;

                //case 4:       //jason-- 180829
                //    mstatus = VHModeStatus.None;
                //    break;
                case 4:         //jason++ 180829
                    mstatus = VHModeStatus.AutoLocal;   //Local? Remote?
                    break;
            }
        }

        protected void ActionStatusConv(int status, ref VHActionStatus actStatus)
        {
            switch (status)
            {
                case 0:     //jason++ 180829
                    actStatus = VHActionStatus.NoCommand;
                    break;

                case 1:
                    actStatus = VHActionStatus.Commanding;
                    break;

                //case 2:
                //    actStatus = VHActionStatus.;
                //    break;

                case 3:
                    actStatus = VHActionStatus.Teaching;
                    break;

                //case 4:   //jason-- 180829
                //    actStatus = VHActionStatus.Home;
                //    break;
                case 4:     //jason++ 180829
                    actStatus = VHActionStatus.GripperTeaching;
                    break;

                //case 5:       //jason-- 180829
                //    actStatus = VHActionStatus.Teaching;
                //    break;
                case 5:     //jason++ 180829
                    actStatus = VHActionStatus.CycleRun;
                    break;

                    //case 6:       //jason-- 180829
                    //    actStatus = VHActionStatus.GripperTeaching;
                    //    break;

                    //case 7:
                    //    actStatus = VHActionStatus.CycleRun;
                    //    break;
            }
        }
        #endregion

        #region Event Raiser

        public void OnEventBlockControlQuery(BlockControlQueryArg e)
        {
            if (eventBlockQuery != null)
            {
                eventBlockQuery(this, e);
            }
        }

        public void OnEventMsgToAGVM(ReportMsgEventArg e)
        {
            if (eventMsgToAGVM != null)
            {
                eventMsgToAGVM(this, e);
            }
        }
        #endregion
        #region FOR 300 TEST TEMP
        public void Sendbackto300AGVC(MotionInfo_Vehicle_Inter_Comm_ReportData reptData, string sCmd)
        {
            SendValuesForRept(reptData, sCmd);
        }
        #endregion
    }


    public class MessageEventArg : EventArgs
    {
        WrapperMessage wMessage = new WrapperMessage();
        WrapperMessage.MsgOneofCase _Case;
        Veh_AGVM_Global.SequenceEvents _seqEvents;

        public MessageEventArg()
        {
            _Case = wMessage.MsgCase;

        }

        public WrapperMessage.MsgOneofCase enCase
        { get { return _Case; } }
    }


    public class ReportMsgEventArg : EventArgs
    {
        public string Msg { get; set; }

        public ReportMsgEventArg(string msg)
        {
            Msg = msg;
        }

    }


    public class BlockControlQueryArg : EventArgs               // Roy*180319
    {

        public MotionInfo_BlockSectionPassReqst Query { get; set; }

        public BlockControlQueryArg(MotionInfo_BlockSectionPassReqst query)
        {
            Query = query;
        }

        public MotionInfo_BlockSectionPassReply Reply { get; set; }

        public BlockControlQueryArg(MotionInfo_BlockSectionPassReply reply)
        {
            Reply = reply;
        }

    }
    public class CheckError
    {
        public int CkeckErrorCode(int error_code)
        {
            int return_num = 0;
            if (error_code != 0)
            {
                return_num = error_code;
                /*
                 * Here can write the Nlog File.
                 */
            }
            return return_num;
        }
    }
}