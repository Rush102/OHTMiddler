using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Veh_HandShakeData;
using com.mirle.iibg3k0.ttc.Common;
using com.mirle.iibg3k0.ttc.Common.TCPIP;
using AGVM_Vehicle_Communication;
using TcpIpClientSample;
using MirleOHT.類別.DCPS;
using AGVM_Vehicle_Communication.NLog_USE;
using AGVM_Vehicle_Communication.StatusMachine;
using System.Xml.Linq;

namespace AGVM_Vehicle_Communication.StatusMachine
{


    public class Veh_AGVM_Comm_Data
    {
        MotionInfo_Vehicle_Inter_Comm_ReportData[] motionInfoInterCommReport = null;
        DDS.SampleInfo[] sampleInfo_RptData = null;

        //public event EventHandler eventCmd31_CycleRun;
        public event EventHandler<ReportMsgEventArg> eventMsgFromAGVM;
        Stopwatch sw = new Stopwatch();
        long time = 0, timeOut = 10000;
        bool blTimeOut = false;

        public TcpIpAgent clientAgent { get; private set; }
        int[] needCheckSeqNoIfPacketID = new int[]
        {
            WrapperMessage.TransReqFieldNumber,
        };

        object sendRecv_LockObj = new object();
        public com.mirle.iibg3k0.ttc.Common.TrxTcpIp.ReturnCode snedRecv<TSource>(WrapperMessage wrapper, out TSource stRecv, out string rtnMsg)
        {
            lock (sendRecv_LockObj)
            {
                return clientAgent.TrxTcpIp.sendRecv_Google(wrapper, out stRecv, out rtnMsg);
            }
        }

        //public readonly bool TcpIpTimeOut { get { return blTimeOut; } }                           // Roy-171128
        public bool TcpIpTimeOut { get { return blTimeOut; } }                           // Roy+171128

        public Veh_AGVM_Comm_Data()
        {
            if (!Veh_AGVM_Global.OffLineTest)
            {
                CreatTcpIpClientAgent();                                                 //Create the tcp/ip client agent.
                registeredEvent();                                                       //Add the connect/disconnect situation and message.
                clientAgent.injectDecoder
                    (new com.mirle.iibg3k0.ttc.Common.TCPIP.DecodRawData.DecodeRawData_Google(unPackWrapperMsg));                    //用來注入解開封包的Function
                //clientAgent.setNeedToBeConfirmReceivePacketID(needCheckSeqNoIfPacketID); //設定哪些的"ID"，是需要檢查Seq No
                Task.Run(() => clientAgent.clientConnection());
            }
            blTimeOut = false;
        }

        public Veh_AGVM_Comm_Data(long time)
        {
            this.timeOut = time;
            this.blTimeOut = false;
        }

        public void str31_Receive(object sender, TcpIpEventArgs e)
        {
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM_Comm_Data : str31_Receive : ThreadID = {0}", Thread.CurrentThread.ManagedThreadId);
            if (!clientAgent.IsConnection)
            {
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM_Comm_Data : ThreadID = {0} Client is not connect", Thread.CurrentThread.ManagedThreadId);
                return;
            }
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM_Comm_Data : ThreadID = {0} Client is OK", Thread.CurrentThread.ManagedThreadId);

            // In this region, these should be copy & paste on every receive;
            ID_31_TRANS_REQUEST recive_str = (ID_31_TRANS_REQUEST)e.objPacket;
            ID_131_TRANS_RESPONSE send_str = null;
            WrapperMessage wrapper = new WrapperMessage();
            Boolean resp_cmp;
            ///<summary> This part is checking whether this vehicle has already got a command
            ///Yes => reply 1 for can't get a new command 
            ///</summary>
            if (Veh_AGVM_Global_Property.already_have_command_Check == true && recive_str.ActType != ActiveType.Override)
            {
                send_str = new ID_131_TRANS_RESPONSE
                {
                    CmdID = recive_str.CmdID,
                    ActType = Veh_AGVM_Global.NowActiveType,
                    ReplyCode = 1,
                    NgReason = "Already have a command"
                };

                wrapper = new WrapperMessage
                {
                    ID = WrapperMessage.TransRespFieldNumber,
                    SeqNum = e.iSeqNum,
                    TransResp = send_str
                };

                resp_cmp = clientAgent.TrxTcpIp.SendGoogleMsg(wrapper, true);
                //vehicle.currentExcuteCMD_ID = cmd_id;
                //Console.WriteLine("Don't Need New Command");
                return;
            }
            else if (Veh_AGVM_Global.hasCst == VhLoadCSTStatus.Exist && (recive_str.ActType == ActiveType.Load || recive_str.ActType == ActiveType.Loadunload))
            {
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM_Comm_Data : str31_Receive :  LOAD??   XXX???!@#$%^&");
                send_str = new ID_131_TRANS_RESPONSE
                {
                    CmdID = recive_str.CmdID,
                    ActType = Veh_AGVM_Global.NowActiveType,
                    ReplyCode = 1,
                    NgReason = "Already have a CST. Don't give a load cmd now."
                };

                wrapper = new WrapperMessage
                {
                    ID = WrapperMessage.TransRespFieldNumber,
                    SeqNum = e.iSeqNum,
                    TransResp = send_str
                };

                resp_cmp = clientAgent.TrxTcpIp.SendGoogleMsg(wrapper, true);
                //vehicle.currentExcuteCMD_ID = cmd_id;
                //Console.WriteLine("Don't Need New Command");
                return;
            }
            else if (Veh_AGVM_Global.hasCst == VhLoadCSTStatus.NotExist && recive_str.ActType == ActiveType.Unload)
            {
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM_Comm_Data : str31_Receive :  UNLOAD?? XXX???!@#$%^&");
                send_str = new ID_131_TRANS_RESPONSE
                {
                    CmdID = recive_str.CmdID,
                    ActType = Veh_AGVM_Global.NowActiveType,
                    ReplyCode = 1,
                    NgReason = "Don't have a CST. Don't give a unload cmd now."
                };

                wrapper = new WrapperMessage
                {
                    ID = WrapperMessage.TransRespFieldNumber,
                    SeqNum = e.iSeqNum,
                    TransResp = send_str
                };

                resp_cmp = clientAgent.TrxTcpIp.SendGoogleMsg(wrapper, true);
                //vehicle.currentExcuteCMD_ID = cmd_id;
                //Console.WriteLine("Don't Need New Command");
                return;
            }
            Veh_AGVM_Global_Property.already_have_command_Check = true;
            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd31;
            Veh_AGVM_Global.command_ID_from_AGVM = recive_str.CmdID;
            //
            string cmd_id = recive_str.CmdID;
            Veh_AGVM_Global.cmdID = cmd_id;
            ActiveType actionType = recive_str.ActType;

            string fromAdr = recive_str.LoadAdr;
            string toAdr = recive_str.DestinationAdr;
            string CST_ID = recive_str.CSTID;
            string[] passStartToLoadSections = recive_str.GuideSectionsStartToLoad.ToArray();
            string[] passToDestinationSections = recive_str.GuideSectionsToDestination.ToArray();
            string[] passStartToLoadAddress = recive_str.GuideAddressesStartToLoad.ToArray();
            string[] passToDestinationAddress = recive_str.GuideAddressesToDestination.ToArray();
            //string[] cycRunSecs = recive_str.CycleSections.ToArray();
            //string[] passSegment = recive_str.GuideSegments.ToArray();

            string reason = string.Empty;
            bool canReceiveCmd = true;

            Veh_AGVM_Global.GuideSectionsStartToLoad = passStartToLoadSections;
            Veh_AGVM_Global.GuideAddressesStartToLoad = passStartToLoadAddress;
            Veh_AGVM_Global.GuideSectionsToDestination = passToDestinationSections;
            Veh_AGVM_Global.GuideAddressesToDestination = passToDestinationAddress;

            //Veh_AGVM_Global.CycleSections = cycRunSecs;
            Veh_AGVM_Global.NowActiveType = actionType;
            Veh_AGVM_Global.CSTID_Load = CST_ID;
            Veh_AGVM_Global.CSTID_UnLoad = CST_ID;
            Veh_AGVM_Global.cmdRunning = true;

            // Initialize the Packet Content
            //DDS_Global.motionInfoInterCommSendData.Move.Sections = passSections;
            //DDS_Global.motionInfoInterCommSendData.Load.CSTID = int.Parse(CST_ID);
            string msg = string.Empty;
            Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enTransferRequest;

            #region "解碼/翻譯給OHT"
            switch (actionType)
            {
                case ActiveType.Movetocharger:
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = false;
                    //SpinWait.SpinUntil(() => false, 20);
                    Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Movetocharger;
                    //DDS_Global.motionInfoInterCommSendData.Move.Address = toAdr;              // Roy-180319
                    DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = MoveType.single;              // Roy*180328

                    DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToMove;              // Roy*180328

                    Veh_AGVM_Global.Address = toAdr;               // Roy+180319
                    Veh_AGVM_Global.GuideSectionsStartToLoad = passStartToLoadSections;
                    Veh_AGVM_Global.GuideSectionsToDestination = passToDestinationSections;
                    Veh_AGVM_Global.GuideAddressesStartToLoad = passStartToLoadAddress;
                    Veh_AGVM_Global.GuideAddressesToDestination = passToDestinationAddress;               // Roy+180319

                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = true;

                    GetMsgString(fromAdr, toAdr, CST_ID, ref msg);
                    OnEventMsgFromAGVM(new ReportMsgEventArg(msg));
                    break;
                case ActiveType.Move:
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = false;
                    //SpinWait.SpinUntil(() => false, 20);
                    Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Move;
                    //DDS_Global.motionInfoInterCommSendData.Move.Address = toAdr;              // Roy-180319
                    DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = MoveType.single;              // Roy*180328

                    DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToMove;              // Roy*180328

                    Veh_AGVM_Global.Address = toAdr;               // Roy+180319
                    Veh_AGVM_Global.GuideSectionsStartToLoad = passStartToLoadSections;
                    Veh_AGVM_Global.GuideSectionsToDestination = passToDestinationSections;
                    Veh_AGVM_Global.GuideAddressesStartToLoad = passStartToLoadAddress;
                    Veh_AGVM_Global.GuideAddressesToDestination = passToDestinationAddress;               // Roy+180319

                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = true;

                    GetMsgString(fromAdr, toAdr, CST_ID, ref msg);
                    OnEventMsgFromAGVM(new ReportMsgEventArg(msg));
                    break;


                case ActiveType.Loadunload:
                    //Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Load_Unload;
                    //DDS_Global.motionInfoInterCommSendData.Move.Type = (int)MoveType.single;
                    //DDS_Global.motionInfoInterCommSendData.CmdType.cmdType = CmdType.Load;
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = false;
                    //SpinWait.SpinUntil(() => false, 50);
                    Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Load_Unload;

                    //DDS_Global.motionInfoInterCommSendData.Move.Address = fromAdr;              // Roy-180319

                    DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = MoveType.single;              // Roy*180328

                    DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToMove;              // Roy*180328

                    Veh_AGVM_Global.LoadAddress = fromAdr;              // Roy+180319
                    Veh_AGVM_Global.UnloadAddress = toAdr;              // Roy+180319
                    Veh_AGVM_Global.GuideSectionsStartToLoad = passStartToLoadSections;
                    Veh_AGVM_Global.GuideSectionsToDestination = passToDestinationSections;
                    Veh_AGVM_Global.GuideAddressesStartToLoad = passStartToLoadAddress;
                    Veh_AGVM_Global.GuideAddressesToDestination = passToDestinationAddress;
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = true;

                    GetMsgString(fromAdr, toAdr, CST_ID, ref msg);
                    OnEventMsgFromAGVM(new ReportMsgEventArg(msg));
                    //SpinWait.SpinUntil(() => false, 50);
                    //
                    break;

                case ActiveType.Load:
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = false;
                    Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Load;
                    //DDS_Global.motionInfoInterCommSendData.Move.Address = fromAdr;              // Roy-180319
                    DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = MoveType.single;              // Roy*180328

                    DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToLoad;

                    //Veh_AGVM_Global.fromAddress_LoadPort = fromAdr;              // Roy-180319
                    //Veh_AGVM_Global.toAddress_UnloadPort = toAdr;              // Roy-180319
                    Veh_AGVM_Global.LoadAddress = fromAdr;              // Roy+180319

                    Veh_AGVM_Global.GuideSectionsStartToLoad = passStartToLoadSections;
                    Veh_AGVM_Global.GuideSectionsToDestination = passToDestinationSections;
                    Veh_AGVM_Global.GuideAddressesStartToLoad = passStartToLoadAddress;
                    Veh_AGVM_Global.GuideAddressesToDestination = passToDestinationAddress;

                    DDS_Global.motionInfoInterCommSendData.udtLoad.Veh_CSTID = CST_ID;                 // Roy*180319
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = true;

                    //// 
                    break;

                case ActiveType.Unload:
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = false;
                    Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.UnLoad;
                    //DDS_Global.motionInfoInterCommSendData.Move.Address = toAdr;              // Roy-180319
                    DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = MoveType.single;              // Roy*180328

                    DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToUnload;

                    Veh_AGVM_Global.UnloadAddress = toAdr;              // Roy+180319

                    Veh_AGVM_Global.GuideSectionsStartToLoad = passStartToLoadSections;
                    Veh_AGVM_Global.GuideSectionsToDestination = passToDestinationSections;
                    Veh_AGVM_Global.GuideAddressesStartToLoad = passStartToLoadAddress;
                    Veh_AGVM_Global.GuideAddressesToDestination = passToDestinationAddress;

                    DDS_Global.motionInfoInterCommSendData.udtUnLoad.Veh_CSTID = CST_ID;                 // Roy*180319
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = true;

                    //// 
                    break;

                case ActiveType.Round:
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = false;

                    //Veh_AGVM_Global.VehActiveType = ActiveType.Round;                 // Roy-180302 ... 前方已(共用)設定過

                    Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Cycle;
                    //DDS_Global.motionInfoInterCommSendData.Move.Address = toAdr;              // Roy-180319
                    DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = MoveType.cycle;

                    DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToMove;

                    Veh_AGVM_Global.Address = toAdr;               // Roy+180319

                    Veh_AGVM_Global.GuideSectionsStartToLoad = passStartToLoadSections;
                    Veh_AGVM_Global.GuideSectionsToDestination = passToDestinationSections;
                    Veh_AGVM_Global.GuideAddressesStartToLoad = passStartToLoadAddress;
                    Veh_AGVM_Global.GuideAddressesToDestination = passToDestinationAddress;

                    //DDS_Global.motionInfoInterCommSendData.Move.Sections = Veh_AGVM_Global.GuideSections;              // Roy-180319
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = true;

                    GetMsgString(fromAdr, toAdr, CST_ID, ref msg);
                    OnEventMsgFromAGVM(new ReportMsgEventArg(msg));
                    break;
                case ActiveType.Override:
                    //Veh_AGVM.Veh_Abort_Procedure();       //This should done in the actiontype.
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = false;
                    Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Override;
                    DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = MoveType.single;              // Roy*180328

                    switch (Veh_AGVM_Global_Property.lastMoveType_4_Override_Check)
                    {
                        case Veh_AGVM_Global.ActionType.Move:
                            //Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Move;
                            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToMove;
                            break;
                        case Veh_AGVM_Global.ActionType.Load:
                            //Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Load;
                            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToLoad;
                            break;
                        case Veh_AGVM_Global.ActionType.UnLoad:
                            //Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.UnLoad;
                            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToUnload;
                            break;
                        case Veh_AGVM_Global.ActionType.Load_Unload:
                            if (Veh_AGVM_Global.hasCst == VhLoadCSTStatus.Exist)
                            {
                                //Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.UnLoad;
                                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToUnload;
                            }
                            else
                            {
                                //Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Load_Unload;
                                DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToMove;
                            }
                            break;
                    }
                    Veh_AGVM_Global.UnloadAddress = toAdr;              // Roy+180319

                    Veh_AGVM_Global.GuideSectionsStartToLoad = passStartToLoadSections;
                    Veh_AGVM_Global.GuideSectionsToDestination = passToDestinationSections;
                    Veh_AGVM_Global.GuideAddressesStartToLoad = passStartToLoadAddress;
                    Veh_AGVM_Global.GuideAddressesToDestination = passToDestinationAddress;

                    DDS_Global.motionInfoInterCommSendData.udtUnLoad.Veh_CSTID = CST_ID;                 // Roy*180319
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = true;
                    break;
            }
            //Preparing the packet content 131 for sending to OHC

            send_str = new ID_131_TRANS_RESPONSE
            {
                CmdID = cmd_id,
                ActType = Veh_AGVM_Global.NowActiveType,
                ReplyCode = canReceiveCmd ? 0 : 1,
                NgReason = reason
            };
            wrapper = new WrapperMessage
            {
                ID = WrapperMessage.TransRespFieldNumber,
                SeqNum = e.iSeqNum,
                TransResp = send_str
            };

            resp_cmp = clientAgent.TrxTcpIp.SendGoogleMsg(wrapper, true);
            //vehicle.currentExcuteCMD_ID = cmd_id;


            Console.WriteLine("Received");
            #endregion         // "解碼/翻譯給OHT"

        }
        public void str32_Receive(object sender, TcpIpEventArgs e) //**
        {
            //This part didn't need, due to the first send is ;
        }

        public void str33_Receive(object sender, TcpIpEventArgs e)
        {
            if (!clientAgent.IsConnection)
            {
                return;
            }
            // In this region, these should be copy & paste on every receive;
            ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST recive_str = (ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST)e.objPacket;
            ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE send_str = null;

            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd33;
            //
            ControlType controlType = recive_str.ControlType;
            string cancelSecID = recive_str.CancelSecID;
            bool canReceiveCmd = true;

            send_str = new ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE
            {
                ControlType = controlType,
                CancelSecID = cancelSecID
                //ReplyCode = canReceiveCmd ? 0 : 1
                //Shouldn't here have a reply code? jason++ 181009
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.ControlZoneRespFieldNumber,
                SeqNum = e.iSeqNum,
                ControlZoneResp = send_str
            };

            Boolean resp_cmp = clientAgent.TrxTcpIp.SendGoogleMsg(wrapper, true);
            //vehicle.currentExcuteCMD_ID = cmd_id;

            Console.WriteLine("Received");

            /*
             * here need to add something
             */

            // Initialize the Packet Content
            //DDS_Global.motionInfoInterCommSendData.Move.Sections = passSections;
            //DDS_Global.motionInfoInterCommSendData.Load.CSTID = int.Parse(CST_ID);
            string msg = string.Empty;
            Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enTransferRequest;

        }
        public void str35_Receive(object sender, TcpIpEventArgs e)
        {
            ID_35_CST_ID_RENAME_REQUEST recive_str = (ID_35_CST_ID_RENAME_REQUEST)e.objPacket;
            ID_135_CST_ID_RENAME_RESPONSE send_str = null;

            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd35;

            send_str = new ID_135_CST_ID_RENAME_RESPONSE
            {
                ReplyCode = 0
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                //ID = WrapperMessage.TransRespFieldNumber,                  // Roy-180302
                ID = WrapperMessage.CSTIDRenameRespFieldNumber,                  // Roy+180302
                SeqNum = e.iSeqNum,
                CSTIDRenameResp = send_str,
            };

        }
        public void str36_Receive(object sender, TcpIpEventArgs e)
        {
            if (!clientAgent.IsConnection)
            {
                return;
            }
            ID_36_TRANS_EVENT_RESPONSE recive_str = (ID_36_TRANS_EVENT_RESPONSE)e.objPacket;
            Veh_AGVM_Global.check_recieve_36 = true;
            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd36;
            //
            Veh_AGVM_Global.vehBlockPassReply = (int)recive_str.IsBlockPass;
            Veh_AGVM_Global.vehReserveReply = (int)recive_str.IsReserveSuccess;
            //Veh_AGVM_Global.vehHIDPassReply = (int)recive_str.IsHIDPass;
            //if(Veh_AGVM_Global.vehBlockPassReply == 0)
            //{
            //}
            if (Veh_AGVM_Global.vehBlockPassReply == (int)Status.NG)
            {
                Veh_AGVM_Global_Property.pause_Type_Check = PauseType.Block;
            }
            else if (Veh_AGVM_Global.vehHIDPassReply == (int)Status.NG)
            {
                //Veh_AGVM_Global_Property.pause_Type_Check = PauseType.Hid;
            }
        }
        public void str37_Receive(object sender, TcpIpEventArgs e)
        {
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM_Comm_Data : str37_Receive : ThreadID = {0}", Thread.CurrentThread.ManagedThreadId);

            if (!clientAgent.IsConnection)
            {
                return;
            }

            ID_37_TRANS_CANCEL_REQUEST recive_str = (ID_37_TRANS_CANCEL_REQUEST)e.objPacket;
            ID_137_TRANS_CANCEL_RESPONSE send_str = null;

            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd37;
            //
            string cmd_id = recive_str.CmdID;
            CMDCancelType act_Type = recive_str.ActType;
            Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.Abort;

            //Preparing the packet content 131 for sending to OHC
            send_str = new ID_137_TRANS_CANCEL_RESPONSE
            {
                CmdID = cmd_id,
                ActType = act_Type,
                ReplyCode = 0
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.TransCancelRespFieldNumber,
                SeqNum = e.iSeqNum,
                TransCancelResp = send_str
            };

            Boolean resp_cmp = clientAgent.TrxTcpIp.SendGoogleMsg(wrapper, true);
            //vehicle.currentExcuteCMD_ID = cmd_id;
            Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = false;
            Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enTransferRequest;
            Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = true;
            Console.WriteLine("Received");
            DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = MoveType.single;
            DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToCancel;

            // Initialize the Packet Content
            //DDS_Global.motionInfoInterCommSendData.Move.Sections = passSections;
            //DDS_Global.motionInfoInterCommSendData.Load.CSTID = int.Parse(CST_ID);
            string msg = string.Empty;

        }
        public void str39_Receive(object sender, TcpIpEventArgs e)
        {
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM_Comm_Data : str39_Receive : ThreadID = {0}", Thread.CurrentThread.ManagedThreadId);

            ID_39_PAUSE_REQUEST recive_str = (ID_39_PAUSE_REQUEST)e.objPacket;
            ID_139_PAUSE_RESPONSE send_str = null;

            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd39;

            //PauseEvent eType = PauseEvent.Pause;                  // Roy-180302 ... 不可用(死)定值
            PauseEvent eType = recive_str.EventType;                // Roy+180302 ... 撈AGVM命令內容
            PauseType pType = recive_str.PauseType;
            Veh_AGVM_Global.now_Pause = recive_str.EventType;
            send_str = new ID_139_PAUSE_RESPONSE
            {
                EventType = eType,
                ReplyCode = 0
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                //ID = WrapperMessage.TransRespFieldNumber,                  // Roy-180302
                ID = WrapperMessage.PauseRespFieldNumber,                  // Roy+180302
                SeqNum = e.iSeqNum,
                PauseResp = send_str                  // Roy+180302
            };

            Boolean resp_cmp = clientAgent.TrxTcpIp.SendGoogleMsg(wrapper, true);

            Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = false;
            Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enTransferRequest;
            Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = true;
            switch (eType)
            {
                case PauseEvent.Continue:
                    DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = MoveType.single;

                    DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToContinue;
                    Veh_AGVM_Global_Property.same_pause_Command_Check = false;
                    if (Veh_AGVM_Global_Property.pause_Type_Check == pType)
                    {
                        Veh_AGVM_Global_Property.same_pause_Command_Check = true;
                        if (pType == PauseType.Block)
                        {
                            DDS_Global.checkblock = true;
                        }
                        else DDS_Global.checkblock = false;
                    }

                    break;
                case PauseEvent.Pause:
                    DDS_Global.motionInfoInterCommSendData.udtMove.eMoveType = MoveType.single;
                    Veh_AGVM_Global_Property.pause_Type_Check = recive_str.PauseType;
                    DDS_Global.motionInfoInterCommSendData.udtCmdType.eCmdType = CmdType.CmdToPause;
                    break;

            }
        }
        public void str41_Recieve(object sender, TcpIpEventArgs e)
        {
            ID_41_MODE_CHANGE_REQ recive_str = (ID_41_MODE_CHANGE_REQ)e.objPacket;
            ID_141_MODE_CHANGE_RESPONSE send_str = null;

            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd41;
            //Veh_AGVM_Global.vehModeStatus = recive_str.OperatingVHMode;
            OperatingVHMode operatingVHMode = recive_str.OperatingVHMode;
            if (operatingVHMode == (OperatingVHMode)0)
            {
                Veh_AGVM_Global.vehModeStatus = 0;
            }
            else if (operatingVHMode == (OperatingVHMode)1)
            {
                Veh_AGVM_Global.vehModeStatus = 3;
            }
            send_str = new ID_141_MODE_CHANGE_RESPONSE
            {
                ReplyCode = 0
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.ModeChangeRespFieldNumber,
                SeqNum = e.iSeqNum,
                ModeChangeResp = send_str
            };
            Boolean resp_cmp = clientAgent.TrxTcpIp.SendGoogleMsg(wrapper, true);
            Console.WriteLine("Received");

        }
        public void str43_Receive(object sender, TcpIpEventArgs e)
        {
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM_Comm_Data : str43_Receive : ThreadID = {0}", Thread.CurrentThread.ManagedThreadId);

            bool ForRejectCmd = false;
            bool send_check = false;
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@TCPIP:" + " " + "43 recieve");
            ID_43_STATUS_REQUEST recive_str = (ID_43_STATUS_REQUEST)e.objPacket;
            //ID_143_STATUS_RESPONSE send_str = null;
            DDS_Global.motionInfo_VehInterCommReptDataReader.Take(
                               ref motionInfoInterCommReport,
                               ref sampleInfo_RptData,
                                DDS.SampleStateKind.Any, DDS.ViewStateKind.Any, DDS.InstanceStateKind.Any);
            foreach (MotionInfo_Vehicle_Inter_Comm_ReportData data in motionInfoInterCommReport)
            {
                if (data.Section != null)
                {
                    if (data.Section.Count() != 0)
                    {
                        ForRejectCmd = true;
                        break;
                    }
                }
            }
            if (motionInfoInterCommReport != null && ForRejectCmd == true)
            {
                string address;
                string section;
                VhLoadCSTStatus hasCst = VhLoadCSTStatus.NotExist;
                VHModeStatus modeStatus;
                VHActionStatus actionStatus;
                VhPowerStatus powerStatus;
                VhStopSingle obstacleStatus;
                VhStopSingle blockingStatus;
                VhStopSingle hIDStatus;
                VhStopSingle pauseStatus;
                VhStopSingle errorStatus;
                UInt32 sec_Distance;
                Int32 obst_Distance;
                string obst_VehicleID;
                string stopped_Block_ID;
                //string stopped_HID_ID;

                foreach (MotionInfo_Vehicle_Inter_Comm_ReportData data in motionInfoInterCommReport)
                {
                    send_check = true;
                    eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@TCPIP: Real 143 send info from AGV");
                    if (data.loadStatus.With_CST == 1)
                    {
                        hasCst = VhLoadCSTStatus.Exist;
                    }
                    address = data.Address;
                    section = data.Section;
                    //section = new ToolFunc().DelLastAndFirstCharString(section); //jason++ 190331 del the  "+ -" and the little section.
                    modeStatus = (VHModeStatus)data.vehModeStatus;
                    actionStatus = (VHActionStatus)data.vehActionStatus;
                    powerStatus = (VhPowerStatus)data.vehPowerStatus;
                    obstacleStatus = (VhStopSingle)data.vehObstacleStopStatus;
                    blockingStatus = (VhStopSingle)data.vehBlockStopStatus;
                    hIDStatus = (VhStopSingle)data.vehHIDStopStatus;
                    pauseStatus = (VhStopSingle)data.vehPauseStatus;
                    errorStatus = 0; // temp jason++ 181017
                    sec_Distance = (UInt32)data.DistanceFromSectionStart;
                    obst_Distance = data.vehObstDist;
                    /*****/
                    Veh_AGVM_Global.Address = address;
                    Veh_AGVM_Global.Section = section;

                    Veh_AGVM_Global.vehModeStatus = (int)modeStatus;
                    Veh_AGVM_Global.vehActionStatus = (int)actionStatus;

                    Veh_AGVM_Global.vehObstStopStatus = (int)obstacleStatus;
                    Veh_AGVM_Global.vehBlockStopStatus = (int)blockingStatus;
                    Veh_AGVM_Global.vehHIDStopStatus = (int)hIDStatus;
                    Veh_AGVM_Global.vehPauseStatus = (int)pauseStatus;
                    errorStatus = 0; // temp jason++ 181017
                    Veh_AGVM_Global.DistanceFromSectionStart = sec_Distance;
                    Veh_AGVM_Global.vehObstDist = obst_Distance;
                    Veh_AGVM_Global.BatteryCapacity = data.BatteryCapacity;
                    Veh_AGVM_Global.veh_ChargeStatus = data.ChargeStatus;
                    /*****/
                    obst_VehicleID = "";   //???? temp jason++ 181017
                    stopped_Block_ID = ""; //???? temp jason++ 181017
                    //stopped_HID_ID = "";   //???? temp jason++ 181017
                    modeStatus = (VHModeStatus)4;
                    actionStatus = (VHActionStatus)0;
                    powerStatus = (VhPowerStatus)1;
                    ID_143_STATUS_RESPONSE strSends;
                    if (Veh_AGVM_Global.cmdRunning == true)
                    {
                        actionStatus = (VHActionStatus)1;
                    }
                    if (Veh_AGVM_Global.cmdID == null)
                    {
                        Veh_AGVM_Global.cmdID = "";
                    }
                    if (Veh_AGVM_Global.CSTID_Load == null)
                    {
                        Veh_AGVM_Global.CSTID_Load = "";
                    }
                    strSends = new ID_143_STATUS_RESPONSE
                    {
                        CurrentAdrID = address,
                        CurrentSecID = section,
                        ModeStatus = modeStatus,
                        ActionStatus = actionStatus,
                        HasCST = hasCst,
                        PowerStatus = powerStatus,
                        ObstacleStatus = obstacleStatus,
                        ReserveStatus = 0,
                        BlockingStatus = blockingStatus,
                        //HIDStatus = hIDStatus,
                        PauseStatus = pauseStatus,
                        ErrorStatus = errorStatus,
                        SecDistance = (uint)sec_Distance,
                        ObstDistance = obst_Distance,
                        ObstVehicleID = obst_VehicleID,
                        //ReserveInfos
                        StoppedBlockID = stopped_Block_ID,
                        //StoppedHIDID = stopped_HID_ID,
                        CmdID = Veh_AGVM_Global.cmdID,
                        CSTID = Veh_AGVM_Global.CSTID_Load,
                        DrivingDirection = 0,
                        BatteryCapacity = (uint)Veh_AGVM_Global.BatteryCapacity,
                        ChargeStatus = (VhChargeStatus)Veh_AGVM_Global.veh_ChargeStatus,
                        BatteryTemperature = 40
                    };
                    WrapperMessage wrappers = new WrapperMessage
                    {
                        ID = WrapperMessage.StatusReqRespFieldNumber,
                        SeqNum = e.iSeqNum,
                        StatusReqResp = strSends
                    };
                    sw.Start();
                    Boolean resp_cmps = clientAgent.TrxTcpIp.SendGoogleMsg(wrappers, true);

                    sw.Stop();
                    Veh_AGVM_Global.checkForNoMoveSend144 = true;
                }

            }
            else
            {
                string address;
                string section;
                VhLoadCSTStatus hasCst = VhLoadCSTStatus.NotExist;
                VHModeStatus modeStatus;
                VHActionStatus actionStatus;
                VhPowerStatus powerStatus;
                VhStopSingle obstacleStatus;
                VhStopSingle blockingStatus;
                VhStopSingle hIDStatus;
                VhStopSingle pauseStatus;
                VhStopSingle errorStatus;
                UInt32 sec_Distance;
                Int32 obst_Distance;
                string obst_VehicleID;
                string stopped_Block_ID;
                //string stopped_HID_ID;


                send_check = true;
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@TCPIP: Real 143 send info from AGV");
                if ((int)(Veh_AGVM_Global.hasCst) == 1)
                {
                    hasCst = VhLoadCSTStatus.Exist;
                }
                address = Veh_AGVM_Global.Address;
                section = Veh_AGVM_Global.Section;
                //section = new ToolFunc().DelLastAndFirstCharString(section); //jason++ 190331 del the  "+ -" and the little section.
                modeStatus = (VHModeStatus)Veh_AGVM_Global.vehModeStatus;
                actionStatus = (VHActionStatus)Veh_AGVM_Global.vehActionStatus;

                obstacleStatus = (VhStopSingle)Veh_AGVM_Global.vehObstStopStatus;
                blockingStatus = (VhStopSingle)Veh_AGVM_Global.vehBlockStopStatus;
                hIDStatus = (VhStopSingle)Veh_AGVM_Global.vehHIDStopStatus;
                pauseStatus = (VhStopSingle)Veh_AGVM_Global.vehPauseStatus;
                errorStatus = 0; // temp jason++ 181017
                sec_Distance = (UInt32)Veh_AGVM_Global.DistanceFromSectionStart;
                obst_Distance = Veh_AGVM_Global.vehObstDist;
                obst_VehicleID = "";   //???? temp jason++ 181017
                stopped_Block_ID = ""; //???? temp jason++ 181017
                                       //stopped_HID_ID = "";   //???? temp jason++ 181017
                modeStatus = (VHModeStatus)4;
                actionStatus = (VHActionStatus)0;
                powerStatus = (VhPowerStatus)1;
                ID_143_STATUS_RESPONSE strSends;
                if (Veh_AGVM_Global.cmdRunning == true)
                {
                    actionStatus = (VHActionStatus)1;
                }
                if (Veh_AGVM_Global.cmdID == null)
                {
                    Veh_AGVM_Global.cmdID = "";
                }
                if (Veh_AGVM_Global.CSTID_Load == null)
                {
                    Veh_AGVM_Global.CSTID_Load = "";
                }
                strSends = new ID_143_STATUS_RESPONSE
                {
                    CurrentAdrID = address,
                    CurrentSecID = section,
                    ModeStatus = modeStatus,
                    ActionStatus = actionStatus,
                    HasCST = hasCst,
                    PowerStatus = powerStatus,
                    ObstacleStatus = obstacleStatus,
                    ReserveStatus = 0,
                    BlockingStatus = blockingStatus,
                    //HIDStatus = hIDStatus,
                    PauseStatus = pauseStatus,
                    ErrorStatus = errorStatus,
                    SecDistance = (uint)sec_Distance,
                    ObstDistance = obst_Distance,
                    ObstVehicleID = obst_VehicleID,
                    //ReserveInfos
                    StoppedBlockID = stopped_Block_ID,
                    //StoppedHIDID = stopped_HID_ID,
                    CmdID = Veh_AGVM_Global.cmdID,
                    CSTID = Veh_AGVM_Global.CSTID_Load,
                    DrivingDirection = 0,
                    BatteryCapacity = 50,
                    ChargeStatus = 0,
                    BatteryTemperature = 40
                };
                WrapperMessage wrappers = new WrapperMessage
                {
                    ID = WrapperMessage.StatusReqRespFieldNumber,
                    SeqNum = e.iSeqNum,
                    StatusReqResp = strSends
                };
                sw.Start();
                Boolean resp_cmps = clientAgent.TrxTcpIp.SendGoogleMsg(wrappers, true);

                sw.Stop();
                Veh_AGVM_Global.checkForNoMoveSend144 = true;
            }
            if (send_check == false)
            {
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Error, null, "@TCPIP: Fake 143 send no info from AGV");
                ID_143_STATUS_RESPONSE strSends;

                strSends = new ID_143_STATUS_RESPONSE
                {
                    CurrentAdrID = "0",
                    CurrentSecID = "0",
                    ModeStatus = 0,
                    ActionStatus = 0,
                    HasCST = 0,
                    PowerStatus = 0,
                    ObstacleStatus = 0,
                    ReserveStatus = 0,
                    BlockingStatus = 0,
                    //HIDStatus = hIDStatus,
                    PauseStatus = 0,
                    ErrorStatus = 0,
                    SecDistance = 0,
                    ObstDistance = 0,
                    ObstVehicleID = "0",
                    //ReserveInfos
                    StoppedBlockID = "0",
                    //StoppedHIDID = stopped_HID_ID,
                    CmdID = "",
                    CSTID = "",
                    DrivingDirection = 0,
                    BatteryCapacity = 0,
                    ChargeStatus = 0,
                    BatteryTemperature = 0
                };
                WrapperMessage wrappers = new WrapperMessage
                {
                    ID = WrapperMessage.StatusReqRespFieldNumber,
                    SeqNum = e.iSeqNum,
                    StatusReqResp = strSends
                };
                sw.Start();
                Boolean resp_cmps = clientAgent.TrxTcpIp.SendGoogleMsg(wrappers, true);

                sw.Stop();
                Veh_AGVM_Global.checkForNoMoveSend144 = true;
            }
            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd43;

            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@TCPIP:" + " " + "143 send");
        }
        public void str44_Receive(object sender, TcpIpEventArgs e)
        {
            // Here get the 144 first 
            ID_44_STATUS_CHANGE_RESPONSE recive_str = (ID_44_STATUS_CHANGE_RESPONSE)e.objPacket;
            ID_144_STATUS_CHANGE_REP send_str = null;

            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd44;
        }
        public void str45_Receive(object sender, TcpIpEventArgs e)
        {
            ID_45_POWER_OPE_REQ recive_str = (ID_45_POWER_OPE_REQ)e.objPacket;
            ID_145_POWER_OPE_RESPONSE send_str = null;

            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd45;

            OperatingPowerMode operatingPowerMode = recive_str.OperatingPowerMode;

            send_str = new ID_145_POWER_OPE_RESPONSE
            {
                ReplyCode = 0
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.PowerOpeRespFieldNumber,
                SeqNum = e.iSeqNum,
                PowerOpeResp = send_str
            };

            Boolean resp_cmp = clientAgent.TrxTcpIp.SendGoogleMsg(wrapper, true);
            //vehicle.currentExcuteCMD_ID = cmd_id;


            Console.WriteLine("Received");
        }
        public void str51_Receive(object sender, TcpIpEventArgs e)
        {
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM_Comm_Data : str51_Receive : ThreadID = {0}", Thread.CurrentThread.ManagedThreadId);

            ID_51_AVOID_REQUEST recive_str = (ID_51_AVOID_REQUEST)e.objPacket;
            ID_151_AVOID_RESPONSE send_str = null;

            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd51;

            send_str = new ID_151_AVOID_RESPONSE
            {
                ReplyCode = 0
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.AvoidRespFieldNumber,
                SeqNum = e.iSeqNum,
                AvoidResp = send_str
            };

            Boolean resp_cmp = clientAgent.TrxTcpIp.SendGoogleMsg(wrapper, true);
            //vehicle.currentExcuteCMD_ID = cmd_id;
            string[] passToDestinationAddress = recive_str.GuideAddresses.ToArray();
            string[] passToDestinationSections = recive_str.GuideSections.ToArray();
            Veh_AGVM_Global.GuideSectionsToDestination = passToDestinationSections;
            Veh_AGVM_Global.GuideAddressesToDestination = passToDestinationAddress;
            Veh_AGVM_Global.enActionType = Veh_AGVM_Global.ActionType.AvoidRequest;

            Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enTransferRequest;


            //Console.WriteLine("Received");
        }
        public void str52_Receive(object sender, TcpIpEventArgs e)
        {
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM_Comm_Data : str52_Receive : ThreadID = {0}", Thread.CurrentThread.ManagedThreadId);

            ID_52_AVOID_COMPLETE_RESPONSE recive_str = (ID_52_AVOID_COMPLETE_RESPONSE)e.objPacket;
            ID_152_AVOID_COMPLETE_REPORT send_str = null;

            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd52;

            send_str = new ID_152_AVOID_COMPLETE_REPORT
            {
                CmpStatus = 0
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.AvoidCompleteRepFieldNumber,
                SeqNum = e.iSeqNum,
                AvoidCompleteRep = send_str
            };

            //Boolean resp_cmp = clientAgent.TrxTcpIp.SendGoogleMsg(wrapper, true);
            //vehicle.currentExcuteCMD_ID = cmd_id;


            Console.WriteLine("Received");
        }
        public void str71_Receive(object sender, TcpIpEventArgs e)
        {
            ID_71_RANGE_TEACHING_REQUEST recive_str = (ID_71_RANGE_TEACHING_REQUEST)e.objPacket;
            ID_171_RANGE_TEACHING_RESPONSE send_str = new ID_171_RANGE_TEACHING_RESPONSE
            {
                ReplyCode = 0
            };
            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.RangeTeachingRespFieldNumber,
                SeqNum = e.iSeqNum,
                RangeTeachingResp = send_str
            };
            Boolean resp_cmp = clientAgent.TrxTcpIp.SendGoogleMsg(wrapper, true);
            string[] section = { ReadCsv.Map.GetSection(recive_str.FromAdr, recive_str.ToAdr) };
            Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enTransferRequest;
            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd71;
            Veh_AGVM_Global.FromAdr = recive_str.FromAdr;
            Veh_AGVM_Global.ToAdr = recive_str.ToAdr;
            Veh_AGVM_Global.Address = recive_str.ToAdr;
            Veh_AGVM_Global.GuideSections = section;
            Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = true;
        }
        public void str72_Receive(object sender, TcpIpEventArgs e)
        {
            ID_72_RANGE_TEACHING_COMPLETE_RESPONSE recive_str = (ID_72_RANGE_TEACHING_COMPLETE_RESPONSE)e.objPacket;
            ID_172_RANGE_TEACHING_COMPLETE_REPORT send_str = null;

            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd72;
            //172 first;
        }
        public void str74_Receive(object sender, TcpIpEventArgs e)
        {
            ID_74_ADDRESS_TEACH_RESPONSE recive_str = (ID_74_ADDRESS_TEACH_RESPONSE)e.objPacket;
            ID_174_ADDRESS_TEACH_REPORT send_str = null;

            Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd74;
            //174 first
        }
        public void str91_Receive(object sender, TcpIpEventArgs e)
        {
            ID_91_ALARM_RESET_REQUEST recive_str = (ID_91_ALARM_RESET_REQUEST)e.objPacket;
            ID_191_ALARM_RESET_RESPONSE send_str = null;

            send_str = new ID_191_ALARM_RESET_RESPONSE
            {
                ReplyCode = 0
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.AlarmResetRespFieldNumber,
                SeqNum = e.iSeqNum,
                AlarmResetResp = send_str
            };

            Boolean resp_cmp = clientAgent.TrxTcpIp.SendGoogleMsg(wrapper, true);
            //vehicle.currentExcuteCMD_ID = cmd_id;


            Console.WriteLine("Received");
        }
        public void str94_Receive(object sender, TcpIpEventArgs e)
        {
            ID_94_ALARM_RESPONSE recive_str = (ID_94_ALARM_RESPONSE)e.objPacket;
            ID_194_ALARM_REPORT send_str = null;
            //194 first
        }

        public bool sned_Str132(string cmdID, ActiveType actType,
            string cstID, int cmpCode, CompleteStatus cmpStatus, int cmddistance)
        {
            string rtnMsg = string.Empty;
            Veh_AGVM_Global_Property.already_have_command_Check = false;
            ID_132_TRANS_COMPLETE_REPORT stSend;
            ID_32_TRANS_COMPLETE_RESPONSE stRecv;
            Veh_AGVM_Global.cmdRunning = false;
            eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Info, null, "@Veh_AGVM : In 132 send back : cmd_Distance = {0}", cmddistance);

            stSend = new ID_132_TRANS_COMPLETE_REPORT()
            {
                CmdID = cmdID,
                //ActType = actType,    //jason-- 180829
                CSTID = Veh_AGVM_Global.CSTID_Load,
                //CmpCode = cmpCode,
                CmpStatus = (CompleteStatus)Veh_AGVM_Global.NowActiveType,
                CurrentSecID = Veh_AGVM_Global.Section,
                CurrentAdrID = Veh_AGVM_Global.Address,
                SecDistance = (uint)Veh_AGVM_Global.DistanceFromSectionStart,
                CmdPowerConsume = (uint)Veh_AGVM_Global_Property.Cmd_Power_Consume_Check,
                CmdDistance = cmddistance
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.TransEventRepFieldNumber,
                TranCmpRep = stSend
            };

            sw.Start();

            com.mirle.iibg3k0.ttc.Common.TrxTcpIp.ReturnCode result = snedRecv(wrapper, out stRecv, out rtnMsg);

            sw.Stop();

            time = sw.ElapsedMilliseconds;

            sw.Reset();

            if (time < timeOut)
            {
                blTimeOut = false;
                return result == TrxTcpIp.ReturnCode.Normal;
            }
            else
            {
                blTimeOut = true;
                Console.WriteLine("#{0}# TCP/IP Comm: TimeOut", DateTime.Now.ToString("HH:mm:ss.fff"));
                return result == TrxTcpIp.ReturnCode.Timeout;
            }


        }

        public bool sned_Str134(string cmdID, EventType eventType, string section, string address, string blockSec,
            VhGuideStatus leftGuide, VhGuideStatus rightGuide, VhStopSingle blockStatus, VhStopSingle pauseStatus,
            VhStopSingle obstStatus, VhLoadCSTStatus loadStatus, DriveDirction DriveDirction, double sec_dist = 0)
        {
            string rtnMsg = string.Empty;

            ID_134_TRANS_EVENT_REP stSend;
            //ID_34_TRANS_EVENT_RESPONSE stRecv;        //jason-- 180829

            stSend = new ID_134_TRANS_EVENT_REP()
            {
                EventType = EventType.AdrPass, //jason++ 181019  
                CurrentAdrID = address,
                CurrentSecID = section,
                //HasCST = loadStatus,
                //ObstacleStatus = obstStatus,    //?
                //PauseStatus = pauseStatus,  //?               //jason-- 180829
                //LeftGuideLockStatus = leftGuide,
                //RightGuideLockStatus = rightGuide,
                SecDistance = (uint)sec_dist,
                DrivingDirection = DriveDirction,
                //CtrDistance = 0,    //?
                //ObstDistance = 0,   //?
                //RequestBlockID = blockSec   //?
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.TransEventRepFieldNumber,
                TransEventRep = stSend
            };

            //sw.Start();

            //com.mirle.iibg3k0.ttc.Common.TrxTcpIp.ReturnCode result = clientAgent.TrxTcpIp.sendRecv_Google(wrapper, out stRecv, out rtnMsg); //jason-- 180830
            clientAgent.TrxTcpIp.SendGoogleMsg(wrapper);
            // Waiting for reply
            //sw.Stop();

            time = sw.ElapsedMilliseconds;

            if (time > timeOut)
            {
                blTimeOut = true;
                sw.Reset();
                Console.WriteLine("#{0}#TCP/IP Comm: Time Out", DateTime.Now.ToString("HH:mm:ss.fff"));                   // Roy+180308
                //return result == TrxTcpIp.ReturnCode.Timeout;     //jason-- 180830
                return true;    //jason++ 180830
            }
            else
            {
                blTimeOut = false;
                sw.Reset();
                //jason-- 180830
                //if (stRecv.IsBlockPass == 1)
                //{
                //    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enTransferRequest;
                //    Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd134;             // cmd32;                   // Roy?180308 ... shoulf be 'cmd134'
                //    Veh_AGVM_Global.eventTypes = (int)VehEventTypes.BlockSection_Query;                     // Roy*180319
                //    Veh_AGVM_Global.vehBlockPassReply = (int)Status.NG;                   // Roy?180308
                //    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = true;
                //}
                //else
                /* jason-- 190129
                {
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = false;
                    Veh_AGVM_Global.seqEvents = Veh_AGVM_Global.SequenceEvents.enTransferRequest;
                    //Veh_AGVM_Global.enCmdID = Veh_AGVM_Global.CmdID.cmd134;             // cmd32;                   // Roy?180308 ... shoulf be 'cmd134'
                    Veh_AGVM_Global.eventTypes = (int)VehEventTypes.BlockSection_Query;                     // Roy*180319
                    Veh_AGVM_Global.vehBlockPassReply = (int)Status.OK;                   // Roy?180308
                    Veh_AGVM_Global.vehAGVM.timerEventSquence.Enabled = true;
                }
                */
            }

            //return result == TrxTcpIp.ReturnCode.Normal;  //jason-- 180830
            return true; //jason++ 180830
        }

        public bool sned_Str136(string cmdID, EventType eventType, string currentSecID, string currentAdrID, string[] reserveSections, string requestBlockID,
            string requestHIDID, VhLoadCSTStatus hasCST, string cstID, string releaseBlockAdrID, string releaseHIDAdrID,
            double sec_dist = 0)
        {
            try
            {
                string rtnMsg = string.Empty;
                //if(Veh_AGVM_Global.check_recieve_36 == true)
                //{

                ID_136_TRANS_EVENT_REP strSend;
                ID_36_TRANS_EVENT_RESPONSE stRecv;
                strSend = new ID_136_TRANS_EVENT_REP
                {
                    EventType = eventType,
                    RequestBlockID = requestBlockID,
                    //RequestHIDID = requestHIDID,
                    //HasCST = hasCST,
                    CSTID = Veh_AGVM_Global.cstID,
                    ReleaseBlockAdrID = releaseBlockAdrID,
                    //ReleaseHIDAdrID = releaseHIDAdrID,
                    CurrentAdrID = currentAdrID,
                    CurrentSecID = currentSecID,
                    SecDistance = (uint)sec_dist
                };
                if (reserveSections != null)
                {
                    if (reserveSections.Length != 0)
                    {
                        ReserveInfo[] ReserveInfos = new ReserveInfo[reserveSections.Length];
                        for (int i = 0; i < reserveSections.Length; i++)
                        {
                            ReserveInfo temp = new ReserveInfo()
                            {
                                ReserveSectionID = reserveSections[i],
                                DriveDirction = (DriveDirction)Veh_AGVM_Global_Property.reserve_direction_List_Check[Veh_AGVM_Global_Property.has_already_Count_Check + i] //要填入正確方向
                            };
                            ReserveInfos[i] = temp;
                        }
                        strSend.ReserveInfos.AddRange(ReserveInfos);
                    }
                }
                Veh_AGVM_Global.block_continue_section = requestBlockID;
                WrapperMessage wrapper = new WrapperMessage
                {
                    ID = WrapperMessage.ImpTransEventRepFieldNumber,
                    ImpTransEventRep = strSend
                };
                sw.Start();

                com.mirle.iibg3k0.ttc.Common.TrxTcpIp.ReturnCode result = snedRecv(wrapper, out stRecv, out rtnMsg);

                sw.Stop();
                return true; //jason++ 180830
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                eqTool.Fun_Log(eqTool.MyLogKind.GeneralProcess, NLog.LogLevel.Error, null, "@Veh_AGVM_Comm_Data : ID_136 error " + e.Message);
                return true;
            }
        }

        public bool sned_Str143(string currentAdrID, string currentSecID, VHModeStatus modeStatus, VHActionStatus actionStatus,
            VhPowerStatus powerStatus, VhStopSingle obstacleStatus, VhStopSingle blockingStatus, VhStopSingle hidStatus,
            VhStopSingle pauseStatus, VhStopSingle errorStatus, int secDistance, int obstDistance, string obstVehicleID,
            string stoppedBlockID, string stoppedHIDID , int batteryCapicity)
        {
            string rtnMsg = string.Empty;

            ID_143_STATUS_RESPONSE strSend;
            ID_43_STATUS_REQUEST stRecv;
            actionStatus = 0;
            if (Veh_AGVM_Global.cmdRunning == true)
            {
                actionStatus = (VHActionStatus)1;
            }
            strSend = new ID_143_STATUS_RESPONSE
            {
                CurrentAdrID = currentAdrID,
                CurrentSecID = currentSecID,
                ModeStatus = modeStatus,
                ActionStatus = actionStatus,
                PowerStatus = powerStatus,
                ObstacleStatus = obstacleStatus,
                BlockingStatus = blockingStatus,
                //HIDStatus = hidStatus,
                PauseStatus = pauseStatus,
                ErrorStatus = errorStatus,
                SecDistance = (uint)secDistance,
                ObstDistance = obstDistance,
                ObstVehicleID = obstVehicleID,
                StoppedBlockID = stoppedBlockID,
                //StoppedHIDID = stoppedHIDID,
                CmdID = Veh_AGVM_Global.cmdID,
                CSTID = Veh_AGVM_Global.CSTID_Load,
                BatteryCapacity = (uint)batteryCapicity,
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.StatusReqRespFieldNumber,
                StatusReqResp = strSend
            };
            sw.Start();

            com.mirle.iibg3k0.ttc.Common.TrxTcpIp.ReturnCode result = snedRecv(wrapper, out stRecv, out rtnMsg);

            sw.Stop();

            time = sw.ElapsedMilliseconds;

            sw.Reset();

            if (time < timeOut)
            {
                blTimeOut = false;
                return result == TrxTcpIp.ReturnCode.Normal;
            }
            else
            {
                blTimeOut = true;
                Console.WriteLine("#{0}# TCP/IP Comm: TimeOut", DateTime.Now.ToString("HH:mm:ss.fff"));
                return result == TrxTcpIp.ReturnCode.Timeout;
            }
        }

        public bool sned_Str144(string cmdID, string currAdr, string currSec, VHModeStatus mStatus, VHActionStatus aStatus,
                        VhPowerStatus powerStatus, VhLoadCSTStatus lStatus, VhStopSingle oStatus,
                        VhStopSingle bStatus, VhStopSingle pauseStatus, VhGuideStatus leftGuide,
                        VhGuideStatus rightGuide, int sec_Dist, DriveDirction direction, int BatteryCapacity, int BatteryTemperature , int SteeringWheel, VhChargeStatus ChargeStatus)
        {
            string rtnMsg = string.Empty;
            VHActionStatus actionStatus;
            ID_144_STATUS_CHANGE_REP stSend;
            ID_44_STATUS_CHANGE_RESPONSE stRecv;
            /////// For click testing
            //Veh_AGVM_Global.cmdID = "1";
            //currAdr = " ";
            //currSec = " ";
            //Veh_AGVM_Global.CSTID_Load = " ";
            ///////
            try
            {
                actionStatus = 0;
                if (Veh_AGVM_Global.cmdRunning == true)
                {
                    actionStatus = (VHActionStatus)1;
                }
                stSend = new ID_144_STATUS_CHANGE_REP
                {
                    CurrentAdrID = currAdr,
                    CurrentSecID = currSec,
                    ModeStatus = mStatus,
                    ActionStatus = actionStatus,
                    PowerStatus = powerStatus,
                    HasCST = lStatus, //jason-- 180830
                    ObstacleStatus = oStatus,
                    ReserveStatus = 0,
                    BlockingStatus = bStatus,
                    PauseStatus = pauseStatus,
                    CmdID = Veh_AGVM_Global.cmdID,
                    CSTID = Veh_AGVM_Global.CSTID_Load,
                    SecDistance = (uint)sec_Dist,
                    DrivingDirection = direction,
                    BatteryCapacity = (uint)BatteryCapacity,
                    ChargeStatus = ChargeStatus,
                    BatteryTemperature = BatteryTemperature,
                    SteeringWheel = SteeringWheel
                    //ReserveInfos = 
                    //LeftGuideLockStatus = leftGuide,  //jason-- 180830
                    //RightGuideLockStatus = rightGuide,    //jason-- 180830
                    //SecDistance = sec_Dist    //jason-- 180830
                };

                WrapperMessage wrapper = new WrapperMessage
                {
                    ID = WrapperMessage.StatueChangeRepFieldNumber,
                    StatueChangeRep = stSend
                };

                sw.Start();

                com.mirle.iibg3k0.ttc.Common.TrxTcpIp.ReturnCode result = snedRecv(wrapper, out stRecv, out rtnMsg);

                sw.Stop();

                time = sw.ElapsedMilliseconds;

                if (time < timeOut)
                {
                    sw.Reset();
                    blTimeOut = false;

                    if (stRecv.ReplyCode == 0)
                        return result == TrxTcpIp.ReturnCode.Normal;
                    else
                        return result == TrxTcpIp.ReturnCode.DataCheckFail;
                }
                else
                {
                    sw.Reset();
                    blTimeOut = true;
                    Console.WriteLine("#{0}#TCP/IP Comm: Time Out", DateTime.Now.ToString("HH:mm:ss.fff"));
                    return result == TrxTcpIp.ReturnCode.Timeout;                   // DataCheckFail;                   // Roy*180308
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return false;
            }
        }
        public bool sned_Str152(int Cmp_Code)
        {
            string rtnMsg = string.Empty;
            ID_52_AVOID_COMPLETE_RESPONSE stRecv;
            ID_152_AVOID_COMPLETE_REPORT strSend;

            strSend = new ID_152_AVOID_COMPLETE_REPORT
            {
                CmpStatus = Cmp_Code
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.AvoidCompleteRepFieldNumber,
                AvoidCompleteRep = strSend
            };
            sw.Start();

            com.mirle.iibg3k0.ttc.Common.TrxTcpIp.ReturnCode result = snedRecv(wrapper, out stRecv, out rtnMsg);

            sw.Stop();

            time = sw.ElapsedMilliseconds;

            sw.Reset();

            if (time < timeOut)
            {
                blTimeOut = false;
                return result == TrxTcpIp.ReturnCode.Normal;
            }
            else
            {
                blTimeOut = true;
                Console.WriteLine("#{0}# TCP/IP Comm: TimeOut", DateTime.Now.ToString("HH:mm:ss.fff"));
                return result == TrxTcpIp.ReturnCode.Timeout;
            }
        }
        public bool sned_Str172(int completeCode)
        {
            string rtnMsg = string.Empty;
            ID_72_RANGE_TEACHING_COMPLETE_RESPONSE stRecv;
            ID_172_RANGE_TEACHING_COMPLETE_REPORT send_str = new ID_172_RANGE_TEACHING_COMPLETE_REPORT
            {
                FromAdr = Veh_AGVM_Global.FromAdr,
                ToAdr = Veh_AGVM_Global.ToAdr,
                SecDistance = Convert.ToUInt32(Veh_AGVM_Global_Property.cmd_Length_Check),
                CompleteCode = completeCode
            };
            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.RangeTeachingCmpRepFieldNumber,
                //SeqNum = Veh_AGVM_Global.iSeqNum,
                RangeTeachingCmpRep = send_str
            };

            sw.Start();

            com.mirle.iibg3k0.ttc.Common.TrxTcpIp.ReturnCode result = snedRecv(wrapper, out stRecv, out rtnMsg);

            sw.Stop();

            time = sw.ElapsedMilliseconds;

            sw.Reset();

            if (time < timeOut)
            {
                blTimeOut = false;
                return result == TrxTcpIp.ReturnCode.Normal;
            }
            else
            {
                blTimeOut = true;
                Console.WriteLine("#{0}# TCP/IP Comm: TimeOut", DateTime.Now.ToString("HH:mm:ss.fff"));
                return result == TrxTcpIp.ReturnCode.Timeout;
            }
        }

        public bool sned_Str174(string addr, int position)
        {
            string rtnMsg = string.Empty;
            ID_74_ADDRESS_TEACH_RESPONSE stRecv;
            ID_174_ADDRESS_TEACH_REPORT strSend;

            strSend = new ID_174_ADDRESS_TEACH_REPORT
            {
                Addr = addr,
                Position = position
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.AddressTeachRepFieldNumber,
                AddressTeachRep = strSend
            };
            sw.Start();

            com.mirle.iibg3k0.ttc.Common.TrxTcpIp.ReturnCode result = snedRecv(wrapper, out stRecv, out rtnMsg);

            sw.Stop();

            time = sw.ElapsedMilliseconds;

            sw.Reset();

            if (time < timeOut)
            {
                blTimeOut = false;
                return result == TrxTcpIp.ReturnCode.Normal;
            }
            else
            {
                blTimeOut = true;
                Console.WriteLine("#{0}# TCP/IP Comm: TimeOut", DateTime.Now.ToString("HH:mm:ss.fff"));
                return result == TrxTcpIp.ReturnCode.Timeout;
            }
        }

        public bool sned_Str194(string errCode, ErrorStatus errorStatus)
        {
            string rtnMsg = string.Empty;

            ID_194_ALARM_REPORT strSend;
            ID_94_ALARM_RESPONSE stRecv;
            strSend = new ID_194_ALARM_REPORT
            {
                ErrCode = errCode,
                ErrStatus = errorStatus
            };

            WrapperMessage wrapper = new WrapperMessage
            {
                ID = WrapperMessage.AlarmRepFieldNumber,
                AlarmRep = strSend
            };
            sw.Start();

            com.mirle.iibg3k0.ttc.Common.TrxTcpIp.ReturnCode result = snedRecv(wrapper, out stRecv, out rtnMsg);

            sw.Stop();

            time = sw.ElapsedMilliseconds;

            sw.Reset();

            if (time < timeOut)
            {
                blTimeOut = false;
                return result == TrxTcpIp.ReturnCode.Normal;
            }
            else
            {
                blTimeOut = true;
                Console.WriteLine("#{0}# TCP/IP Comm: TimeOut", DateTime.Now.ToString("HH:mm:ss.fff"));
                return result == TrxTcpIp.ReturnCode.Timeout;
            }
        }

        private void CreatTcpIpClientAgent()
        {
            #region config xml
            string configPath = "D:\\UserData\\AGV" + "\\config\\";
            XDocument ipsetting = XDocument.Load(configPath + "ipsetting.xml");
            int clientNum = int.Parse(ipsetting.Element("Domain").Element("clientNum").Value);
            string clientName = ipsetting.Element("Domain").Element("clientName").Value;
            string sRemoteIP = ipsetting.Element("Domain").Element("sRemoteIP").Value;
            string sRemotePort = ipsetting.Element("Domain").Element("sRemotePort").Value;
            string sLocalIP = ipsetting.Element("Domain").Element("sLocalIP").Value;
            string sLocalPort = ipsetting.Element("Domain").Element("sLocalPort").Value;
            int reconnection_interval_ms = int.Parse(ipsetting.Element("Domain").Element("reconnection_interval_ms").Value);  //斷線多久之後再進行一次嘗試恢復連線的動作
            int max_reconnection_count = int.Parse(ipsetting.Element("Domain").Element("max_reconnection_count").Value);  //斷線後最多嘗試幾次重新恢復連線 (若設定為0則不進行自動重新連線)
            int retry_count = int.Parse(ipsetting.Element("Domain").Element("retry_count").Value);  //SendRecv Time out後要再重複發送的次數
            #endregion
            int iRemotePort = int.Parse(sRemotePort);
            int iLocalPort = int.Parse(sLocalPort);

            int recv_timeout_ms = (int)timeOut;           //等待sendRecv Reply的Time out時間(milliseconds)
            int send_timeout_ms = 0;               //暫時無用
            int max_readSize = 0;                  //暫時無用


            clientAgent = new TcpIpAgent(clientNum, clientName,
                sLocalIP, iLocalPort, sRemoteIP, iRemotePort,
                TcpIpAgent.TCPIP_AGENT_COMM_MODE.CLINET_MODE
                  , recv_timeout_ms, send_timeout_ms, max_readSize, reconnection_interval_ms,
                  max_reconnection_count, retry_count, AppConstants.FrameBuilderType.PC_TYPE_MIRLE);
        }

        /// <summary>
        /// 註冊要監聽的事件
        /// </summary>
        void registeredEvent()
        {
            // Add Event Handlers for all the recieved messages
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.TransReqFieldNumber, str31_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.TranCmpRespFieldNumber, str32_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.ControlZoneReqFieldNumber, str33_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.CSTIDRenameReqFieldNumber, str35_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.ImpTransEventRespFieldNumber, str36_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.TransCancelReqFieldNumber, str37_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.PauseReqFieldNumber, str39_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.ModeChangeReqFieldNumber, str41_Recieve);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.StatusReqFieldNumber, str43_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.StatusChangeRespFieldNumber, str44_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.PowerOpeReqFieldNumber, str45_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.AvoidReqFieldNumber, str51_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.AvoidCompleteRespFieldNumber, str52_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.RangeTeachingReqFieldNumber, str71_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.RangeTeachingCmpRespFieldNumber, str72_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.AddressTeachRespFieldNumber, str74_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.AlarmResetReqFieldNumber, str91_Receive);
            clientAgent.addTcpIpReceivedHandler(WrapperMessage.AlarmRespFieldNumber, str94_Receive);
            //
            //Here need to be careful for the TCPIP
            //

            clientAgent.addTcpIpConnectedHandler(Connection);       //連線時的通知
            clientAgent.addTcpIpDisconnectedHandler(Disconnection); //斷線時的通知
        }

        protected void Connection(object sender, TcpIpEventArgs e)
        {
            TcpIpAgent agent = sender as TcpIpAgent;
            Console.WriteLine("Vh ID:{0}, connection.", agent.Name);
        }

        protected void Disconnection(object sender, TcpIpEventArgs e)
        {
            TcpIpAgent agent = sender as TcpIpAgent;
            Console.WriteLine("Vh ID:{0}, disconnection.", agent.Name);
        }
        #region 需要注入的解封包使用的Function
        public static Google.Protobuf.IMessage unPackWrapperMsg(byte[] raw_data)
        {
            WrapperMessage WarpperMsg = ToObject<WrapperMessage>(raw_data);
            return WarpperMsg;
        }

        public static T ToObject<T>(byte[] buf) where T : Google.Protobuf.IMessage<T>, new()
        {
            if (buf == null)
                return default(T);

            Google.Protobuf.MessageParser<T> parser = new Google.Protobuf.MessageParser<T>(() => new T());
            return parser.ParseFrom(buf);
        }
        #endregion 需要注入的解封包使用的Function
        protected void OnEventMsgFromAGVM(ReportMsgEventArg e)
        {
            if (eventMsgFromAGVM != null)
            {
                eventMsgFromAGVM(this, e);
            }
        }

        protected void GetMsgString(string fromAdr, string toAdr, string CST_ID, ref string msg)
        {
            string sGuide = string.Empty, sCycle = string.Empty;
            if (Veh_AGVM_Global.GuideSections != null)
            {
                foreach (string str in Veh_AGVM_Global.GuideSections)
                {
                    sGuide = sGuide + str + "_";
                }
            }
            if (Veh_AGVM_Global.CycleSections != null)
            {
                foreach (string str in Veh_AGVM_Global.CycleSections)
                {
                    sCycle = sCycle + str + "_";
                }
            }
            msg = string.Format(@"Cmd_ID: {0},
                            Active Type: {1},
                            From Address: {2},
                            To Address: {3},
                            Guide Sections:{4},
                            Cycle Sections:{5},
                            CST_ID: {6}",
                            Veh_AGVM_Global.enCmdID, Veh_AGVM_Global.NowActiveType.ToString(),
                            fromAdr, toAdr, sGuide, sCycle, CST_ID.ToString());
        }
    }


    public class Cmd31EventArg : EventArgs
    {
        public Cmd31EventArg()
        {

        }
    }


    public class VHMSGIF
    {
        public const int LEN_MESSAGE_SIZE = 100;
        public const int LEN_ITEM_CSTID = 16;
        public const int LEN_ITEM_DATETIME = 14;
        public const int LEN_ITEM_TESTDATA = 8;
        //public const int LEN_ITEM_PASSSEGMENT = 4;
        public const int LEN_ITEM_PASSSEGMENT = 6;

        public const ushort ITEM_RESPCODE_OK = 0;
        public const ushort ITEM_RESPCODE_NG = 1;

        public const ushort ITEM_MULTIFLAG_LAST = 0;
        public const ushort ITEM_MULTIFLAG_CONT = 1;

        // Controller -> Vehicle Packet ID = [1 - 99]
        // Vehicle -> Controller Packet ID = [101 - 199]
        public const int ID_NONE = 0;
        public const int ID_HOST_KISO_VERSION_REPORT = 1;
        public const int ID_HOST_KISO_VERSION_RESPONSE = 101;

        public const int ID_VHCL_KISO_VERSION_REPORT = 102;
        public const int ID_VHCL_KISO_VERSION_RESPONSE = 2;

        public const int ID_KISO_LIST_COUNT_REPORT = 11;
        public const int ID_KISO_LIST_COUNT_RESPONSE = 111;

        public const int ID_KISO_TRAVEL_REPORT = 13;
        public const int ID_KISO_TRAVEL_RESPONSE = 113;

        public const int ID_KISO_SECTION_REPORT = 15;
        public const int ID_KISO_SECTION_RESPONSE = 115;

        public const int ID_KISO_ADDRESS_REPORT = 17;
        public const int ID_KISO_ADDRESS_RESPONSE = 117;

        public const int ID_KISO_SCALE_REPORT = 19;
        public const int ID_KISO_SCALE_RESPONSE = 119;

        public const int ID_KISO_CONTROL_REPORT = 21;
        public const int ID_KISO_CONTROL_RESPONSE = 121;

        public const int ID_KISO_GUIDE_REPORT = 23;
        public const int ID_KISO_GUIDE_RESPONSE = 123;

        public const int ID_KISO_GRIPPER_REPORT = 25;
        public const int ID_KISO_GRIPPER_RESPONSE = 125;

        public const int ID_TRANS_REQUEST = 31;
        public const int ID_TRANS_REQUEST_RESPONSE = 131;

        public const int ID_TRANS_COMPLETE_REPORT = 132;
        public const int ID_TRANS_COMPLETE_RESPONSE = 32;

        public const int ID_TRANS_EVENT_REPORT = 134;
        public const int ID_TRANS_EVENT_RESPONSE = 34;

        public const int ID_TRANS_CHANGE_REQUEST = 35;
        public const int ID_TRANS_CHANGE_RESPONSE = 135;

        public const int ID_TRANS_CANCEL_REQUEST = 37;
        public const int ID_TRANS_CANCEL_RESPONSE = 137;

        public const int ID_PAUSE_REQUEST = 39;
        public const int ID_PAUSE_RESPONSE = 139;

        public const int ID_MODE_CHANGE_REQUEST = 41;
        public const int ID_MODE_CHANGE_RESPONSE = 141;

        public const int ID_STATUS_REQUEST = 43;
        public const int ID_STATUS_RESPONSE = 143;

        public const int ID_STATUS_CHANGE_REPORT = 144;
        public const int ID_STATUS_CHANGE_RESPONSE = 44;

        public const int ID_POWER_OPE_REQUEST = 45;
        public const int ID_POWER_OPE_RESPONSE = 145;

        public const int ID_INDIVIDUAL_DATA_UPLOAD_REQUEST = 61;
        public const int ID_INDIVIDUAL_DATA_UPLOAD_REPORT = 161;

        public const int ID_INDIVIDUAL_DATA_DOWNLOAD_REQUEST = 162;
        public const int ID_INDIVIDUAL_DATA_DOWNLOAD_REPORT = 62;

        public const int ID_INDIVIDUAL_DATA_CHANGE_REQUEST = 63;
        public const int ID_INDIVIDUAL_DATA_CHANGE_RESPONSE = 163;

        public const int ID_SECTION_TEACH_REQUEST = 71;
        public const int ID_SECTION_TEACH_RESPONSE = 171;

        public const int ID_SECTION_TEACH_COMPLETE_REPORT = 172;
        public const int ID_SECTION_TEACH_COMPLETE_RESPONSE = 72;

        public const int ID_ADDRESS_TEACH_REPORT = 174;
        public const int ID_ADDRESS_TEACH_RESPONSE = 74;

        public const int ID_ALARM_RESET_REQUEST = 91;
        public const int ID_ALARM_RESET_RESPONSE = 191;

        public const int ID_ALARM_REPORT = 194;
        public const int ID_ALARM_RESPONSE = 94;

        public const int ID_LOG_UPLOAD_REQUEST = 95;
        public const int ID_LOG_UPLOAD_RESPONSE = 195;

        public const int ID_LOG_DATA_REPORT = 196;
        public const int ID_LOG_DATA_RESPONSE = 96;

        public const int ID_VHCL_COMM_TEST_REQUEST = 198;
        public const int ID_VHCL_COMM_TEST_REPORT = 98;

        public const int ID_HOST_COMM_TEST_REQUEST = 99;
        public const int ID_HOST_COMM_TEST_REPORT = 199;

        public static string[] ID_NAMES;

        public static void PrcInitializeIDNames()
        {
            string sWk = "";

            ID_NAMES = new string[256];

            for (int ii = 0; ii < ID_NAMES.Length; ii++)
            {
                switch (ii)
                {
                    case ID_HOST_KISO_VERSION_REPORT: sWk = "[  1]Host Version Rep."; break;
                    case ID_HOST_KISO_VERSION_RESPONSE: sWk = "[101]Host Version Resp."; break;
                    case ID_VHCL_KISO_VERSION_REPORT: sWk = "[102]Vehicle Version Rep."; break;
                    case ID_VHCL_KISO_VERSION_RESPONSE: sWk = "[  2]Vehicle Version Resp."; break;
                    case ID_KISO_LIST_COUNT_REPORT: sWk = "[ 11]Kiso ListCount Rep."; break;
                    case ID_KISO_LIST_COUNT_RESPONSE: sWk = "[111]Kiso ListCount Resp."; break;
                    case ID_KISO_TRAVEL_REPORT: sWk = "[ 13]Kiso Travel Rep."; break;
                    case ID_KISO_TRAVEL_RESPONSE: sWk = "[113]Kiso Travel Resp."; break;
                    case ID_KISO_SECTION_REPORT: sWk = "[ 15]Kiso Section Rep."; break;
                    case ID_KISO_SECTION_RESPONSE: sWk = "[115]Kiso Section Resp."; break;
                    case ID_KISO_ADDRESS_REPORT: sWk = "[ 17]Kiso Address Rep."; break;
                    case ID_KISO_ADDRESS_RESPONSE: sWk = "[117]Kiso Address Resp."; break;
                    case ID_KISO_SCALE_REPORT: sWk = "[ 19]Kiso Scale Rep."; break;
                    case ID_KISO_SCALE_RESPONSE: sWk = "[119]Kiso Scale Resp."; break;
                    case ID_KISO_CONTROL_REPORT: sWk = "[ 21]Kiso Control Rep."; break;
                    case ID_KISO_CONTROL_RESPONSE: sWk = "[121]Kiso Control Resp."; break;
                    case ID_KISO_GUIDE_REPORT: sWk = "[ 23]Kiso Guide Rep."; break;
                    case ID_KISO_GUIDE_RESPONSE: sWk = "[123]Kiso Guide Resp."; break;
                    case ID_TRANS_REQUEST: sWk = "[ 31]Trans Req."; break;
                    case ID_TRANS_REQUEST_RESPONSE: sWk = "[131]Trans Resp."; break;
                    case ID_TRANS_COMPLETE_REPORT: sWk = "[132]TransComp Rep."; break;
                    case ID_TRANS_COMPLETE_RESPONSE: sWk = "[ 32]TransComp Resp."; break;
                    case ID_TRANS_EVENT_REPORT: sWk = "[134]TransEvent Rep."; break;
                    case ID_TRANS_EVENT_RESPONSE: sWk = "[ 34]TransEvent Resp."; break;
                    case ID_TRANS_CHANGE_REQUEST: sWk = "[ 35]TransChange Req."; break;
                    case ID_TRANS_CHANGE_RESPONSE: sWk = "[135]TransChange Resp."; break;
                    case ID_TRANS_CANCEL_REQUEST: sWk = "[ 37]TransCancel Req."; break;
                    case ID_TRANS_CANCEL_RESPONSE: sWk = "[137]TransCancel Resp."; break;
                    case ID_PAUSE_REQUEST: sWk = "[ 39]Pause Req."; break;
                    case ID_PAUSE_RESPONSE: sWk = "[139]Pause Resp."; break;
                    case ID_MODE_CHANGE_REQUEST: sWk = "[ 41]ModeChange Req."; break;
                    case ID_MODE_CHANGE_RESPONSE: sWk = "[141]ModeChange Resp."; break;
                    case ID_STATUS_REQUEST: sWk = "[ 43]Status Req."; break;
                    case ID_STATUS_RESPONSE: sWk = "[143]Status Resp."; break;
                    case ID_STATUS_CHANGE_REPORT: sWk = "[144]StatusChange Rep."; break;
                    case ID_STATUS_CHANGE_RESPONSE: sWk = "[ 44]StatusChange Resp."; break;
                    case ID_POWER_OPE_REQUEST: sWk = "[ 45]PowerOpe Req."; break;
                    case ID_POWER_OPE_RESPONSE: sWk = "[145]PowerOpe Resp."; break;
                    case ID_INDIVIDUAL_DATA_UPLOAD_REQUEST: sWk = "[ 61]IndividualUp Req."; break;
                    case ID_INDIVIDUAL_DATA_UPLOAD_REPORT: sWk = "[161]IndividualUp Rep."; break;
                    case ID_INDIVIDUAL_DATA_DOWNLOAD_REQUEST: sWk = "[162]IndividualDown Req."; break;
                    case ID_INDIVIDUAL_DATA_DOWNLOAD_REPORT: sWk = "[ 62]IndividualDown Rep."; break;
                    case ID_INDIVIDUAL_DATA_CHANGE_REQUEST: sWk = "[ 63]IndividualChange Req."; break;
                    case ID_INDIVIDUAL_DATA_CHANGE_RESPONSE: sWk = "[163]IndividualChange Resp."; break;
                    case ID_SECTION_TEACH_REQUEST: sWk = "[ 71]SectionTeach Req."; break;
                    case ID_SECTION_TEACH_RESPONSE: sWk = "[171]SectionTeach Resp."; break;
                    case ID_SECTION_TEACH_COMPLETE_REPORT: sWk = "[172]SectionTeachComp Rep."; break;
                    case ID_SECTION_TEACH_COMPLETE_RESPONSE: sWk = "[ 72]SectionTeachComp Resp."; break;
                    case ID_ADDRESS_TEACH_REPORT: sWk = "[174]AddressTeach Rep."; break;
                    case ID_ADDRESS_TEACH_RESPONSE: sWk = "[ 74]AddressTeach Resp."; break;
                    case ID_ALARM_RESET_REQUEST: sWk = "[ 91]AlarmReset Req."; break;
                    case ID_ALARM_RESET_RESPONSE: sWk = "[191]AlarmReset Resp."; break;
                    case ID_ALARM_REPORT: sWk = "[194]Alarm Rep."; break;
                    case ID_ALARM_RESPONSE: sWk = "[ 94]Alarm Resp."; break;
                    case ID_LOG_UPLOAD_REQUEST: sWk = "[ 95]LogUpload Req."; break;
                    case ID_LOG_UPLOAD_RESPONSE: sWk = "[195]LogUpload Resp."; break;
                    case ID_LOG_DATA_REPORT: sWk = "[196]LogData Rep."; break;
                    case ID_LOG_DATA_RESPONSE: sWk = "[ 96]LogData Resp."; break;
                    case ID_VHCL_COMM_TEST_REQUEST: sWk = "[198]Vehicle CommTest Req."; break;
                    case ID_VHCL_COMM_TEST_REPORT: sWk = "[ 98]Vehicle CommTest Resp."; break;
                    case ID_HOST_COMM_TEST_REQUEST: sWk = "[ 99]Host CommTest Req."; break;
                    case ID_HOST_COMM_TEST_REPORT: sWk = "[199]Host CommTest Resp."; break;
                    default: sWk = "[   ]Not Defined"; break;
                }
                ID_NAMES[ii] = sWk.PadRight(32);
            }
        }

    }

}
