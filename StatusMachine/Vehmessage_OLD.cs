// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ohtmessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TcpIpClientSample
{

    /// <summary>Holder for reflection information generated from ohtmessage.proto</summary>
    public static partial class OhtmessageReflection
    {

        #region Descriptor
        /// <summary>File descriptor for ohtmessage.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static OhtmessageReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChBvaHRtZXNzYWdlLnByb3RvEgh0dXRvcmlhbCLoAgogSURfMV9IT1NUX0JB",
                  "U0lDX0lORk9fVkVSU0lPTl9SRVASGQoRRGF0YURhdGVUaW1lX1llYXIYASAB",
                  "KAkSGgoSRGF0YURhdGVUaW1lX01vbnRoGAIgASgJEhgKEERhdGFEYXRlVGlt",
                  "ZV9EYXkYAyABKAkSGQoRRGF0YURhdGVUaW1lX0hvdXIYBCABKAkSGwoTRGF0",
                  "YURhdGVUaW1lX01pbnV0ZRgFIAEoCRIbChNEYXRhRGF0ZVRpbWVfU2Vjb25k",
                  "GAYgASgJEhgKEEN1cnJlbnRUaW1lX1llYXIYByABKAkSGQoRQ3VycmVudFRp",
                  "bWVfTW9udGgYCCABKAkSFwoPQ3VycmVudFRpbWVfRGF5GAkgASgJEhgKEEN1",
                  "cnJlbnRUaW1lX0hvdXIYCiABKAkSGgoSQ3VycmVudFRpbWVfTWludXRlGAsg",
                  "ASgJEhoKEkN1cnJlbnRUaW1lX1NlY29uZBgMIAEoCSI8CidJRF8xMDFfSE9T",
                  "VF9CQVNJQ19JTkZPX1ZFUlNJT05fUkVTUE9OU0USEQoJUmVwbHlDb2RlGAEg",
                  "ASgFIt0BCh1JRF8xMDJfQkFTSUNfSU5GT19WRVJTSU9OX1JFUBIdChVCYXNp",
                  "Y0luZm9WZXJzaW9uX1llYXIYASABKAkSHgoWQmFzaWNJbmZvVmVyc2lvbl9N",
                  "b250aBgCIAEoCRIcChRCYXNpY0luZm9WZXJzaW9uX0RheRgDIAEoCRIdChVC",
                  "YXNpY0luZm9WZXJzaW9uX0hvdXIYBCABKAkSHwoXQmFzaWNJbmZvVmVyc2lv",
                  "bl9NaW51dGUYBSABKAkSHwoXQmFzaWNJbmZvVmVyc2lvbl9TZWNvbmQYBiAB",
                  "KAkiNQogSURfMl9CQVNJQ19JTkZPX1ZFUlNJT05fUkVTUE9OU0USEQoJUmVw",
                  "bHlDb2RlGAEgASgFIrEBChRJRF8xMV9CQVNJQ19JTkZPX1JFUBIcChRUcmF2",
                  "ZWxCYXNpY0RhdGFDb3VudBgBIAEoBRIYChBTZWN0aW9uRGF0YUNvdW50GAIg",
                  "ASgFEhgKEEFkZHJlc3NEYXRhQ291bnQYAyABKAUSFgoOU2NhbGVEYXRhQ291",
                  "bnQYBCABKAUSFwoPQ29udHJsRGF0YUNvdW50GAUgASgFEhYKDkd1aWRlRGF0",
                  "YUNvdW50GAYgASgFIi8KGklEXzExMV9CQVNJQ19JTkZPX1JFU1BPTlNFEhEK",
                  "CVJlcGx5Q29kZRgBIAEoBSLjAgoYSURfMTNfVEFWRUxMSU5HX0RBVEFfUkVQ",
                  "EhIKClJlc29sdXRpb24YASABKA0SFAoMU3RhcnRTdG9wU3BkGAIgASgNEhAK",
                  "CE1heFNwZWVkGAMgASgNEhEKCUFjY2VsVGltZRgEIAEoDRISCgpTQ3VydmVS",
                  "YXRlGAUgASgFEhEKCU9yaWdpbkRpchgGIAEoBRIRCglPcmlnaW5TcGQYByAB",
                  "KA0SEAoIQmVhZW1TcGQYCCABKA0SEgoKTWFudWFsSFNwZBgJIAEoDRISCgpN",
                  "YW51YWxMU3BkGAogASgNEhMKC1RlYWNoaW5nU3BkGAsgASgNEhEKCVJvdGF0",
                  "ZURpchgMIAEoBRITCgtFbmNvZGVyUG9sZRgNIAEoBRIcChRQb3NpdGlvbkNv",
                  "bXBlbnNhdGlvbhgOIAEoDRITCgtLZWVwRGlzdEZhchgPIAEoDRIUCgxLZWVw",
                  "RGlzdE5lYXIYECABKA0iMwoeSURfMTEzX1RBVkVMTElOR19EQVRBX1JFU1BP",
                  "TlNFEhEKCVJlcGx5Q29kZRgBIAEoBSKtAwoWSURfMTVfU0VDVElPTl9EQVRB",
                  "X1JFUBI6CghTZWN0aW9ucxgBIAMoCzIoLnR1dG9yaWFsLklEXzE1X1NFQ1RJ",
                  "T05fREFUQV9SRVAuU2VjdGlvbhrWAgoHU2VjdGlvbhIQCghEcml2ZURpchgB",
                  "IAEoBRISCgpBZXJhU2Vjc29yGAIgASgFEhAKCEd1aWRlRGlyGAMgASgFEhEK",
                  "CVNlY3Rpb25JRBgEIAEoCRIQCghGcm9tQWRkchgFIAEoCRIOCgZUb0FkZHIY",
                  "BiABKAkSFAoMQ29udHJvbFRhYmxlGAcgASgFEg0KBVNwZWVkGAkgASgFEhAK",
                  "CERpc3RhbmNlGAogASgFEhkKEUNoYW5nZUFyZWFTZW5zb3IxGAsgASgFEhcK",
                  "D0NoYW5nZUd1aWRlRGlyMRgMIAEoBRIVCg1DaGFuZ2VTZWdOdW0xGA0gASgJ",
                  "EhkKEUNoYW5nZUFyZWFTZW5zb3IyGA4gASgFEhcKD0NoYW5nZUd1aWRlRGly",
                  "MhgPIAEoBRIVCg1DaGFuZ2VTZWdOdW0yGBAgASgJEhEKCUF0U2VnbWVudBgR",
                  "IAEoCSIxChxJRF8xMTVfU0VDVElPTl9EQVRBX1JFU1BPTlNFEhEKCVJlcGx5",
                  "Q29kZRgBIAEoBSK9AQoWSURfMTdfQUREUkVTU19EQVRBX1JFUBI6CghBZGRy",
                  "ZXNzcxgBIAMoCzIoLnR1dG9yaWFsLklEXzE3X0FERFJFU1NfREFUQV9SRVAu",
                  "QWRkcmVzcxpnCgdBZGRyZXNzEgwKBEFkZHIYASABKAkSEgoKUmVzb2x1dGlv",
                  "bhgCIAEoBRIQCghMb2FjdGlvbhgDIAEoBRIUCgxCbG9ja1JlbGVhc2UYBCAB",
                  "KAUSEgoKSElEUmVsZWFzZRgFIAEoBSIxChxJRF8xMTdfQUREUkVTU19EQVRB",
                  "X1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEoBSKjAQoUSURfMTlfU0NBTEVf",
                  "REFUQV9SRVASEgoKUmVzb2x1dGlvbhgBIAEoDRIRCglJbnBvc0FyZWEYAiAB",
                  "KA0SFgoOSW5wb3NTdGFiaWxpdHkYAyABKA0SEgoKU2NhbGVQdWxzZRgEIAEo",
                  "DRITCgtTY2FsZU9mZnNldBgFIAEoDRISCgpTY2FsZVJlc2V0GAYgASgNEg8K",
                  "B1JlYWREaXIYByABKAUiLwoaSURfMTE5X1NDQUxFX0RBVEFfUkVTUE9OU0US",
                  "EQoJUmVwbHlDb2RlGAEgASgFIsYBChZJRF8yMV9DT05UUk9MX0RBVEFfUkVQ",
                  "EhEKCVRpbWVvdXRUMRgBIAEoDRIRCglUaW1lb3V0VDIYAiABKA0SEQoJVGlt",
                  "ZW91dFQzGAMgASgNEhEKCVRpbWVvdXRUNBgEIAEoDRIRCglUaW1lb3V0VDUY",
                  "BSABKA0SEQoJVGltZW91dFQ2GAYgASgNEhEKCVRpbWVvdXRUNxgHIAEoDRIR",
                  "CglUaW1lb3V0VDgYCCABKA0SFAoMVGltZW91dEJsb2NrGAkgASgNIjEKHElE",
                  "XzEyMV9DT05UUk9MX0RBVEFfUkVTUE9OU0USEQoJUmVwbHlDb2RlGAEgASgF",
                  "IokCChRJRF8yM19HVUlERV9EQVRBX1JFUBIUCgxTdGFydFN0b3BTcGQYASAB",
                  "KA0SEAoITWF4U3BlZWQYAiABKA0SEQoJQWNjZWxUaW1lGAMgASgNEhIKClND",
                  "dXJ2ZVJhdGUYBCABKAUSEQoJTm9ybWFsU3BkGAUgASgNEhIKCk1hbnVhbEhT",
                  "cGQYBiABKA0SEgoKTWFudWFsTFNwZBgHIAEoDRIRCglMRkxvY2tQb3MYCCAB",
                  "KA0SEQoJTEJMb2NrUG9zGAkgASgNEhEKCVJGTG9ja1BvcxgKIAEoDRIRCglS",
                  "QkxvY2tQb3MYCyABKA0SGwoTQ2hhbmdlU3RhYmlsaXR5VGltZRgMIAEoDSIv",
                  "ChpJRF8xMjNfR1VJREVfREFUQV9SRVNQT05TRRIRCglSZXBseUNvZGUYASAB",
                  "KAUiHQobSURfNjFfSU5ESVZJRFVBTF9VUExPQURfUkVRIn8KIUlEXzE2MV9J",
                  "TkRJVklEVUFMX1VQTE9BRF9SRVNQT05TRRIVCg1PZmZzZXRHdWlkZUZMGAEg",
                  "ASgNEhUKDU9mZnNldEd1aWRlUkwYAiABKA0SFQoNT2Zmc2V0R3VpZGVGUhgD",
                  "IAEoDRIVCg1PZmZzZXRHdWlkZVJSGAQgASgNIiAKHklEXzE2Ml9JTkRJVklE",
                  "VUFMX0RPV05MT0FEX1JFUSKAAQoiSURfNjJfSU5ESVZJRFVBTF9ET1dOTE9B",
                  "RF9SRVNQT05TRRIVCg1PZmZzZXRHdWlkZUZMGAEgASgNEhUKDU9mZnNldEd1",
                  "aWRlUkwYAiABKA0SFQoNT2Zmc2V0R3VpZGVGUhgDIAEoDRIVCg1PZmZzZXRH",
                  "dWlkZVJSGAQgASgNInkKG0lEXzYzX0lORElWSURVQUxfQ0hBTkdFX1JFURIV",
                  "Cg1PZmZzZXRHdWlkZUZMGAEgASgNEhUKDU9mZnNldEd1aWRlUkwYAiABKA0S",
                  "FQoNT2Zmc2V0R3VpZGVGUhgDIAEoDRIVCg1PZmZzZXRHdWlkZVJSGAQgASgN",
                  "IjYKIUlEXzE2M19JTkRJVklEVUFMX0NIQU5HRV9SRVNQT05TRRIRCglSZXBs",
                  "eUNvZGUYASABKAUi2gEKE0lEXzMxX1RSQU5TX1JFUVVFU1QSDgoGQ21kX0lE",
                  "GAEgASgJEiUKB0FjdFR5cGUYAiABKA4yFC50dXRvcmlhbC5BY3RpdmVUeXBl",
                  "Eg8KB0xvYWRBZHIYAyABKAkSDQoFVG9BZHIYBCABKAkSFAoMU2VjX0Rpc3Rh",
                  "bmNlGAUgASgNEg4KBkNTVF9JRBgGIAEoCRIWCg5HdWlkZV9TZWN0aW9ucxgH",
                  "IAMoCRIWCg5HdWlkZV9TZWdtZW50cxgIIAMoCRIWCg5DeWNsZV9TZWN0aW9u",
                  "cxgJIAMoCSJzChVJRF8xMzFfVFJBTlNfUkVTUE9OU0USDgoGQ21kX0lEGAEg",
                  "ASgJEiUKB0FjdFR5cGUYAiABKA4yFC50dXRvcmlhbC5BY3RpdmVUeXBlEhEK",
                  "CVJlcGx5Q29kZRgDIAEoBRIQCghOZ1JlYXNvbhgEIAEoCSLDAQocSURfMTMy",
                  "X1RSQU5TX0NPTVBMRVRFX1JFUE9SVBIOCgZDbWRfSUQYASABKAkSDgoGQ1NU",
                  "X0lEGAIgASgJEisKCUNtcFN0YXR1cxgDIAEoDjIYLnR1dG9yaWFsLkNvbXBs",
                  "ZXRlU3RhdHVzEhQKDEN1cnJlbnRBZHJJRBgEIAEoCRIUCgxDdXJyZW50U2Vj",
                  "SUQYBSABKAkSFAoMU2VjX0Rpc3RhbmNlGAYgASgNEhQKDENtZF9EaXN0YW5j",
                  "ZRgHIAEoBSIyCh1JRF8zMl9UUkFOU19DT01QTEVURV9SRVNQT05TRRIRCglS",
                  "ZXBseUNvZGUYASABKAUibAopSURfMzNfQ09OVFJPTF9aT05FX1JFUFVFU1Rf",
                  "Q0FOQ0VMX1JFUVVFU1QSKgoLQ29udHJvbFR5cGUYASABKA4yFS50dXRvcmlh",
                  "bC5Db250cm9sVHlwZRITCgtDYW5jZWxTZWNJRBgCIAEoCSKBAQorSURfMTMz",
                  "X0NPTlRST0xfWk9ORV9SRVBVRVNUX0NBTkNFTF9SRVNQT05TRRIqCgtDb250",
                  "cm9sVHlwZRgBIAEoDjIVLnR1dG9yaWFsLkNvbnRyb2xUeXBlEhMKC0NhbmNl",
                  "bFNlY0lEGAIgASgJEhEKCVJlcGx5Q29kZRgDIAEoBSLvAQoWSURfMTM0X1RS",
                  "QU5TX0VWRU5UX1JFUBImCglFdmVudFR5cGUYASABKA4yEy50dXRvcmlhbC5F",
                  "dmVudFR5cGUSFAoMQ3VycmVudEFkcklEGAIgASgJEhQKDEN1cnJlbnRTZWNJ",
                  "RBgDIAEoCRI0ChNMZWZ0R3VpZGVMb2NrU3RhdHVzGAUgASgOMhcudHV0b3Jp",
                  "YWwuVmhHdWlkZVN0YXR1cxI1ChRSaWdodEd1aWRlTG9ja1N0YXR1cxgGIAEo",
                  "DjIXLnR1dG9yaWFsLlZoR3VpZGVTdGF0dXMSFAoMU2VjX0Rpc3RhbmNlGAcg",
                  "ASgNIvwBChZJRF8xMzZfVFJBTlNfRVZFTlRfUkVQEiYKCUV2ZW50VHlwZRgB",
                  "IAEoDjITLnR1dG9yaWFsLkV2ZW50VHlwZRIYChBSZXF1ZXN0X0Jsb2NrX0lE",
                  "GAIgASgJEhYKDlJlcXVlc3RfSElEX0lEGAMgASgJEg4KBkNTVF9JRBgFIAEo",
                  "CRIbChNSZWxlYXNlX0Jsb2NrX0FkcklEGAYgASgJEhkKEVJlbGVhc2VfSElE",
                  "X0FkcklEGAcgASgJEhQKDEN1cnJlbnRBZHJJRBgIIAEoCRIUCgxDdXJyZW50",
                  "U2VjSUQYCSABKAkSFAoMU2VjX0Rpc3RhbmNlGAogASgNIoMBChpJRF8zNl9U",
                  "UkFOU19FVkVOVF9SRVNQT05TRRIpCg1Jc19CbG9ja19QYXNzGAEgASgOMhIu",
                  "dHV0b3JpYWwuUGFzc1R5cGUSJwoLSXNfSElEX1Bhc3MYAiABKA4yEi50dXRv",
                  "cmlhbC5QYXNzVHlwZRIRCglSZXBseUNvZGUYAyABKAUiVgoaSURfMzdfVFJB",
                  "TlNfQ0FOQ0VMX1JFUVVFU1QSDgoGQ21kX0lEGAEgASgJEigKB0FjdFR5cGUY",
                  "AiABKA4yFy50dXRvcmlhbC5DTURDYW5jZWxUeXBlImsKHElEXzEzN19UUkFO",
                  "U19DQU5DRUxfUkVTUE9OU0USDgoGQ21kX0lEGAEgASgJEigKB0FjdFR5cGUY",
                  "AiABKA4yFy50dXRvcmlhbC5DTURDYW5jZWxUeXBlEhEKCVJlcGx5Q29kZRgD",
                  "IAEoBSJmChNJRF8zOV9QQVVTRV9SRVFVRVNUEicKCUV2ZW50VHlwZRgBIAEo",
                  "DjIULnR1dG9yaWFsLlBhdXNlRXZlbnQSJgoJUGF1c2VUeXBlGAIgASgOMhMu",
                  "dHV0b3JpYWwuUGF1c2VUeXBlIlMKFUlEXzEzOV9QQVVTRV9SRVNQT05TRRIn",
                  "CglFdmVudFR5cGUYASABKA4yFC50dXRvcmlhbC5QYXVzZUV2ZW50EhEKCVJl",
                  "cGx5Q29kZRgCIAEoBSJLChVJRF80MV9NT0RFX0NIQU5HRV9SRVESMgoPT3Bl",
                  "cmF0aW5nVkhNb2RlGAEgASgOMhkudHV0b3JpYWwuT3BlcmF0aW5nVkhNb2Rl",
                  "IjAKG0lEXzE0MV9NT0RFX0NIQU5HRV9SRVNQT05TRRIRCglSZXBseUNvZGUY",
                  "ASABKAUiFgoUSURfNDNfU1RBVFVTX1JFUVVFU1Qi5AUKFklEXzE0M19TVEFU",
                  "VVNfUkVTUE9OU0USFAoMQ3VycmVudEFkcklEGAEgASgJEhQKDEN1cnJlbnRT",
                  "ZWNJRBgCIAEoCRIqCgpNb2RlU3RhdHVzGAMgASgOMhYudHV0b3JpYWwuVkhN",
                  "b2RlU3RhdHVzEi4KDEFjdGlvblN0YXR1cxgEIAEoDjIYLnR1dG9yaWFsLlZI",
                  "QWN0aW9uU3RhdHVzEiwKC1Bvd2VyU3RhdHVzGAUgASgOMhcudHV0b3JpYWwu",
                  "VmhQb3dlclN0YXR1cxIuCg5PYnN0YWNsZVN0YXR1cxgGIAEoDjIWLnR1dG9y",
                  "aWFsLlZoU3RvcFNpbmdsZRIuCg5CbG9ja2luZ1N0YXR1cxgHIAEoDjIWLnR1",
                  "dG9yaWFsLlZoU3RvcFNpbmdsZRIpCglISURTdGF0dXMYCCABKA4yFi50dXRv",
                  "cmlhbC5WaFN0b3BTaW5nbGUSKwoLUGF1c2VTdGF0dXMYCSABKA4yFi50dXRv",
                  "cmlhbC5WaFN0b3BTaW5nbGUSKwoLRXJyb3JTdGF0dXMYCiABKA4yFi50dXRv",
                  "cmlhbC5WaFN0b3BTaW5nbGUSFAoMU2VjX0Rpc3RhbmNlGAsgASgNEhUKDU9i",
                  "c3RfRGlzdGFuY2UYDCABKAUSFwoPT2JzdF9WZWhpY2xlX0lEGA0gASgJEhkK",
                  "EVN0b3BwZWRfQmxvY2tfSURfGA4gASgJEhYKDlN0b3BwZWRfSElEX0lEGA8g",
                  "ASgJEjYKFkVhcnRocXVha2VfUGF1c2VfdGF0dXMYECABKA4yFi50dXRvcmlh",
                  "bC5WaFN0b3BTaW5nbGUSMwoTU2FmZXR5X1BhdXNlX1N0YXR1cxgRIAEoDjIW",
                  "LnR1dG9yaWFsLlZoU3RvcFNpbmdsZRIpCgZIYXNDU1QYEiABKA4yGS50dXRv",
                  "cmlhbC5WaExvYWRDU1RTdGF0dXMSDgoGQ21kX0lEGBMgASgJEg4KBkNTVF9J",
                  "RBgUIAEoCSLmBQoYSURfMTQ0X1NUQVRVU19DSEFOR0VfUkVQEhQKDEN1cnJl",
                  "bnRBZHJJRBgBIAEoCRIUCgxDdXJyZW50U2VjSUQYAiABKAkSKgoKTW9kZVN0",
                  "YXR1cxgDIAEoDjIWLnR1dG9yaWFsLlZITW9kZVN0YXR1cxIuCgxBY3Rpb25T",
                  "dGF0dXMYBCABKA4yGC50dXRvcmlhbC5WSEFjdGlvblN0YXR1cxIsCgtQb3dl",
                  "clN0YXR1cxgFIAEoDjIXLnR1dG9yaWFsLlZoUG93ZXJTdGF0dXMSLgoOT2Jz",
                  "dGFjbGVTdGF0dXMYBiABKA4yFi50dXRvcmlhbC5WaFN0b3BTaW5nbGUSLgoO",
                  "QmxvY2tpbmdTdGF0dXMYByABKA4yFi50dXRvcmlhbC5WaFN0b3BTaW5nbGUS",
                  "KQoJSElEU3RhdHVzGAggASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEisK",
                  "C1BhdXNlU3RhdHVzGAkgASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEisK",
                  "C0Vycm9yU3RhdHVzGAogASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEhQK",
                  "DFNlY19EaXN0YW5jZRgLIAEoDRIVCg1PYnN0X0Rpc3RhbmNlGAwgASgFEhcK",
                  "D09ic3RfVmVoaWNsZV9JRBgNIAEoCRIZChFTdG9wcGVkX0Jsb2NrX0lEXxgO",
                  "IAEoCRIWCg5TdG9wcGVkX0hJRF9JRBgPIAEoCRI2ChZFYXJ0aHF1YWtlX1Bh",
                  "dXNlX3RhdHVzGBAgASgOMhYudHV0b3JpYWwuVmhTdG9wU2luZ2xlEjMKE1Nh",
                  "ZmV0eV9QYXVzZV9TdGF0dXMYESABKA4yFi50dXRvcmlhbC5WaFN0b3BTaW5n",
                  "bGUSKQoGSGFzQ1NUGBIgASgOMhkudHV0b3JpYWwuVmhMb2FkQ1NUU3RhdHVz",
                  "Eg4KBkNtZF9JRBgTIAEoCRIOCgZDU1RfSUQYFCABKAkiMQocSURfNDRfU1RB",
                  "VFVTX0NIQU5HRV9SRVNQT05TRRIRCglSZXBseUNvZGUYASABKAUiTwoTSURf",
                  "NDVfUE9XRVJfT1BFX1JFURI4ChJPcGVyYXRpbmdQb3dlck1vZGUYASABKA4y",
                  "HC50dXRvcmlhbC5PcGVyYXRpbmdQb3dlck1vZGUiLgoZSURfMTQ1X1BPV0VS",
                  "X09QRV9SRVNQT05TRRIRCglSZXBseUNvZGUYASABKAUiPgocSURfNzFfUkFO",
                  "R0VfVEVBQ0hJTkdfUkVRVUVTVBIPCgdGcm9tQWRyGAEgASgJEg0KBVRvQWRy",
                  "GAIgASgJIjMKHklEXzE3MV9SQU5HRV9URUFDSElOR19SRVNQT05TRRIRCglS",
                  "ZXBseUNvZGUYASABKAUidAolSURfMTcyX1JBTkdFX1RFQUNISU5HX0NPTVBM",
                  "RVRFX1JFUE9SVBIPCgdGcm9tQWRyGAEgASgJEg0KBVRvQWRyGAIgASgJEhQK",
                  "DFNlY19EaXN0YW5jZRgDIAEoDRIVCg1Db21wbGV0ZV9Db2RlGAQgASgFIjsK",
                  "JklEXzcyX1JBTkdFX1RFQUNISU5HX0NPTVBMRVRFX1JFU1BPTlNFEhEKCVJl",
                  "cGx5Q29kZRgBIAEoBSI9ChtJRF8xNzRfQUREUkVTU19URUFDSF9SRVBPUlQS",
                  "DAoEQWRkchgBIAEoCRIQCghQb3NpdGlvbhgCIAEoBSIxChxJRF83NF9BRERS",
                  "RVNTX1RFQUNIX1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEoBSIbChlJRF85",
                  "MV9BTEFSTV9SRVNFVF9SRVFVRVNUIjAKG0lEXzE5MV9BTEFSTV9SRVNFVF9S",
                  "RVNQT05TRRIRCglSZXBseUNvZGUYASABKAUiaAoTSURfMTk0X0FMQVJNX1JF",
                  "UE9SVBIPCgdFcnJDb2RlGAEgASgJEigKCUVyclN0YXR1cxgCIAEoDjIVLnR1",
                  "dG9yaWFsLkVycm9yU3RhdHVzEhYKDkVyckRlc2NyaXB0aW9uGAMgASgJIikK",
                  "FElEXzk0X0FMQVJNX1JFU1BPTlNFEhEKCVJlcGx5Q29kZRgBIAEoBSK4HQoO",
                  "V3JhcHBlck1lc3NhZ2USCwoCSUQY6AcgASgFEg8KBlNlcU51bRjpByABKAUS",
                  "SQoTSG9zdF9CYXNpY19JbmZvX1JlcBgBIAEoCzIqLnR1dG9yaWFsLklEXzFf",
                  "SE9TVF9CQVNJQ19JTkZPX1ZFUlNJT05fUkVQSAASUQoUSG9zdF9CYXNpY19J",
                  "bmZvX1Jlc3AYZSABKAsyMS50dXRvcmlhbC5JRF8xMDFfSE9TVF9CQVNJQ19J",
                  "TkZPX1ZFUlNJT05fUkVTUE9OU0VIABJJChZCYXNpY19JbmZvX1ZlcnNpb25f",
                  "UmVwGGYgASgLMicudHV0b3JpYWwuSURfMTAyX0JBU0lDX0lORk9fVkVSU0lP",
                  "Tl9SRVBIABJNChdCYXNpY19JbmZvX1ZlcnNpb25fUmVzcBgCIAEoCzIqLnR1",
                  "dG9yaWFsLklEXzJfQkFTSUNfSU5GT19WRVJTSU9OX1JFU1BPTlNFSAASOAoO",
                  "QmFzaWNfSW5mb19SZXAYCyABKAsyHi50dXRvcmlhbC5JRF8xMV9CQVNJQ19J",
                  "TkZPX1JFUEgAEj8KD0Jhc2ljX0luZm9fUmVzcBhvIAEoCzIkLnR1dG9yaWFs",
                  "LklEXzExMV9CQVNJQ19JTkZPX1JFU1BPTlNFSAASQAoSVGF2ZWxsaW5nX0Rh",
                  "dGFfUmVwGA0gASgLMiIudHV0b3JpYWwuSURfMTNfVEFWRUxMSU5HX0RBVEFf",
                  "UkVQSAASRwoTVGF2ZWxsaW5nX0RhdGFfUmVzcBhxIAEoCzIoLnR1dG9yaWFs",
                  "LklEXzExM19UQVZFTExJTkdfREFUQV9SRVNQT05TRUgAEjwKEFNlY3Rpb25f",
                  "RGF0YV9SZXAYDyABKAsyIC50dXRvcmlhbC5JRF8xNV9TRUNUSU9OX0RBVEFf",
                  "UkVQSAASQwoRU2VjdGlvbl9EYXRhX1Jlc3AYcyABKAsyJi50dXRvcmlhbC5J",
                  "RF8xMTVfU0VDVElPTl9EQVRBX1JFU1BPTlNFSAASPAoQQWRkcmVzc19EYXRh",
                  "X1JlcBgRIAEoCzIgLnR1dG9yaWFsLklEXzE3X0FERFJFU1NfREFUQV9SRVBI",
                  "ABJDChFBZGRyZXNzX0RhdGFfUmVzcBh1IAEoCzImLnR1dG9yaWFsLklEXzEx",
                  "N19BRERSRVNTX0RBVEFfUkVTUE9OU0VIABI4Cg5TY2FsZV9EYXRhX1JlcBgT",
                  "IAEoCzIeLnR1dG9yaWFsLklEXzE5X1NDQUxFX0RBVEFfUkVQSAASPwoPU2Nh",
                  "bGVfRGF0YV9SZXNwGHcgASgLMiQudHV0b3JpYWwuSURfMTE5X1NDQUxFX0RB",
                  "VEFfUkVTUE9OU0VIABI8ChBDb250cm9sX0RhdGFfUmVwGBUgASgLMiAudHV0",
                  "b3JpYWwuSURfMjFfQ09OVFJPTF9EQVRBX1JFUEgAEkMKEUNvbnRyb2xfRGF0",
                  "YV9SZXNwGHkgASgLMiYudHV0b3JpYWwuSURfMTIxX0NPTlRST0xfREFUQV9S",
                  "RVNQT05TRUgAEjgKDkd1aWRlX0RhdGFfUmVwGBcgASgLMh4udHV0b3JpYWwu",
                  "SURfMjNfR1VJREVfREFUQV9SRVBIABI/Cg9HdWlkZV9EYXRhX1Jlc3AYeyAB",
                  "KAsyJC50dXRvcmlhbC5JRF8xMjNfR1VJREVfREFUQV9SRVNQT05TRUgAEkYK",
                  "FUluZGl2aWR1YWxfVXBsb2FkX1JlcRg9IAEoCzIlLnR1dG9yaWFsLklEXzYx",
                  "X0lORElWSURVQUxfVVBMT0FEX1JFUUgAEk4KFkluZGl2aWR1YWxfVXBsb2Fk",
                  "X1Jlc3AYoQEgASgLMisudHV0b3JpYWwuSURfMTYxX0lORElWSURVQUxfVVBM",
                  "T0FEX1JFU1BPTlNFSAASTAoXSW5kaXZpZHVhbF9Eb3dubG9hZF9SZXEYogEg",
                  "ASgLMigudHV0b3JpYWwuSURfMTYyX0lORElWSURVQUxfRE9XTkxPQURfUkVR",
                  "SAASUAoYSW5kaXZpZHVhbF9Eb3dubG9hZF9SZXNwGD4gASgLMiwudHV0b3Jp",
                  "YWwuSURfNjJfSU5ESVZJRFVBTF9ET1dOTE9BRF9SRVNQT05TRUgAEkYKFUlu",
                  "ZGl2aWR1YWxfQ2hhbmdlX1JlcRg/IAEoCzIlLnR1dG9yaWFsLklEXzYzX0lO",
                  "RElWSURVQUxfQ0hBTkdFX1JFUUgAEk4KFkluZGl2aWR1YWxfQ2hhbmdlX1Jl",
                  "c3AYowEgASgLMisudHV0b3JpYWwuSURfMTYzX0lORElWSURVQUxfQ0hBTkdF",
                  "X1JFU1BPTlNFSAASOgoPTW9kZV9DaGFuZ2VfUmVxGCkgASgLMh8udHV0b3Jp",
                  "YWwuSURfNDFfTU9ERV9DSEFOR0VfUkVRSAASQgoQTW9kZV9DaGFuZ2VfUmVz",
                  "cBiNASABKAsyJS50dXRvcmlhbC5JRF8xNDFfTU9ERV9DSEFOR0VfUkVTUE9O",
                  "U0VIABIyCglUcmFuc19SZXEYHyABKAsyHS50dXRvcmlhbC5JRF8zMV9UUkFO",
                  "U19SRVFVRVNUSAASNgoKVHJhbnNfUmVzcBiDASABKAsyHy50dXRvcmlhbC5J",
                  "RF8xMzFfVFJBTlNfUkVTUE9OU0VIABI/CgxUcmFuX0NtcF9SZXAYhAEgASgL",
                  "MiYudHV0b3JpYWwuSURfMTMyX1RSQU5TX0NPTVBMRVRFX1JFUE9SVEgAEkAK",
                  "DVRyYW5fQ21wX1Jlc3AYICABKAsyJy50dXRvcmlhbC5JRF8zMl9UUkFOU19D",
                  "T01QTEVURV9SRVNQT05TRUgAEk8KEENvbnRyb2xfWm9uZV9SZXEYISABKAsy",
                  "My50dXRvcmlhbC5JRF8zM19DT05UUk9MX1pPTkVfUkVQVUVTVF9DQU5DRUxf",
                  "UkVRVUVTVEgAElMKEUNvbnRyb2xfWm9uZV9SZXNwGIUBIAEoCzI1LnR1dG9y",
                  "aWFsLklEXzEzM19DT05UUk9MX1pPTkVfUkVQVUVTVF9DQU5DRUxfUkVTUE9O",
                  "U0VIABJAChBUcmFuc19DYW5jZWxfUmVxGCUgASgLMiQudHV0b3JpYWwuSURf",
                  "MzdfVFJBTlNfQ0FOQ0VMX1JFUVVFU1RIABJEChFUcmFuc19DYW5jZWxfUmVz",
                  "cBiJASABKAsyJi50dXRvcmlhbC5JRF8xMzdfVFJBTlNfQ0FOQ0VMX1JFU1BP",
                  "TlNFSAASMgoJUGF1c2VfUmVxGCcgASgLMh0udHV0b3JpYWwuSURfMzlfUEFV",
                  "U0VfUkVRVUVTVEgAEjYKClBhdXNlX1Jlc3AYiwEgASgLMh8udHV0b3JpYWwu",
                  "SURfMTM5X1BBVVNFX1JFU1BPTlNFSAASPAoPVHJhbnNfRXZlbnRfUmVwGIYB",
                  "IAEoCzIgLnR1dG9yaWFsLklEXzEzNF9UUkFOU19FVkVOVF9SRVBIABJAChNJ",
                  "bXBfVHJhbnNfRXZlbnRfUmVwGIgBIAEoCzIgLnR1dG9yaWFsLklEXzEzNl9U",
                  "UkFOU19FVkVOVF9SRVBIABJEChRJbXBfVHJhbnNfRXZlbnRfUmVzcBgkIAEo",
                  "CzIkLnR1dG9yaWFsLklEXzM2X1RSQU5TX0VWRU5UX1JFU1BPTlNFSAASNAoK",
                  "U3RhdHVzX1JlcRgrIAEoCzIeLnR1dG9yaWFsLklEXzQzX1NUQVRVU19SRVFV",
                  "RVNUSAASPAoPU3RhdHVzX1JlcV9SZXNwGI8BIAEoCzIgLnR1dG9yaWFsLklE",
                  "XzE0M19TVEFUVVNfUkVTUE9OU0VIABJAChFTdGF0dWVfQ2hhbmdlX1JlcBiQ",
                  "ASABKAsyIi50dXRvcmlhbC5JRF8xNDRfU1RBVFVTX0NIQU5HRV9SRVBIABJE",
                  "ChJTdGF0dXNfQ2hhbmdlX1Jlc3AYLCABKAsyJi50dXRvcmlhbC5JRF80NF9T",
                  "VEFUVVNfQ0hBTkdFX1JFU1BPTlNFSAASNgoNUG93ZXJfT3BlX1JlcRgtIAEo",
                  "CzIdLnR1dG9yaWFsLklEXzQ1X1BPV0VSX09QRV9SRVFIABI+Cg5Qb3dlcl9P",
                  "cGVfUmVzcBiRASABKAsyIy50dXRvcmlhbC5JRF8xNDVfUE9XRVJfT1BFX1JF",
                  "U1BPTlNFSAASRAoSUmFuZ2VfVGVhY2hpbmdfUmVxGEcgASgLMiYudHV0b3Jp",
                  "YWwuSURfNzFfUkFOR0VfVEVBQ0hJTkdfUkVRVUVTVEgAEkgKE1JhbmdlX1Rl",
                  "YWNoaW5nX1Jlc3AYqwEgASgLMigudHV0b3JpYWwuSURfMTcxX1JBTkdFX1RF",
                  "QUNISU5HX1JFU1BPTlNFSAASUgoWUmFuZ2VfVGVhY2hpbmdfQ21wX1JlcBis",
                  "ASABKAsyLy50dXRvcmlhbC5JRF8xNzJfUkFOR0VfVEVBQ0hJTkdfQ09NUExF",
                  "VEVfUkVQT1JUSAASUwoXUmFuZ2VfVGVhY2hpbmdfQ21wX1Jlc3AYSCABKAsy",
                  "MC50dXRvcmlhbC5JRF83Ml9SQU5HRV9URUFDSElOR19DT01QTEVURV9SRVNQ",
                  "T05TRUgAEkMKEUFkZHJlc3NfVGVhY2hfUmVwGK4BIAEoCzIlLnR1dG9yaWFs",
                  "LklEXzE3NF9BRERSRVNTX1RFQUNIX1JFUE9SVEgAEkQKEkFkZHJlc3NfVGVh",
                  "Y2hfUmVzcBhKIAEoCzImLnR1dG9yaWFsLklEXzc0X0FERFJFU1NfVEVBQ0hf",
                  "UkVTUE9OU0VIABI+Cg9BbGFybV9SZXNldF9SZXEYWyABKAsyIy50dXRvcmlh",
                  "bC5JRF85MV9BTEFSTV9SRVNFVF9SRVFVRVNUSAASQgoQQWxhcm1fUmVzZXRf",
                  "UmVzcBi/ASABKAsyJS50dXRvcmlhbC5JRF8xOTFfQUxBUk1fUkVTRVRfUkVT",
                  "UE9OU0VIABIzCglBbGFybV9SZXAYwgEgASgLMh0udHV0b3JpYWwuSURfMTk0",
                  "X0FMQVJNX1JFUE9SVEgAEjQKCkFsYXJtX1Jlc3AYXiABKAsyHi50dXRvcmlh",
                  "bC5JRF85NF9BTEFSTV9SRVNQT05TRUgAQgUKA21zZyq6AQoKQWN0aXZlVHlw",
                  "ZRIICgRNT1ZFEAASCAoETE9BRBABEgoKBlVOTE9BRBACEg4KCkxPQURVTkxP",
                  "QUQQAxIICgRIT01FEAQSDAoIT1ZFUlJJREUQBRIPCgtDU1RJRFJFTkFNRRAG",
                  "EgsKB01UTEhPTUUQBxINCglNT1ZFVE9NVEwQChINCglTWVNURU1PVVQQCxIM",
                  "CghTWVNURU1JThAMEg8KC1RFQ0hJTkdNT1ZFEA0SCQoFUk9VTkQQYyqgAgoJ",
                  "RXZlbnRUeXBlEhAKDExvYWRBcnJpdmFscxAAEhAKDExvYWRDb21wbGV0ZRAB",
                  "EhIKDlVubG9hZEFycml2YWxzEAISEgoOVW5sb2FkQ29tcGxldGUQAxIVChFB",
                  "ZHJPck1vdmVBcnJpdmFscxAEEgsKB0FkclBhc3MQBRINCglNb3ZlUGF1c2UQ",
                  "BhIPCgtNb3ZlUmVzdGFydBAHEgwKCEJsb2NrUmVxEAgSCgoGSElEUmVxEAkS",
                  "DQoJVkhMb2FkaW5nEAsSDwoLVkhVbmxvYWRpbmcQDBISCg5WSE1vdmVBcnJp",
                  "dmFscxANEhAKDEJsb2NrUmVsZWFzZRAVEg4KCkhJRFJlbGVhc2UQFhITCg9C",
                  "bG9ja0hJRFJlbGVhc2UQFyq0AwoOQ29tcGxldGVTdGF0dXMSEQoNQ21wU3Rh",
                  "dHVzTW92ZRAAEhEKDUNtcFN0YXR1c0xvYWQQARITCg9DbXBTdGF0dXNVbmxv",
                  "YWQQAhIXChNDbXBTdGF0dXNMb2FkdW5sb2FkEAMSEQoNQ21wU3RhdHVzSG9t",
                  "ZRAEEhUKEUNtcFN0YXR1c092ZXJyaWRlEAUSGAoUQ21wU3RhdHVzQ3N0SURS",
                  "ZW5tYWUQBhIUChBDbXBTdGF0dXNNVExIb21lEAcSFgoSQ21wU3RhdHVzTW92",
                  "ZVRvTVRMEAoSFgoSQ21wU3RhdHVzU3lzdGVtT3V0EAsSFQoRQ21wU3RhdHVz",
                  "U3lzdGVtSW4QDBIYChRDbXBTdGF0dXNUZWNoaW5nTW92ZRANEhMKD0NtcFN0",
                  "YXR1c0NhbmNlbBAUEhIKDkNtcFN0YXR1c0Fib3J0EBUSGQoVQ21wU3RhdHVz",
                  "VmVoaWNsZUFib3J0EBYSFwoTQ21wU3RhdHVzSURNaXNNYXRjaBAXEhkKFUNt",
                  "cFN0YXR1c0lEUmVhZEZhaWxlZBAYEhsKF0NtcFN0YXR1c0ludGVybG9ja0Vy",
                  "cm9yEEAqLgoNQ01EQ2FuY2VsVHlwZRIOCgpDTURfQ2FuY2VsEAASDQoJQ01E",
                  "X0Fib3V0EAEqJQoKUGF1c2VFdmVudBIMCghDb250aW51ZRAAEgkKBVBhdXNl",
                  "EAEqngEKCVBhdXNlVHlwZRISCg5QYXVzZVR5cGVfTm9uZRAAEhIKDlBhdXNl",
                  "VHlwZV9PSHhDEAESEwoPUGF1c2VUeXBlX0Jsb2NrEAISEQoNUGF1c2VUeXBl",
                  "X0hJRBADEhgKFFBhdXNlVHlwZV9FYXJ0aFF1YWtlEAQSFAoQUGF1c2VUeXBl",
                  "X1NhZmV0eRAFEhEKDVBhdXNlVHlwZV9BbGwQCSolCg1WaEd1aWRlU3RhdHVz",
                  "EgoKBlVubG9jaxAAEggKBExvY2sQASofCghQYXNzVHlwZRIICgRQYXNzEAAS",
                  "CQoFQmxvY2sQASo0Cg9FX0FyZWFTZW5zb3JEaXISDAoIU3RyYWlnaHQQABII",
                  "CgRMZWZ0EAESCQoFUmlnaHQQAio7Cg9PcGVyYXRpbmdWSE1vZGUSEgoOT3Bl",
                  "cmF0aW5nX0F1dG8QABIUChBPcGVyYXRpbmdfTWFudWFsEAEqRgoLQ29udHJv",
                  "bFR5cGUSCwoHTm90aGluZxAAEhUKEUNvbnRyb2xUeXBlX0Jsb2NrEAQSEwoP",
                  "Q29udHJvbFR5cGVfSElEEAUqcgoMVkhNb2RlU3RhdHVzEggKBE5vbmUQABIV",
                  "ChFJbml0aWFsX1Bvd2VyX09GRhABEhQKEEluaXRpYWxfUG93ZXJfT04QAhIK",
                  "CgZNYW51YWwQAxIPCgtBdXRvX1JlbW90ZRAEEg4KCkF1dG9fTG9jYWwQBSpg",
                  "Cg5WSEFjdGlvblN0YXR1cxINCglOb0NvbW1hbmQQABIOCgpDb21tYW5kaW5n",
                  "EAESDAoIVGVhY2hpbmcQBRITCg9HcmlwcGVyVGVhY2hpbmcQBhIMCghDeWNs",
                  "ZVJ1bhAHKiwKDVZoUG93ZXJTdGF0dXMSDQoJUG93ZXJfT2ZmEAASDAoIUG93",
                  "ZXJfT24QASoqCg9WaExvYWRDU1RTdGF0dXMSDAoITm90RXhpc3QQABIJCgVF",
                  "eGlzdBABKjUKDFZoU3RvcFNpbmdsZRISCg5TdG9wU2luZ2xlX09mZhAAEhEK",
                  "DVN0b3BTaW5nbGVfT24QASpFChJPcGVyYXRpbmdQb3dlck1vZGUSFwoTT3Bl",
                  "cmF0aW5nX1Bvd2VyX09mZhAAEhYKEk9wZXJhdGluZ19Qb3dlcl9PbhABKikK",
                  "C0Vycm9yU3RhdHVzEg0KCUVycl9SZXNldBAAEgsKB0Vycl9TZXQQAUI9ChRj",
                  "b20uZXhhbXBsZS50dXRvcmlhbEIRQWRkcmVzc0Jvb2tQcm90b3OqAhFUY3BJ",
                  "cENsaWVudFNhbXBsZWIGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(global::TcpIpClientSample.ActiveType), typeof(global::TcpIpClientSample.EventType), typeof(global::TcpIpClientSample.CompleteStatus), typeof(global::TcpIpClientSample.CMDCancelType), typeof(global::TcpIpClientSample.PauseEvent), typeof(global::TcpIpClientSample.PauseType), typeof(global::TcpIpClientSample.VhGuideStatus), typeof(global::TcpIpClientSample.PassType), typeof(global::TcpIpClientSample.E_AreaSensorDir), typeof(global::TcpIpClientSample.OperatingVHMode), typeof(global::TcpIpClientSample.ControlType), typeof(global::TcpIpClientSample.VHModeStatus), typeof(global::TcpIpClientSample.VHActionStatus), typeof(global::TcpIpClientSample.VhPowerStatus), typeof(global::TcpIpClientSample.VhLoadCSTStatus), typeof(global::TcpIpClientSample.VhStopSingle), typeof(global::TcpIpClientSample.OperatingPowerMode), typeof(global::TcpIpClientSample.ErrorStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_1_HOST_BASIC_INFO_VERSION_REP), global::TcpIpClientSample.ID_1_HOST_BASIC_INFO_VERSION_REP.Parser, new[]{ "DataDateTimeYear", "DataDateTimeMonth", "DataDateTimeDay", "DataDateTimeHour", "DataDateTimeMinute", "DataDateTimeSecond", "CurrentTimeYear", "CurrentTimeMonth", "CurrentTimeDay", "CurrentTimeHour", "CurrentTimeMinute", "CurrentTimeSecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE), global::TcpIpClientSample.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_102_BASIC_INFO_VERSION_REP), global::TcpIpClientSample.ID_102_BASIC_INFO_VERSION_REP.Parser, new[]{ "BasicInfoVersionYear", "BasicInfoVersionMonth", "BasicInfoVersionDay", "BasicInfoVersionHour", "BasicInfoVersionMinute", "BasicInfoVersionSecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_2_BASIC_INFO_VERSION_RESPONSE), global::TcpIpClientSample.ID_2_BASIC_INFO_VERSION_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_11_BASIC_INFO_REP), global::TcpIpClientSample.ID_11_BASIC_INFO_REP.Parser, new[]{ "TravelBasicDataCount", "SectionDataCount", "AddressDataCount", "ScaleDataCount", "ContrlDataCount", "GuideDataCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_111_BASIC_INFO_RESPONSE), global::TcpIpClientSample.ID_111_BASIC_INFO_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_13_TAVELLING_DATA_REP), global::TcpIpClientSample.ID_13_TAVELLING_DATA_REP.Parser, new[]{ "Resolution", "StartStopSpd", "MaxSpeed", "AccelTime", "SCurveRate", "OriginDir", "OriginSpd", "BeaemSpd", "ManualHSpd", "ManualLSpd", "TeachingSpd", "RotateDir", "EncoderPole", "PositionCompensation", "KeepDistFar", "KeepDistNear" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_113_TAVELLING_DATA_RESPONSE), global::TcpIpClientSample.ID_113_TAVELLING_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_15_SECTION_DATA_REP), global::TcpIpClientSample.ID_15_SECTION_DATA_REP.Parser, new[]{ "Sections" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_15_SECTION_DATA_REP.Types.Section), global::TcpIpClientSample.ID_15_SECTION_DATA_REP.Types.Section.Parser, new[]{ "DriveDir", "AeraSecsor", "GuideDir", "SectionID", "FromAddr", "ToAddr", "ControlTable", "Speed", "Distance", "ChangeAreaSensor1", "ChangeGuideDir1", "ChangeSegNum1", "ChangeAreaSensor2", "ChangeGuideDir2", "ChangeSegNum2", "AtSegment" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_115_SECTION_DATA_RESPONSE), global::TcpIpClientSample.ID_115_SECTION_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP), global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP.Parser, new[]{ "Addresss" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP.Types.Address), global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP.Types.Address.Parser, new[]{ "Addr", "Resolution", "Loaction", "BlockRelease", "HIDRelease" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_117_ADDRESS_DATA_RESPONSE), global::TcpIpClientSample.ID_117_ADDRESS_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_19_SCALE_DATA_REP), global::TcpIpClientSample.ID_19_SCALE_DATA_REP.Parser, new[]{ "Resolution", "InposArea", "InposStability", "ScalePulse", "ScaleOffset", "ScaleReset", "ReadDir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_119_SCALE_DATA_RESPONSE), global::TcpIpClientSample.ID_119_SCALE_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_21_CONTROL_DATA_REP), global::TcpIpClientSample.ID_21_CONTROL_DATA_REP.Parser, new[]{ "TimeoutT1", "TimeoutT2", "TimeoutT3", "TimeoutT4", "TimeoutT5", "TimeoutT6", "TimeoutT7", "TimeoutT8", "TimeoutBlock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_121_CONTROL_DATA_RESPONSE), global::TcpIpClientSample.ID_121_CONTROL_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_23_GUIDE_DATA_REP), global::TcpIpClientSample.ID_23_GUIDE_DATA_REP.Parser, new[]{ "StartStopSpd", "MaxSpeed", "AccelTime", "SCurveRate", "NormalSpd", "ManualHSpd", "ManualLSpd", "LFLockPos", "LBLockPos", "RFLockPos", "RBLockPos", "ChangeStabilityTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_123_GUIDE_DATA_RESPONSE), global::TcpIpClientSample.ID_123_GUIDE_DATA_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_61_INDIVIDUAL_UPLOAD_REQ), global::TcpIpClientSample.ID_61_INDIVIDUAL_UPLOAD_REQ.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_161_INDIVIDUAL_UPLOAD_RESPONSE), global::TcpIpClientSample.ID_161_INDIVIDUAL_UPLOAD_RESPONSE.Parser, new[]{ "OffsetGuideFL", "OffsetGuideRL", "OffsetGuideFR", "OffsetGuideRR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_162_INDIVIDUAL_DOWNLOAD_REQ), global::TcpIpClientSample.ID_162_INDIVIDUAL_DOWNLOAD_REQ.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE), global::TcpIpClientSample.ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE.Parser, new[]{ "OffsetGuideFL", "OffsetGuideRL", "OffsetGuideFR", "OffsetGuideRR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_63_INDIVIDUAL_CHANGE_REQ), global::TcpIpClientSample.ID_63_INDIVIDUAL_CHANGE_REQ.Parser, new[]{ "OffsetGuideFL", "OffsetGuideRL", "OffsetGuideFR", "OffsetGuideRR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_163_INDIVIDUAL_CHANGE_RESPONSE), global::TcpIpClientSample.ID_163_INDIVIDUAL_CHANGE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_31_TRANS_REQUEST), global::TcpIpClientSample.ID_31_TRANS_REQUEST.Parser, new[]{ "CmdID", "ActType", "LoadAdr", "ToAdr", "SecDistance", "CSTID", "GuideSections", "GuideSegments", "CycleSections" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_131_TRANS_RESPONSE), global::TcpIpClientSample.ID_131_TRANS_RESPONSE.Parser, new[]{ "CmdID", "ActType", "ReplyCode", "NgReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_132_TRANS_COMPLETE_REPORT), global::TcpIpClientSample.ID_132_TRANS_COMPLETE_REPORT.Parser, new[]{ "CmdID", "CSTID", "CmpStatus", "CurrentAdrID", "CurrentSecID", "SecDistance", "CmdDistance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_32_TRANS_COMPLETE_RESPONSE), global::TcpIpClientSample.ID_32_TRANS_COMPLETE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST), global::TcpIpClientSample.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST.Parser, new[]{ "ControlType", "CancelSecID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE), global::TcpIpClientSample.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE.Parser, new[]{ "ControlType", "CancelSecID", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_134_TRANS_EVENT_REP), global::TcpIpClientSample.ID_134_TRANS_EVENT_REP.Parser, new[]{ "EventType", "CurrentAdrID", "CurrentSecID", "LeftGuideLockStatus", "RightGuideLockStatus", "SecDistance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_136_TRANS_EVENT_REP), global::TcpIpClientSample.ID_136_TRANS_EVENT_REP.Parser, new[]{ "EventType", "RequestBlockID", "RequestHIDID", "CSTID", "ReleaseBlockAdrID", "ReleaseHIDAdrID", "CurrentAdrID", "CurrentSecID", "SecDistance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_36_TRANS_EVENT_RESPONSE), global::TcpIpClientSample.ID_36_TRANS_EVENT_RESPONSE.Parser, new[]{ "IsBlockPass", "IsHIDPass", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_37_TRANS_CANCEL_REQUEST), global::TcpIpClientSample.ID_37_TRANS_CANCEL_REQUEST.Parser, new[]{ "CmdID", "ActType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_137_TRANS_CANCEL_RESPONSE), global::TcpIpClientSample.ID_137_TRANS_CANCEL_RESPONSE.Parser, new[]{ "CmdID", "ActType", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_39_PAUSE_REQUEST), global::TcpIpClientSample.ID_39_PAUSE_REQUEST.Parser, new[]{ "EventType", "PauseType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_139_PAUSE_RESPONSE), global::TcpIpClientSample.ID_139_PAUSE_RESPONSE.Parser, new[]{ "EventType", "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_41_MODE_CHANGE_REQ), global::TcpIpClientSample.ID_41_MODE_CHANGE_REQ.Parser, new[]{ "OperatingVHMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_141_MODE_CHANGE_RESPONSE), global::TcpIpClientSample.ID_141_MODE_CHANGE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_43_STATUS_REQUEST), global::TcpIpClientSample.ID_43_STATUS_REQUEST.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_143_STATUS_RESPONSE), global::TcpIpClientSample.ID_143_STATUS_RESPONSE.Parser, new[]{ "CurrentAdrID", "CurrentSecID", "ModeStatus", "ActionStatus", "PowerStatus", "ObstacleStatus", "BlockingStatus", "HIDStatus", "PauseStatus", "ErrorStatus", "SecDistance", "ObstDistance", "ObstVehicleID", "StoppedBlockID", "StoppedHIDID", "EarthquakePauseTatus", "SafetyPauseStatus", "HasCST", "CmdID", "CSTID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_144_STATUS_CHANGE_REP), global::TcpIpClientSample.ID_144_STATUS_CHANGE_REP.Parser, new[]{ "CurrentAdrID", "CurrentSecID", "ModeStatus", "ActionStatus", "PowerStatus", "ObstacleStatus", "BlockingStatus", "HIDStatus", "PauseStatus", "ErrorStatus", "SecDistance", "ObstDistance", "ObstVehicleID", "StoppedBlockID", "StoppedHIDID", "EarthquakePauseTatus", "SafetyPauseStatus", "HasCST", "CmdID", "CSTID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_44_STATUS_CHANGE_RESPONSE), global::TcpIpClientSample.ID_44_STATUS_CHANGE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_45_POWER_OPE_REQ), global::TcpIpClientSample.ID_45_POWER_OPE_REQ.Parser, new[]{ "OperatingPowerMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_145_POWER_OPE_RESPONSE), global::TcpIpClientSample.ID_145_POWER_OPE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_71_RANGE_TEACHING_REQUEST), global::TcpIpClientSample.ID_71_RANGE_TEACHING_REQUEST.Parser, new[]{ "FromAdr", "ToAdr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_171_RANGE_TEACHING_RESPONSE), global::TcpIpClientSample.ID_171_RANGE_TEACHING_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_172_RANGE_TEACHING_COMPLETE_REPORT), global::TcpIpClientSample.ID_172_RANGE_TEACHING_COMPLETE_REPORT.Parser, new[]{ "FromAdr", "ToAdr", "SecDistance", "CompleteCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE), global::TcpIpClientSample.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_174_ADDRESS_TEACH_REPORT), global::TcpIpClientSample.ID_174_ADDRESS_TEACH_REPORT.Parser, new[]{ "Addr", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_74_ADDRESS_TEACH_RESPONSE), global::TcpIpClientSample.ID_74_ADDRESS_TEACH_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_91_ALARM_RESET_REQUEST), global::TcpIpClientSample.ID_91_ALARM_RESET_REQUEST.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_191_ALARM_RESET_RESPONSE), global::TcpIpClientSample.ID_191_ALARM_RESET_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_194_ALARM_REPORT), global::TcpIpClientSample.ID_194_ALARM_REPORT.Parser, new[]{ "ErrCode", "ErrStatus", "ErrDescription" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.ID_94_ALARM_RESPONSE), global::TcpIpClientSample.ID_94_ALARM_RESPONSE.Parser, new[]{ "ReplyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TcpIpClientSample.WrapperMessage), global::TcpIpClientSample.WrapperMessage.Parser, new[]{ "ID", "SeqNum", "HostBasicInfoRep", "HostBasicInfoResp", "BasicInfoVersionRep", "BasicInfoVersionResp", "BasicInfoRep", "BasicInfoResp", "TavellingDataRep", "TavellingDataResp", "SectionDataRep", "SectionDataResp", "AddressDataRep", "AddressDataResp", "ScaleDataRep", "ScaleDataResp", "ControlDataRep", "ControlDataResp", "GuideDataRep", "GuideDataResp", "IndividualUploadReq", "IndividualUploadResp", "IndividualDownloadReq", "IndividualDownloadResp", "IndividualChangeReq", "IndividualChangeResp", "ModeChangeReq", "ModeChangeResp", "TransReq", "TransResp", "TranCmpRep", "TranCmpResp", "ControlZoneReq", "ControlZoneResp", "TransCancelReq", "TransCancelResp", "PauseReq", "PauseResp", "TransEventRep", "ImpTransEventRep", "ImpTransEventResp", "StatusReq", "StatusReqResp", "StatueChangeRep", "StatusChangeResp", "PowerOpeReq", "PowerOpeResp", "RangeTeachingReq", "RangeTeachingResp", "RangeTeachingCmpRep", "RangeTeachingCmpResp", "AddressTeachRep", "AddressTeachResp", "AlarmResetReq", "AlarmResetResp", "AlarmRep", "AlarmResp" }, new[]{ "Msg" }, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    public enum ActiveType
    {
        [pbr::OriginalName("MOVE")] Move = 0,
        [pbr::OriginalName("LOAD")] Load = 1,
        [pbr::OriginalName("UNLOAD")] Unload = 2,
        [pbr::OriginalName("LOADUNLOAD")] Loadunload = 3,
        [pbr::OriginalName("HOME")] Home = 4,
        [pbr::OriginalName("OVERRIDE")] Override = 5,
        [pbr::OriginalName("CSTIDRENAME")] Cstidrename = 6,
        [pbr::OriginalName("MTLHOME")] Mtlhome = 7,
        [pbr::OriginalName("MOVETOMTL")] Movetomtl = 10,
        [pbr::OriginalName("SYSTEMOUT")] Systemout = 11,
        [pbr::OriginalName("SYSTEMIN")] Systemin = 12,
        [pbr::OriginalName("TECHINGMOVE")] Techingmove = 13,
        [pbr::OriginalName("ROUND")] Round = 99,
    }

    public enum EventType
    {
        [pbr::OriginalName("LoadArrivals")] LoadArrivals = 0,
        [pbr::OriginalName("LoadComplete")] LoadComplete = 1,
        [pbr::OriginalName("UnloadArrivals")] UnloadArrivals = 2,
        [pbr::OriginalName("UnloadComplete")] UnloadComplete = 3,
        [pbr::OriginalName("AdrOrMoveArrivals")] AdrOrMoveArrivals = 4,
        [pbr::OriginalName("AdrPass")] AdrPass = 5,
        [pbr::OriginalName("MovePause")] MovePause = 6,
        [pbr::OriginalName("MoveRestart")] MoveRestart = 7,
        [pbr::OriginalName("BlockReq")] BlockReq = 8,
        [pbr::OriginalName("HIDReq")] Hidreq = 9,
        [pbr::OriginalName("VHLoading")] Vhloading = 11,
        [pbr::OriginalName("VHUnloading")] Vhunloading = 12,
        [pbr::OriginalName("VHMoveArrivals")] VhmoveArrivals = 13,
        [pbr::OriginalName("BlockRelease")] BlockRelease = 21,
        [pbr::OriginalName("HIDRelease")] Hidrelease = 22,
        [pbr::OriginalName("BlockHIDRelease")] BlockHidrelease = 23,
    }

    public enum CompleteStatus
    {
        [pbr::OriginalName("CmpStatusMove")] CmpStatusMove = 0,
        [pbr::OriginalName("CmpStatusLoad")] CmpStatusLoad = 1,
        [pbr::OriginalName("CmpStatusUnload")] CmpStatusUnload = 2,
        [pbr::OriginalName("CmpStatusLoadunload")] CmpStatusLoadunload = 3,
        [pbr::OriginalName("CmpStatusHome")] CmpStatusHome = 4,
        [pbr::OriginalName("CmpStatusOverride")] CmpStatusOverride = 5,
        [pbr::OriginalName("CmpStatusCstIDRenmae")] CmpStatusCstIdrenmae = 6,
        [pbr::OriginalName("CmpStatusMTLHome")] CmpStatusMtlhome = 7,
        [pbr::OriginalName("CmpStatusMoveToMTL")] CmpStatusMoveToMtl = 10,
        [pbr::OriginalName("CmpStatusSystemOut")] CmpStatusSystemOut = 11,
        [pbr::OriginalName("CmpStatusSystemIn")] CmpStatusSystemIn = 12,
        [pbr::OriginalName("CmpStatusTechingMove")] CmpStatusTechingMove = 13,
        [pbr::OriginalName("CmpStatusCancel")] CmpStatusCancel = 20,
        [pbr::OriginalName("CmpStatusAbort")] CmpStatusAbort = 21,
        [pbr::OriginalName("CmpStatusVehicleAbort")] CmpStatusVehicleAbort = 22,
        [pbr::OriginalName("CmpStatusIDMisMatch")] CmpStatusIdmisMatch = 23,
        [pbr::OriginalName("CmpStatusIDReadFailed")] CmpStatusIdreadFailed = 24,
        [pbr::OriginalName("CmpStatusInterlockError")] CmpStatusInterlockError = 64,
    }

    public enum CMDCancelType
    {
        [pbr::OriginalName("CMD_Cancel")] CmdCancel = 0,
        [pbr::OriginalName("CMD_About")] CmdAbout = 1,
    }

    public enum PauseEvent
    {
        [pbr::OriginalName("Continue")] Continue = 0,
        [pbr::OriginalName("Pause")] Pause = 1,
    }

    public enum PauseType
    {
        [pbr::OriginalName("PauseType_None")] None = 0,
        [pbr::OriginalName("PauseType_OHxC")] OhxC = 1,
        [pbr::OriginalName("PauseType_Block")] Block = 2,
        [pbr::OriginalName("PauseType_HID")] Hid = 3,
        [pbr::OriginalName("PauseType_EarthQuake")] EarthQuake = 4,
        [pbr::OriginalName("PauseType_Safety")] Safety = 5,
        [pbr::OriginalName("PauseType_All")] All = 9,
    }

    public enum VhGuideStatus
    {
        [pbr::OriginalName("Unlock")] Unlock = 0,
        [pbr::OriginalName("Lock")] Lock = 1,
    }

    public enum PassType
    {
        [pbr::OriginalName("Pass")] Pass = 0,
        [pbr::OriginalName("Block")] Block = 1,
    }

    public enum E_AreaSensorDir
    {
        [pbr::OriginalName("Straight")] Straight = 0,
        [pbr::OriginalName("Left")] Left = 1,
        [pbr::OriginalName("Right")] Right = 2,
    }

    public enum OperatingVHMode
    {
        [pbr::OriginalName("Operating_Auto")] OperatingAuto = 0,
        [pbr::OriginalName("Operating_Manual")] OperatingManual = 1,
    }

    public enum ControlType
    {
        [pbr::OriginalName("Nothing")] Nothing = 0,
        [pbr::OriginalName("ControlType_Block")] Block = 4,
        [pbr::OriginalName("ControlType_HID")] Hid = 5,
    }

    public enum VHModeStatus
    {
        [pbr::OriginalName("None")] None = 0,
        [pbr::OriginalName("Initial_Power_OFF")] InitialPowerOff = 1,
        [pbr::OriginalName("Initial_Power_ON")] InitialPowerOn = 2,
        [pbr::OriginalName("Manual")] Manual = 3,
        [pbr::OriginalName("Auto_Remote")] AutoRemote = 4,
        [pbr::OriginalName("Auto_Local")] AutoLocal = 5,
    }

    public enum VHActionStatus
    {
        [pbr::OriginalName("NoCommand")] NoCommand = 0,
        [pbr::OriginalName("Commanding")] Commanding = 1,
        [pbr::OriginalName("Teaching")] Teaching = 5,
        [pbr::OriginalName("GripperTeaching")] GripperTeaching = 6,
        [pbr::OriginalName("CycleRun")] CycleRun = 7,
    }

    public enum VhPowerStatus
    {
        [pbr::OriginalName("Power_Off")] PowerOff = 0,
        [pbr::OriginalName("Power_On")] PowerOn = 1,
    }

    public enum VhLoadCSTStatus
    {
        [pbr::OriginalName("NotExist")] NotExist = 0,
        [pbr::OriginalName("Exist")] Exist = 1,
    }

    public enum VhStopSingle
    {
        [pbr::OriginalName("StopSingle_Off")] StopSingleOff = 0,
        [pbr::OriginalName("StopSingle_On")] StopSingleOn = 1,
    }

    public enum OperatingPowerMode
    {
        [pbr::OriginalName("Operating_Power_Off")] OperatingPowerOff = 0,
        [pbr::OriginalName("Operating_Power_On")] OperatingPowerOn = 1,
    }

    public enum ErrorStatus
    {
        [pbr::OriginalName("Err_Reset")] ErrReset = 0,
        [pbr::OriginalName("Err_Set")] ErrSet = 1,
    }

    #endregion

    #region Messages
    public sealed partial class ID_1_HOST_BASIC_INFO_VERSION_REP : pb::IMessage<ID_1_HOST_BASIC_INFO_VERSION_REP>
    {
        private static readonly pb::MessageParser<ID_1_HOST_BASIC_INFO_VERSION_REP> _parser = new pb::MessageParser<ID_1_HOST_BASIC_INFO_VERSION_REP>(() => new ID_1_HOST_BASIC_INFO_VERSION_REP());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_1_HOST_BASIC_INFO_VERSION_REP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_1_HOST_BASIC_INFO_VERSION_REP()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_1_HOST_BASIC_INFO_VERSION_REP(ID_1_HOST_BASIC_INFO_VERSION_REP other) : this()
        {
            dataDateTimeYear_ = other.dataDateTimeYear_;
            dataDateTimeMonth_ = other.dataDateTimeMonth_;
            dataDateTimeDay_ = other.dataDateTimeDay_;
            dataDateTimeHour_ = other.dataDateTimeHour_;
            dataDateTimeMinute_ = other.dataDateTimeMinute_;
            dataDateTimeSecond_ = other.dataDateTimeSecond_;
            currentTimeYear_ = other.currentTimeYear_;
            currentTimeMonth_ = other.currentTimeMonth_;
            currentTimeDay_ = other.currentTimeDay_;
            currentTimeHour_ = other.currentTimeHour_;
            currentTimeMinute_ = other.currentTimeMinute_;
            currentTimeSecond_ = other.currentTimeSecond_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_1_HOST_BASIC_INFO_VERSION_REP Clone()
        {
            return new ID_1_HOST_BASIC_INFO_VERSION_REP(this);
        }

        /// <summary>Field number for the "DataDateTime_Year" field.</summary>
        public const int DataDateTimeYearFieldNumber = 1;
        private string dataDateTimeYear_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DataDateTimeYear
        {
            get { return dataDateTimeYear_; }
            set
            {
                dataDateTimeYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "DataDateTime_Month" field.</summary>
        public const int DataDateTimeMonthFieldNumber = 2;
        private string dataDateTimeMonth_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DataDateTimeMonth
        {
            get { return dataDateTimeMonth_; }
            set
            {
                dataDateTimeMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "DataDateTime_Day" field.</summary>
        public const int DataDateTimeDayFieldNumber = 3;
        private string dataDateTimeDay_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DataDateTimeDay
        {
            get { return dataDateTimeDay_; }
            set
            {
                dataDateTimeDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "DataDateTime_Hour" field.</summary>
        public const int DataDateTimeHourFieldNumber = 4;
        private string dataDateTimeHour_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DataDateTimeHour
        {
            get { return dataDateTimeHour_; }
            set
            {
                dataDateTimeHour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "DataDateTime_Minute" field.</summary>
        public const int DataDateTimeMinuteFieldNumber = 5;
        private string dataDateTimeMinute_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DataDateTimeMinute
        {
            get { return dataDateTimeMinute_; }
            set
            {
                dataDateTimeMinute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "DataDateTime_Second" field.</summary>
        public const int DataDateTimeSecondFieldNumber = 6;
        private string dataDateTimeSecond_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DataDateTimeSecond
        {
            get { return dataDateTimeSecond_; }
            set
            {
                dataDateTimeSecond_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CurrentTime_Year" field.</summary>
        public const int CurrentTimeYearFieldNumber = 7;
        private string currentTimeYear_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentTimeYear
        {
            get { return currentTimeYear_; }
            set
            {
                currentTimeYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CurrentTime_Month" field.</summary>
        public const int CurrentTimeMonthFieldNumber = 8;
        private string currentTimeMonth_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentTimeMonth
        {
            get { return currentTimeMonth_; }
            set
            {
                currentTimeMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CurrentTime_Day" field.</summary>
        public const int CurrentTimeDayFieldNumber = 9;
        private string currentTimeDay_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentTimeDay
        {
            get { return currentTimeDay_; }
            set
            {
                currentTimeDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CurrentTime_Hour" field.</summary>
        public const int CurrentTimeHourFieldNumber = 10;
        private string currentTimeHour_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentTimeHour
        {
            get { return currentTimeHour_; }
            set
            {
                currentTimeHour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CurrentTime_Minute" field.</summary>
        public const int CurrentTimeMinuteFieldNumber = 11;
        private string currentTimeMinute_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentTimeMinute
        {
            get { return currentTimeMinute_; }
            set
            {
                currentTimeMinute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CurrentTime_Second" field.</summary>
        public const int CurrentTimeSecondFieldNumber = 12;
        private string currentTimeSecond_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentTimeSecond
        {
            get { return currentTimeSecond_; }
            set
            {
                currentTimeSecond_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_1_HOST_BASIC_INFO_VERSION_REP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_1_HOST_BASIC_INFO_VERSION_REP other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (DataDateTimeYear != other.DataDateTimeYear) return false;
            if (DataDateTimeMonth != other.DataDateTimeMonth) return false;
            if (DataDateTimeDay != other.DataDateTimeDay) return false;
            if (DataDateTimeHour != other.DataDateTimeHour) return false;
            if (DataDateTimeMinute != other.DataDateTimeMinute) return false;
            if (DataDateTimeSecond != other.DataDateTimeSecond) return false;
            if (CurrentTimeYear != other.CurrentTimeYear) return false;
            if (CurrentTimeMonth != other.CurrentTimeMonth) return false;
            if (CurrentTimeDay != other.CurrentTimeDay) return false;
            if (CurrentTimeHour != other.CurrentTimeHour) return false;
            if (CurrentTimeMinute != other.CurrentTimeMinute) return false;
            if (CurrentTimeSecond != other.CurrentTimeSecond) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (DataDateTimeYear.Length != 0) hash ^= DataDateTimeYear.GetHashCode();
            if (DataDateTimeMonth.Length != 0) hash ^= DataDateTimeMonth.GetHashCode();
            if (DataDateTimeDay.Length != 0) hash ^= DataDateTimeDay.GetHashCode();
            if (DataDateTimeHour.Length != 0) hash ^= DataDateTimeHour.GetHashCode();
            if (DataDateTimeMinute.Length != 0) hash ^= DataDateTimeMinute.GetHashCode();
            if (DataDateTimeSecond.Length != 0) hash ^= DataDateTimeSecond.GetHashCode();
            if (CurrentTimeYear.Length != 0) hash ^= CurrentTimeYear.GetHashCode();
            if (CurrentTimeMonth.Length != 0) hash ^= CurrentTimeMonth.GetHashCode();
            if (CurrentTimeDay.Length != 0) hash ^= CurrentTimeDay.GetHashCode();
            if (CurrentTimeHour.Length != 0) hash ^= CurrentTimeHour.GetHashCode();
            if (CurrentTimeMinute.Length != 0) hash ^= CurrentTimeMinute.GetHashCode();
            if (CurrentTimeSecond.Length != 0) hash ^= CurrentTimeSecond.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (DataDateTimeYear.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(DataDateTimeYear);
            }
            if (DataDateTimeMonth.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(DataDateTimeMonth);
            }
            if (DataDateTimeDay.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(DataDateTimeDay);
            }
            if (DataDateTimeHour.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(DataDateTimeHour);
            }
            if (DataDateTimeMinute.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(DataDateTimeMinute);
            }
            if (DataDateTimeSecond.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(DataDateTimeSecond);
            }
            if (CurrentTimeYear.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteString(CurrentTimeYear);
            }
            if (CurrentTimeMonth.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteString(CurrentTimeMonth);
            }
            if (CurrentTimeDay.Length != 0)
            {
                output.WriteRawTag(74);
                output.WriteString(CurrentTimeDay);
            }
            if (CurrentTimeHour.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteString(CurrentTimeHour);
            }
            if (CurrentTimeMinute.Length != 0)
            {
                output.WriteRawTag(90);
                output.WriteString(CurrentTimeMinute);
            }
            if (CurrentTimeSecond.Length != 0)
            {
                output.WriteRawTag(98);
                output.WriteString(CurrentTimeSecond);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (DataDateTimeYear.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeYear);
            }
            if (DataDateTimeMonth.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeMonth);
            }
            if (DataDateTimeDay.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeDay);
            }
            if (DataDateTimeHour.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeHour);
            }
            if (DataDateTimeMinute.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeMinute);
            }
            if (DataDateTimeSecond.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDateTimeSecond);
            }
            if (CurrentTimeYear.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeYear);
            }
            if (CurrentTimeMonth.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeMonth);
            }
            if (CurrentTimeDay.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeDay);
            }
            if (CurrentTimeHour.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeHour);
            }
            if (CurrentTimeMinute.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeMinute);
            }
            if (CurrentTimeSecond.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentTimeSecond);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_1_HOST_BASIC_INFO_VERSION_REP other)
        {
            if (other == null)
            {
                return;
            }
            if (other.DataDateTimeYear.Length != 0)
            {
                DataDateTimeYear = other.DataDateTimeYear;
            }
            if (other.DataDateTimeMonth.Length != 0)
            {
                DataDateTimeMonth = other.DataDateTimeMonth;
            }
            if (other.DataDateTimeDay.Length != 0)
            {
                DataDateTimeDay = other.DataDateTimeDay;
            }
            if (other.DataDateTimeHour.Length != 0)
            {
                DataDateTimeHour = other.DataDateTimeHour;
            }
            if (other.DataDateTimeMinute.Length != 0)
            {
                DataDateTimeMinute = other.DataDateTimeMinute;
            }
            if (other.DataDateTimeSecond.Length != 0)
            {
                DataDateTimeSecond = other.DataDateTimeSecond;
            }
            if (other.CurrentTimeYear.Length != 0)
            {
                CurrentTimeYear = other.CurrentTimeYear;
            }
            if (other.CurrentTimeMonth.Length != 0)
            {
                CurrentTimeMonth = other.CurrentTimeMonth;
            }
            if (other.CurrentTimeDay.Length != 0)
            {
                CurrentTimeDay = other.CurrentTimeDay;
            }
            if (other.CurrentTimeHour.Length != 0)
            {
                CurrentTimeHour = other.CurrentTimeHour;
            }
            if (other.CurrentTimeMinute.Length != 0)
            {
                CurrentTimeMinute = other.CurrentTimeMinute;
            }
            if (other.CurrentTimeSecond.Length != 0)
            {
                CurrentTimeSecond = other.CurrentTimeSecond;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            DataDateTimeYear = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            DataDateTimeMonth = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            DataDateTimeDay = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            DataDateTimeHour = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            DataDateTimeMinute = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            DataDateTimeSecond = input.ReadString();
                            break;
                        }
                    case 58:
                        {
                            CurrentTimeYear = input.ReadString();
                            break;
                        }
                    case 66:
                        {
                            CurrentTimeMonth = input.ReadString();
                            break;
                        }
                    case 74:
                        {
                            CurrentTimeDay = input.ReadString();
                            break;
                        }
                    case 82:
                        {
                            CurrentTimeHour = input.ReadString();
                            break;
                        }
                    case 90:
                        {
                            CurrentTimeMinute = input.ReadString();
                            break;
                        }
                    case 98:
                        {
                            CurrentTimeSecond = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_101_HOST_BASIC_INFO_VERSION_RESPONSE : pb::IMessage<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE> _parser = new pb::MessageParser<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE>(() => new ID_101_HOST_BASIC_INFO_VERSION_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_101_HOST_BASIC_INFO_VERSION_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_101_HOST_BASIC_INFO_VERSION_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_101_HOST_BASIC_INFO_VERSION_RESPONSE(ID_101_HOST_BASIC_INFO_VERSION_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_101_HOST_BASIC_INFO_VERSION_RESPONSE Clone()
        {
            return new ID_101_HOST_BASIC_INFO_VERSION_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_101_HOST_BASIC_INFO_VERSION_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_101_HOST_BASIC_INFO_VERSION_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_101_HOST_BASIC_INFO_VERSION_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_102_BASIC_INFO_VERSION_REP : pb::IMessage<ID_102_BASIC_INFO_VERSION_REP>
    {
        private static readonly pb::MessageParser<ID_102_BASIC_INFO_VERSION_REP> _parser = new pb::MessageParser<ID_102_BASIC_INFO_VERSION_REP>(() => new ID_102_BASIC_INFO_VERSION_REP());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_102_BASIC_INFO_VERSION_REP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_102_BASIC_INFO_VERSION_REP()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_102_BASIC_INFO_VERSION_REP(ID_102_BASIC_INFO_VERSION_REP other) : this()
        {
            basicInfoVersionYear_ = other.basicInfoVersionYear_;
            basicInfoVersionMonth_ = other.basicInfoVersionMonth_;
            basicInfoVersionDay_ = other.basicInfoVersionDay_;
            basicInfoVersionHour_ = other.basicInfoVersionHour_;
            basicInfoVersionMinute_ = other.basicInfoVersionMinute_;
            basicInfoVersionSecond_ = other.basicInfoVersionSecond_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_102_BASIC_INFO_VERSION_REP Clone()
        {
            return new ID_102_BASIC_INFO_VERSION_REP(this);
        }

        /// <summary>Field number for the "BasicInfoVersion_Year" field.</summary>
        public const int BasicInfoVersionYearFieldNumber = 1;
        private string basicInfoVersionYear_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BasicInfoVersionYear
        {
            get { return basicInfoVersionYear_; }
            set
            {
                basicInfoVersionYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "BasicInfoVersion_Month" field.</summary>
        public const int BasicInfoVersionMonthFieldNumber = 2;
        private string basicInfoVersionMonth_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BasicInfoVersionMonth
        {
            get { return basicInfoVersionMonth_; }
            set
            {
                basicInfoVersionMonth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "BasicInfoVersion_Day" field.</summary>
        public const int BasicInfoVersionDayFieldNumber = 3;
        private string basicInfoVersionDay_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BasicInfoVersionDay
        {
            get { return basicInfoVersionDay_; }
            set
            {
                basicInfoVersionDay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "BasicInfoVersion_Hour" field.</summary>
        public const int BasicInfoVersionHourFieldNumber = 4;
        private string basicInfoVersionHour_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BasicInfoVersionHour
        {
            get { return basicInfoVersionHour_; }
            set
            {
                basicInfoVersionHour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "BasicInfoVersion_Minute" field.</summary>
        public const int BasicInfoVersionMinuteFieldNumber = 5;
        private string basicInfoVersionMinute_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BasicInfoVersionMinute
        {
            get { return basicInfoVersionMinute_; }
            set
            {
                basicInfoVersionMinute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "BasicInfoVersion_Second" field.</summary>
        public const int BasicInfoVersionSecondFieldNumber = 6;
        private string basicInfoVersionSecond_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BasicInfoVersionSecond
        {
            get { return basicInfoVersionSecond_; }
            set
            {
                basicInfoVersionSecond_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_102_BASIC_INFO_VERSION_REP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_102_BASIC_INFO_VERSION_REP other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (BasicInfoVersionYear != other.BasicInfoVersionYear) return false;
            if (BasicInfoVersionMonth != other.BasicInfoVersionMonth) return false;
            if (BasicInfoVersionDay != other.BasicInfoVersionDay) return false;
            if (BasicInfoVersionHour != other.BasicInfoVersionHour) return false;
            if (BasicInfoVersionMinute != other.BasicInfoVersionMinute) return false;
            if (BasicInfoVersionSecond != other.BasicInfoVersionSecond) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (BasicInfoVersionYear.Length != 0) hash ^= BasicInfoVersionYear.GetHashCode();
            if (BasicInfoVersionMonth.Length != 0) hash ^= BasicInfoVersionMonth.GetHashCode();
            if (BasicInfoVersionDay.Length != 0) hash ^= BasicInfoVersionDay.GetHashCode();
            if (BasicInfoVersionHour.Length != 0) hash ^= BasicInfoVersionHour.GetHashCode();
            if (BasicInfoVersionMinute.Length != 0) hash ^= BasicInfoVersionMinute.GetHashCode();
            if (BasicInfoVersionSecond.Length != 0) hash ^= BasicInfoVersionSecond.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (BasicInfoVersionYear.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(BasicInfoVersionYear);
            }
            if (BasicInfoVersionMonth.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(BasicInfoVersionMonth);
            }
            if (BasicInfoVersionDay.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(BasicInfoVersionDay);
            }
            if (BasicInfoVersionHour.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(BasicInfoVersionHour);
            }
            if (BasicInfoVersionMinute.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(BasicInfoVersionMinute);
            }
            if (BasicInfoVersionSecond.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(BasicInfoVersionSecond);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (BasicInfoVersionYear.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionYear);
            }
            if (BasicInfoVersionMonth.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionMonth);
            }
            if (BasicInfoVersionDay.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionDay);
            }
            if (BasicInfoVersionHour.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionHour);
            }
            if (BasicInfoVersionMinute.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionMinute);
            }
            if (BasicInfoVersionSecond.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicInfoVersionSecond);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_102_BASIC_INFO_VERSION_REP other)
        {
            if (other == null)
            {
                return;
            }
            if (other.BasicInfoVersionYear.Length != 0)
            {
                BasicInfoVersionYear = other.BasicInfoVersionYear;
            }
            if (other.BasicInfoVersionMonth.Length != 0)
            {
                BasicInfoVersionMonth = other.BasicInfoVersionMonth;
            }
            if (other.BasicInfoVersionDay.Length != 0)
            {
                BasicInfoVersionDay = other.BasicInfoVersionDay;
            }
            if (other.BasicInfoVersionHour.Length != 0)
            {
                BasicInfoVersionHour = other.BasicInfoVersionHour;
            }
            if (other.BasicInfoVersionMinute.Length != 0)
            {
                BasicInfoVersionMinute = other.BasicInfoVersionMinute;
            }
            if (other.BasicInfoVersionSecond.Length != 0)
            {
                BasicInfoVersionSecond = other.BasicInfoVersionSecond;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            BasicInfoVersionYear = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            BasicInfoVersionMonth = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            BasicInfoVersionDay = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            BasicInfoVersionHour = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            BasicInfoVersionMinute = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            BasicInfoVersionSecond = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_2_BASIC_INFO_VERSION_RESPONSE : pb::IMessage<ID_2_BASIC_INFO_VERSION_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_2_BASIC_INFO_VERSION_RESPONSE> _parser = new pb::MessageParser<ID_2_BASIC_INFO_VERSION_RESPONSE>(() => new ID_2_BASIC_INFO_VERSION_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_2_BASIC_INFO_VERSION_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_2_BASIC_INFO_VERSION_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_2_BASIC_INFO_VERSION_RESPONSE(ID_2_BASIC_INFO_VERSION_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_2_BASIC_INFO_VERSION_RESPONSE Clone()
        {
            return new ID_2_BASIC_INFO_VERSION_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_2_BASIC_INFO_VERSION_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_2_BASIC_INFO_VERSION_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_2_BASIC_INFO_VERSION_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_11_BASIC_INFO_REP : pb::IMessage<ID_11_BASIC_INFO_REP>
    {
        private static readonly pb::MessageParser<ID_11_BASIC_INFO_REP> _parser = new pb::MessageParser<ID_11_BASIC_INFO_REP>(() => new ID_11_BASIC_INFO_REP());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_11_BASIC_INFO_REP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_11_BASIC_INFO_REP()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_11_BASIC_INFO_REP(ID_11_BASIC_INFO_REP other) : this()
        {
            travelBasicDataCount_ = other.travelBasicDataCount_;
            sectionDataCount_ = other.sectionDataCount_;
            addressDataCount_ = other.addressDataCount_;
            scaleDataCount_ = other.scaleDataCount_;
            contrlDataCount_ = other.contrlDataCount_;
            guideDataCount_ = other.guideDataCount_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_11_BASIC_INFO_REP Clone()
        {
            return new ID_11_BASIC_INFO_REP(this);
        }

        /// <summary>Field number for the "TravelBasicDataCount" field.</summary>
        public const int TravelBasicDataCountFieldNumber = 1;
        private int travelBasicDataCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TravelBasicDataCount
        {
            get { return travelBasicDataCount_; }
            set
            {
                travelBasicDataCount_ = value;
            }
        }

        /// <summary>Field number for the "SectionDataCount" field.</summary>
        public const int SectionDataCountFieldNumber = 2;
        private int sectionDataCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SectionDataCount
        {
            get { return sectionDataCount_; }
            set
            {
                sectionDataCount_ = value;
            }
        }

        /// <summary>Field number for the "AddressDataCount" field.</summary>
        public const int AddressDataCountFieldNumber = 3;
        private int addressDataCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AddressDataCount
        {
            get { return addressDataCount_; }
            set
            {
                addressDataCount_ = value;
            }
        }

        /// <summary>Field number for the "ScaleDataCount" field.</summary>
        public const int ScaleDataCountFieldNumber = 4;
        private int scaleDataCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ScaleDataCount
        {
            get { return scaleDataCount_; }
            set
            {
                scaleDataCount_ = value;
            }
        }

        /// <summary>Field number for the "ContrlDataCount" field.</summary>
        public const int ContrlDataCountFieldNumber = 5;
        private int contrlDataCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ContrlDataCount
        {
            get { return contrlDataCount_; }
            set
            {
                contrlDataCount_ = value;
            }
        }

        /// <summary>Field number for the "GuideDataCount" field.</summary>
        public const int GuideDataCountFieldNumber = 6;
        private int guideDataCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GuideDataCount
        {
            get { return guideDataCount_; }
            set
            {
                guideDataCount_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_11_BASIC_INFO_REP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_11_BASIC_INFO_REP other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TravelBasicDataCount != other.TravelBasicDataCount) return false;
            if (SectionDataCount != other.SectionDataCount) return false;
            if (AddressDataCount != other.AddressDataCount) return false;
            if (ScaleDataCount != other.ScaleDataCount) return false;
            if (ContrlDataCount != other.ContrlDataCount) return false;
            if (GuideDataCount != other.GuideDataCount) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TravelBasicDataCount != 0) hash ^= TravelBasicDataCount.GetHashCode();
            if (SectionDataCount != 0) hash ^= SectionDataCount.GetHashCode();
            if (AddressDataCount != 0) hash ^= AddressDataCount.GetHashCode();
            if (ScaleDataCount != 0) hash ^= ScaleDataCount.GetHashCode();
            if (ContrlDataCount != 0) hash ^= ContrlDataCount.GetHashCode();
            if (GuideDataCount != 0) hash ^= GuideDataCount.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TravelBasicDataCount != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(TravelBasicDataCount);
            }
            if (SectionDataCount != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(SectionDataCount);
            }
            if (AddressDataCount != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(AddressDataCount);
            }
            if (ScaleDataCount != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(ScaleDataCount);
            }
            if (ContrlDataCount != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(ContrlDataCount);
            }
            if (GuideDataCount != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(GuideDataCount);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TravelBasicDataCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TravelBasicDataCount);
            }
            if (SectionDataCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SectionDataCount);
            }
            if (AddressDataCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddressDataCount);
            }
            if (ScaleDataCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScaleDataCount);
            }
            if (ContrlDataCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContrlDataCount);
            }
            if (GuideDataCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuideDataCount);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_11_BASIC_INFO_REP other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TravelBasicDataCount != 0)
            {
                TravelBasicDataCount = other.TravelBasicDataCount;
            }
            if (other.SectionDataCount != 0)
            {
                SectionDataCount = other.SectionDataCount;
            }
            if (other.AddressDataCount != 0)
            {
                AddressDataCount = other.AddressDataCount;
            }
            if (other.ScaleDataCount != 0)
            {
                ScaleDataCount = other.ScaleDataCount;
            }
            if (other.ContrlDataCount != 0)
            {
                ContrlDataCount = other.ContrlDataCount;
            }
            if (other.GuideDataCount != 0)
            {
                GuideDataCount = other.GuideDataCount;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            TravelBasicDataCount = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            SectionDataCount = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            AddressDataCount = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            ScaleDataCount = input.ReadInt32();
                            break;
                        }
                    case 40:
                        {
                            ContrlDataCount = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            GuideDataCount = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_111_BASIC_INFO_RESPONSE : pb::IMessage<ID_111_BASIC_INFO_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_111_BASIC_INFO_RESPONSE> _parser = new pb::MessageParser<ID_111_BASIC_INFO_RESPONSE>(() => new ID_111_BASIC_INFO_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_111_BASIC_INFO_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_111_BASIC_INFO_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_111_BASIC_INFO_RESPONSE(ID_111_BASIC_INFO_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_111_BASIC_INFO_RESPONSE Clone()
        {
            return new ID_111_BASIC_INFO_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_111_BASIC_INFO_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_111_BASIC_INFO_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_111_BASIC_INFO_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_13_TAVELLING_DATA_REP : pb::IMessage<ID_13_TAVELLING_DATA_REP>
    {
        private static readonly pb::MessageParser<ID_13_TAVELLING_DATA_REP> _parser = new pb::MessageParser<ID_13_TAVELLING_DATA_REP>(() => new ID_13_TAVELLING_DATA_REP());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_13_TAVELLING_DATA_REP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_13_TAVELLING_DATA_REP()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_13_TAVELLING_DATA_REP(ID_13_TAVELLING_DATA_REP other) : this()
        {
            resolution_ = other.resolution_;
            startStopSpd_ = other.startStopSpd_;
            maxSpeed_ = other.maxSpeed_;
            accelTime_ = other.accelTime_;
            sCurveRate_ = other.sCurveRate_;
            originDir_ = other.originDir_;
            originSpd_ = other.originSpd_;
            beaemSpd_ = other.beaemSpd_;
            manualHSpd_ = other.manualHSpd_;
            manualLSpd_ = other.manualLSpd_;
            teachingSpd_ = other.teachingSpd_;
            rotateDir_ = other.rotateDir_;
            encoderPole_ = other.encoderPole_;
            positionCompensation_ = other.positionCompensation_;
            keepDistFar_ = other.keepDistFar_;
            keepDistNear_ = other.keepDistNear_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_13_TAVELLING_DATA_REP Clone()
        {
            return new ID_13_TAVELLING_DATA_REP(this);
        }

        /// <summary>Field number for the "Resolution" field.</summary>
        public const int ResolutionFieldNumber = 1;
        private uint resolution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Resolution
        {
            get { return resolution_; }
            set
            {
                resolution_ = value;
            }
        }

        /// <summary>Field number for the "StartStopSpd" field.</summary>
        public const int StartStopSpdFieldNumber = 2;
        private uint startStopSpd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StartStopSpd
        {
            get { return startStopSpd_; }
            set
            {
                startStopSpd_ = value;
            }
        }

        /// <summary>Field number for the "MaxSpeed" field.</summary>
        public const int MaxSpeedFieldNumber = 3;
        private uint maxSpeed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxSpeed
        {
            get { return maxSpeed_; }
            set
            {
                maxSpeed_ = value;
            }
        }

        /// <summary>Field number for the "AccelTime" field.</summary>
        public const int AccelTimeFieldNumber = 4;
        private uint accelTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccelTime
        {
            get { return accelTime_; }
            set
            {
                accelTime_ = value;
            }
        }

        /// <summary>Field number for the "SCurveRate" field.</summary>
        public const int SCurveRateFieldNumber = 5;
        private int sCurveRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SCurveRate
        {
            get { return sCurveRate_; }
            set
            {
                sCurveRate_ = value;
            }
        }

        /// <summary>Field number for the "OriginDir" field.</summary>
        public const int OriginDirFieldNumber = 6;
        private int originDir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int OriginDir
        {
            get { return originDir_; }
            set
            {
                originDir_ = value;
            }
        }

        /// <summary>Field number for the "OriginSpd" field.</summary>
        public const int OriginSpdFieldNumber = 7;
        private uint originSpd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OriginSpd
        {
            get { return originSpd_; }
            set
            {
                originSpd_ = value;
            }
        }

        /// <summary>Field number for the "BeaemSpd" field.</summary>
        public const int BeaemSpdFieldNumber = 8;
        private uint beaemSpd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint BeaemSpd
        {
            get { return beaemSpd_; }
            set
            {
                beaemSpd_ = value;
            }
        }

        /// <summary>Field number for the "ManualHSpd" field.</summary>
        public const int ManualHSpdFieldNumber = 9;
        private uint manualHSpd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ManualHSpd
        {
            get { return manualHSpd_; }
            set
            {
                manualHSpd_ = value;
            }
        }

        /// <summary>Field number for the "ManualLSpd" field.</summary>
        public const int ManualLSpdFieldNumber = 10;
        private uint manualLSpd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ManualLSpd
        {
            get { return manualLSpd_; }
            set
            {
                manualLSpd_ = value;
            }
        }

        /// <summary>Field number for the "TeachingSpd" field.</summary>
        public const int TeachingSpdFieldNumber = 11;
        private uint teachingSpd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TeachingSpd
        {
            get { return teachingSpd_; }
            set
            {
                teachingSpd_ = value;
            }
        }

        /// <summary>Field number for the "RotateDir" field.</summary>
        public const int RotateDirFieldNumber = 12;
        private int rotateDir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RotateDir
        {
            get { return rotateDir_; }
            set
            {
                rotateDir_ = value;
            }
        }

        /// <summary>Field number for the "EncoderPole" field.</summary>
        public const int EncoderPoleFieldNumber = 13;
        private int encoderPole_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EncoderPole
        {
            get { return encoderPole_; }
            set
            {
                encoderPole_ = value;
            }
        }

        /// <summary>Field number for the "PositionCompensation" field.</summary>
        public const int PositionCompensationFieldNumber = 14;
        private uint positionCompensation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PositionCompensation
        {
            get { return positionCompensation_; }
            set
            {
                positionCompensation_ = value;
            }
        }

        /// <summary>Field number for the "KeepDistFar" field.</summary>
        public const int KeepDistFarFieldNumber = 15;
        private uint keepDistFar_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint KeepDistFar
        {
            get { return keepDistFar_; }
            set
            {
                keepDistFar_ = value;
            }
        }

        /// <summary>Field number for the "KeepDistNear" field.</summary>
        public const int KeepDistNearFieldNumber = 16;
        private uint keepDistNear_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint KeepDistNear
        {
            get { return keepDistNear_; }
            set
            {
                keepDistNear_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_13_TAVELLING_DATA_REP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_13_TAVELLING_DATA_REP other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Resolution != other.Resolution) return false;
            if (StartStopSpd != other.StartStopSpd) return false;
            if (MaxSpeed != other.MaxSpeed) return false;
            if (AccelTime != other.AccelTime) return false;
            if (SCurveRate != other.SCurveRate) return false;
            if (OriginDir != other.OriginDir) return false;
            if (OriginSpd != other.OriginSpd) return false;
            if (BeaemSpd != other.BeaemSpd) return false;
            if (ManualHSpd != other.ManualHSpd) return false;
            if (ManualLSpd != other.ManualLSpd) return false;
            if (TeachingSpd != other.TeachingSpd) return false;
            if (RotateDir != other.RotateDir) return false;
            if (EncoderPole != other.EncoderPole) return false;
            if (PositionCompensation != other.PositionCompensation) return false;
            if (KeepDistFar != other.KeepDistFar) return false;
            if (KeepDistNear != other.KeepDistNear) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Resolution != 0) hash ^= Resolution.GetHashCode();
            if (StartStopSpd != 0) hash ^= StartStopSpd.GetHashCode();
            if (MaxSpeed != 0) hash ^= MaxSpeed.GetHashCode();
            if (AccelTime != 0) hash ^= AccelTime.GetHashCode();
            if (SCurveRate != 0) hash ^= SCurveRate.GetHashCode();
            if (OriginDir != 0) hash ^= OriginDir.GetHashCode();
            if (OriginSpd != 0) hash ^= OriginSpd.GetHashCode();
            if (BeaemSpd != 0) hash ^= BeaemSpd.GetHashCode();
            if (ManualHSpd != 0) hash ^= ManualHSpd.GetHashCode();
            if (ManualLSpd != 0) hash ^= ManualLSpd.GetHashCode();
            if (TeachingSpd != 0) hash ^= TeachingSpd.GetHashCode();
            if (RotateDir != 0) hash ^= RotateDir.GetHashCode();
            if (EncoderPole != 0) hash ^= EncoderPole.GetHashCode();
            if (PositionCompensation != 0) hash ^= PositionCompensation.GetHashCode();
            if (KeepDistFar != 0) hash ^= KeepDistFar.GetHashCode();
            if (KeepDistNear != 0) hash ^= KeepDistNear.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Resolution != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Resolution);
            }
            if (StartStopSpd != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(StartStopSpd);
            }
            if (MaxSpeed != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(MaxSpeed);
            }
            if (AccelTime != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(AccelTime);
            }
            if (SCurveRate != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(SCurveRate);
            }
            if (OriginDir != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(OriginDir);
            }
            if (OriginSpd != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(OriginSpd);
            }
            if (BeaemSpd != 0)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(BeaemSpd);
            }
            if (ManualHSpd != 0)
            {
                output.WriteRawTag(72);
                output.WriteUInt32(ManualHSpd);
            }
            if (ManualLSpd != 0)
            {
                output.WriteRawTag(80);
                output.WriteUInt32(ManualLSpd);
            }
            if (TeachingSpd != 0)
            {
                output.WriteRawTag(88);
                output.WriteUInt32(TeachingSpd);
            }
            if (RotateDir != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(RotateDir);
            }
            if (EncoderPole != 0)
            {
                output.WriteRawTag(104);
                output.WriteInt32(EncoderPole);
            }
            if (PositionCompensation != 0)
            {
                output.WriteRawTag(112);
                output.WriteUInt32(PositionCompensation);
            }
            if (KeepDistFar != 0)
            {
                output.WriteRawTag(120);
                output.WriteUInt32(KeepDistFar);
            }
            if (KeepDistNear != 0)
            {
                output.WriteRawTag(128, 1);
                output.WriteUInt32(KeepDistNear);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Resolution != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resolution);
            }
            if (StartStopSpd != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartStopSpd);
            }
            if (MaxSpeed != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSpeed);
            }
            if (AccelTime != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccelTime);
            }
            if (SCurveRate != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SCurveRate);
            }
            if (OriginDir != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginDir);
            }
            if (OriginSpd != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginSpd);
            }
            if (BeaemSpd != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeaemSpd);
            }
            if (ManualHSpd != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualHSpd);
            }
            if (ManualLSpd != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualLSpd);
            }
            if (TeachingSpd != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeachingSpd);
            }
            if (RotateDir != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(RotateDir);
            }
            if (EncoderPole != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncoderPole);
            }
            if (PositionCompensation != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionCompensation);
            }
            if (KeepDistFar != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeepDistFar);
            }
            if (KeepDistNear != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KeepDistNear);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_13_TAVELLING_DATA_REP other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Resolution != 0)
            {
                Resolution = other.Resolution;
            }
            if (other.StartStopSpd != 0)
            {
                StartStopSpd = other.StartStopSpd;
            }
            if (other.MaxSpeed != 0)
            {
                MaxSpeed = other.MaxSpeed;
            }
            if (other.AccelTime != 0)
            {
                AccelTime = other.AccelTime;
            }
            if (other.SCurveRate != 0)
            {
                SCurveRate = other.SCurveRate;
            }
            if (other.OriginDir != 0)
            {
                OriginDir = other.OriginDir;
            }
            if (other.OriginSpd != 0)
            {
                OriginSpd = other.OriginSpd;
            }
            if (other.BeaemSpd != 0)
            {
                BeaemSpd = other.BeaemSpd;
            }
            if (other.ManualHSpd != 0)
            {
                ManualHSpd = other.ManualHSpd;
            }
            if (other.ManualLSpd != 0)
            {
                ManualLSpd = other.ManualLSpd;
            }
            if (other.TeachingSpd != 0)
            {
                TeachingSpd = other.TeachingSpd;
            }
            if (other.RotateDir != 0)
            {
                RotateDir = other.RotateDir;
            }
            if (other.EncoderPole != 0)
            {
                EncoderPole = other.EncoderPole;
            }
            if (other.PositionCompensation != 0)
            {
                PositionCompensation = other.PositionCompensation;
            }
            if (other.KeepDistFar != 0)
            {
                KeepDistFar = other.KeepDistFar;
            }
            if (other.KeepDistNear != 0)
            {
                KeepDistNear = other.KeepDistNear;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            Resolution = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            StartStopSpd = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            MaxSpeed = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            AccelTime = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            SCurveRate = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            OriginDir = input.ReadInt32();
                            break;
                        }
                    case 56:
                        {
                            OriginSpd = input.ReadUInt32();
                            break;
                        }
                    case 64:
                        {
                            BeaemSpd = input.ReadUInt32();
                            break;
                        }
                    case 72:
                        {
                            ManualHSpd = input.ReadUInt32();
                            break;
                        }
                    case 80:
                        {
                            ManualLSpd = input.ReadUInt32();
                            break;
                        }
                    case 88:
                        {
                            TeachingSpd = input.ReadUInt32();
                            break;
                        }
                    case 96:
                        {
                            RotateDir = input.ReadInt32();
                            break;
                        }
                    case 104:
                        {
                            EncoderPole = input.ReadInt32();
                            break;
                        }
                    case 112:
                        {
                            PositionCompensation = input.ReadUInt32();
                            break;
                        }
                    case 120:
                        {
                            KeepDistFar = input.ReadUInt32();
                            break;
                        }
                    case 128:
                        {
                            KeepDistNear = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_113_TAVELLING_DATA_RESPONSE : pb::IMessage<ID_113_TAVELLING_DATA_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_113_TAVELLING_DATA_RESPONSE> _parser = new pb::MessageParser<ID_113_TAVELLING_DATA_RESPONSE>(() => new ID_113_TAVELLING_DATA_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_113_TAVELLING_DATA_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_113_TAVELLING_DATA_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_113_TAVELLING_DATA_RESPONSE(ID_113_TAVELLING_DATA_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_113_TAVELLING_DATA_RESPONSE Clone()
        {
            return new ID_113_TAVELLING_DATA_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_113_TAVELLING_DATA_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_113_TAVELLING_DATA_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_113_TAVELLING_DATA_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_15_SECTION_DATA_REP : pb::IMessage<ID_15_SECTION_DATA_REP>
    {
        private static readonly pb::MessageParser<ID_15_SECTION_DATA_REP> _parser = new pb::MessageParser<ID_15_SECTION_DATA_REP>(() => new ID_15_SECTION_DATA_REP());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_15_SECTION_DATA_REP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_15_SECTION_DATA_REP()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_15_SECTION_DATA_REP(ID_15_SECTION_DATA_REP other) : this()
        {
            sections_ = other.sections_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_15_SECTION_DATA_REP Clone()
        {
            return new ID_15_SECTION_DATA_REP(this);
        }

        /// <summary>Field number for the "Sections" field.</summary>
        public const int SectionsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::TcpIpClientSample.ID_15_SECTION_DATA_REP.Types.Section> _repeated_sections_codec
            = pb::FieldCodec.ForMessage(10, global::TcpIpClientSample.ID_15_SECTION_DATA_REP.Types.Section.Parser);
        private readonly pbc::RepeatedField<global::TcpIpClientSample.ID_15_SECTION_DATA_REP.Types.Section> sections_ = new pbc::RepeatedField<global::TcpIpClientSample.ID_15_SECTION_DATA_REP.Types.Section>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::TcpIpClientSample.ID_15_SECTION_DATA_REP.Types.Section> Sections
        {
            get { return sections_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_15_SECTION_DATA_REP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_15_SECTION_DATA_REP other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!sections_.Equals(other.sections_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= sections_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            sections_.WriteTo(output, _repeated_sections_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += sections_.CalculateSize(_repeated_sections_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_15_SECTION_DATA_REP other)
        {
            if (other == null)
            {
                return;
            }
            sections_.Add(other.sections_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            sections_.AddEntriesFrom(input, _repeated_sections_codec);
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ID_15_SECTION_DATA_REP message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class Section : pb::IMessage<Section>
            {
                private static readonly pb::MessageParser<Section> _parser = new pb::MessageParser<Section>(() => new Section());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Section> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::TcpIpClientSample.ID_15_SECTION_DATA_REP.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Section()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Section(Section other) : this()
                {
                    driveDir_ = other.driveDir_;
                    aeraSecsor_ = other.aeraSecsor_;
                    guideDir_ = other.guideDir_;
                    sectionID_ = other.sectionID_;
                    fromAddr_ = other.fromAddr_;
                    toAddr_ = other.toAddr_;
                    controlTable_ = other.controlTable_;
                    speed_ = other.speed_;
                    distance_ = other.distance_;
                    changeAreaSensor1_ = other.changeAreaSensor1_;
                    changeGuideDir1_ = other.changeGuideDir1_;
                    changeSegNum1_ = other.changeSegNum1_;
                    changeAreaSensor2_ = other.changeAreaSensor2_;
                    changeGuideDir2_ = other.changeGuideDir2_;
                    changeSegNum2_ = other.changeSegNum2_;
                    atSegment_ = other.atSegment_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Section Clone()
                {
                    return new Section(this);
                }

                /// <summary>Field number for the "DriveDir" field.</summary>
                public const int DriveDirFieldNumber = 1;
                private int driveDir_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int DriveDir
                {
                    get { return driveDir_; }
                    set
                    {
                        driveDir_ = value;
                    }
                }

                /// <summary>Field number for the "AeraSecsor" field.</summary>
                public const int AeraSecsorFieldNumber = 2;
                private int aeraSecsor_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int AeraSecsor
                {
                    get { return aeraSecsor_; }
                    set
                    {
                        aeraSecsor_ = value;
                    }
                }

                /// <summary>Field number for the "GuideDir" field.</summary>
                public const int GuideDirFieldNumber = 3;
                private int guideDir_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int GuideDir
                {
                    get { return guideDir_; }
                    set
                    {
                        guideDir_ = value;
                    }
                }

                /// <summary>Field number for the "SectionID" field.</summary>
                public const int SectionIDFieldNumber = 4;
                private string sectionID_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string SectionID
                {
                    get { return sectionID_; }
                    set
                    {
                        sectionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "FromAddr" field.</summary>
                public const int FromAddrFieldNumber = 5;
                private string fromAddr_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string FromAddr
                {
                    get { return fromAddr_; }
                    set
                    {
                        fromAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "ToAddr" field.</summary>
                public const int ToAddrFieldNumber = 6;
                private string toAddr_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string ToAddr
                {
                    get { return toAddr_; }
                    set
                    {
                        toAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "ControlTable" field.</summary>
                public const int ControlTableFieldNumber = 7;
                private int controlTable_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int ControlTable
                {
                    get { return controlTable_; }
                    set
                    {
                        controlTable_ = value;
                    }
                }

                /// <summary>Field number for the "Speed" field.</summary>
                public const int SpeedFieldNumber = 9;
                private int speed_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int Speed
                {
                    get { return speed_; }
                    set
                    {
                        speed_ = value;
                    }
                }

                /// <summary>Field number for the "Distance" field.</summary>
                public const int DistanceFieldNumber = 10;
                private int distance_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int Distance
                {
                    get { return distance_; }
                    set
                    {
                        distance_ = value;
                    }
                }

                /// <summary>Field number for the "ChangeAreaSensor1" field.</summary>
                public const int ChangeAreaSensor1FieldNumber = 11;
                private int changeAreaSensor1_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int ChangeAreaSensor1
                {
                    get { return changeAreaSensor1_; }
                    set
                    {
                        changeAreaSensor1_ = value;
                    }
                }

                /// <summary>Field number for the "ChangeGuideDir1" field.</summary>
                public const int ChangeGuideDir1FieldNumber = 12;
                private int changeGuideDir1_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int ChangeGuideDir1
                {
                    get { return changeGuideDir1_; }
                    set
                    {
                        changeGuideDir1_ = value;
                    }
                }

                /// <summary>Field number for the "ChangeSegNum1" field.</summary>
                public const int ChangeSegNum1FieldNumber = 13;
                private string changeSegNum1_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string ChangeSegNum1
                {
                    get { return changeSegNum1_; }
                    set
                    {
                        changeSegNum1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "ChangeAreaSensor2" field.</summary>
                public const int ChangeAreaSensor2FieldNumber = 14;
                private int changeAreaSensor2_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int ChangeAreaSensor2
                {
                    get { return changeAreaSensor2_; }
                    set
                    {
                        changeAreaSensor2_ = value;
                    }
                }

                /// <summary>Field number for the "ChangeGuideDir2" field.</summary>
                public const int ChangeGuideDir2FieldNumber = 15;
                private int changeGuideDir2_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int ChangeGuideDir2
                {
                    get { return changeGuideDir2_; }
                    set
                    {
                        changeGuideDir2_ = value;
                    }
                }

                /// <summary>Field number for the "ChangeSegNum2" field.</summary>
                public const int ChangeSegNum2FieldNumber = 16;
                private string changeSegNum2_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string ChangeSegNum2
                {
                    get { return changeSegNum2_; }
                    set
                    {
                        changeSegNum2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "AtSegment" field.</summary>
                public const int AtSegmentFieldNumber = 17;
                private string atSegment_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string AtSegment
                {
                    get { return atSegment_; }
                    set
                    {
                        atSegment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Section);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Section other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (DriveDir != other.DriveDir) return false;
                    if (AeraSecsor != other.AeraSecsor) return false;
                    if (GuideDir != other.GuideDir) return false;
                    if (SectionID != other.SectionID) return false;
                    if (FromAddr != other.FromAddr) return false;
                    if (ToAddr != other.ToAddr) return false;
                    if (ControlTable != other.ControlTable) return false;
                    if (Speed != other.Speed) return false;
                    if (Distance != other.Distance) return false;
                    if (ChangeAreaSensor1 != other.ChangeAreaSensor1) return false;
                    if (ChangeGuideDir1 != other.ChangeGuideDir1) return false;
                    if (ChangeSegNum1 != other.ChangeSegNum1) return false;
                    if (ChangeAreaSensor2 != other.ChangeAreaSensor2) return false;
                    if (ChangeGuideDir2 != other.ChangeGuideDir2) return false;
                    if (ChangeSegNum2 != other.ChangeSegNum2) return false;
                    if (AtSegment != other.AtSegment) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (DriveDir != 0) hash ^= DriveDir.GetHashCode();
                    if (AeraSecsor != 0) hash ^= AeraSecsor.GetHashCode();
                    if (GuideDir != 0) hash ^= GuideDir.GetHashCode();
                    if (SectionID.Length != 0) hash ^= SectionID.GetHashCode();
                    if (FromAddr.Length != 0) hash ^= FromAddr.GetHashCode();
                    if (ToAddr.Length != 0) hash ^= ToAddr.GetHashCode();
                    if (ControlTable != 0) hash ^= ControlTable.GetHashCode();
                    if (Speed != 0) hash ^= Speed.GetHashCode();
                    if (Distance != 0) hash ^= Distance.GetHashCode();
                    if (ChangeAreaSensor1 != 0) hash ^= ChangeAreaSensor1.GetHashCode();
                    if (ChangeGuideDir1 != 0) hash ^= ChangeGuideDir1.GetHashCode();
                    if (ChangeSegNum1.Length != 0) hash ^= ChangeSegNum1.GetHashCode();
                    if (ChangeAreaSensor2 != 0) hash ^= ChangeAreaSensor2.GetHashCode();
                    if (ChangeGuideDir2 != 0) hash ^= ChangeGuideDir2.GetHashCode();
                    if (ChangeSegNum2.Length != 0) hash ^= ChangeSegNum2.GetHashCode();
                    if (AtSegment.Length != 0) hash ^= AtSegment.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (DriveDir != 0)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt32(DriveDir);
                    }
                    if (AeraSecsor != 0)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt32(AeraSecsor);
                    }
                    if (GuideDir != 0)
                    {
                        output.WriteRawTag(24);
                        output.WriteInt32(GuideDir);
                    }
                    if (SectionID.Length != 0)
                    {
                        output.WriteRawTag(34);
                        output.WriteString(SectionID);
                    }
                    if (FromAddr.Length != 0)
                    {
                        output.WriteRawTag(42);
                        output.WriteString(FromAddr);
                    }
                    if (ToAddr.Length != 0)
                    {
                        output.WriteRawTag(50);
                        output.WriteString(ToAddr);
                    }
                    if (ControlTable != 0)
                    {
                        output.WriteRawTag(56);
                        output.WriteInt32(ControlTable);
                    }
                    if (Speed != 0)
                    {
                        output.WriteRawTag(72);
                        output.WriteInt32(Speed);
                    }
                    if (Distance != 0)
                    {
                        output.WriteRawTag(80);
                        output.WriteInt32(Distance);
                    }
                    if (ChangeAreaSensor1 != 0)
                    {
                        output.WriteRawTag(88);
                        output.WriteInt32(ChangeAreaSensor1);
                    }
                    if (ChangeGuideDir1 != 0)
                    {
                        output.WriteRawTag(96);
                        output.WriteInt32(ChangeGuideDir1);
                    }
                    if (ChangeSegNum1.Length != 0)
                    {
                        output.WriteRawTag(106);
                        output.WriteString(ChangeSegNum1);
                    }
                    if (ChangeAreaSensor2 != 0)
                    {
                        output.WriteRawTag(112);
                        output.WriteInt32(ChangeAreaSensor2);
                    }
                    if (ChangeGuideDir2 != 0)
                    {
                        output.WriteRawTag(120);
                        output.WriteInt32(ChangeGuideDir2);
                    }
                    if (ChangeSegNum2.Length != 0)
                    {
                        output.WriteRawTag(130, 1);
                        output.WriteString(ChangeSegNum2);
                    }
                    if (AtSegment.Length != 0)
                    {
                        output.WriteRawTag(138, 1);
                        output.WriteString(AtSegment);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (DriveDir != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DriveDir);
                    }
                    if (AeraSecsor != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AeraSecsor);
                    }
                    if (GuideDir != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuideDir);
                    }
                    if (SectionID.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(SectionID);
                    }
                    if (FromAddr.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromAddr);
                    }
                    if (ToAddr.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAddr);
                    }
                    if (ControlTable != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ControlTable);
                    }
                    if (Speed != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
                    }
                    if (Distance != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Distance);
                    }
                    if (ChangeAreaSensor1 != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeAreaSensor1);
                    }
                    if (ChangeGuideDir1 != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeGuideDir1);
                    }
                    if (ChangeSegNum1.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangeSegNum1);
                    }
                    if (ChangeAreaSensor2 != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeAreaSensor2);
                    }
                    if (ChangeGuideDir2 != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeGuideDir2);
                    }
                    if (ChangeSegNum2.Length != 0)
                    {
                        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChangeSegNum2);
                    }
                    if (AtSegment.Length != 0)
                    {
                        size += 2 + pb::CodedOutputStream.ComputeStringSize(AtSegment);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Section other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.DriveDir != 0)
                    {
                        DriveDir = other.DriveDir;
                    }
                    if (other.AeraSecsor != 0)
                    {
                        AeraSecsor = other.AeraSecsor;
                    }
                    if (other.GuideDir != 0)
                    {
                        GuideDir = other.GuideDir;
                    }
                    if (other.SectionID.Length != 0)
                    {
                        SectionID = other.SectionID;
                    }
                    if (other.FromAddr.Length != 0)
                    {
                        FromAddr = other.FromAddr;
                    }
                    if (other.ToAddr.Length != 0)
                    {
                        ToAddr = other.ToAddr;
                    }
                    if (other.ControlTable != 0)
                    {
                        ControlTable = other.ControlTable;
                    }
                    if (other.Speed != 0)
                    {
                        Speed = other.Speed;
                    }
                    if (other.Distance != 0)
                    {
                        Distance = other.Distance;
                    }
                    if (other.ChangeAreaSensor1 != 0)
                    {
                        ChangeAreaSensor1 = other.ChangeAreaSensor1;
                    }
                    if (other.ChangeGuideDir1 != 0)
                    {
                        ChangeGuideDir1 = other.ChangeGuideDir1;
                    }
                    if (other.ChangeSegNum1.Length != 0)
                    {
                        ChangeSegNum1 = other.ChangeSegNum1;
                    }
                    if (other.ChangeAreaSensor2 != 0)
                    {
                        ChangeAreaSensor2 = other.ChangeAreaSensor2;
                    }
                    if (other.ChangeGuideDir2 != 0)
                    {
                        ChangeGuideDir2 = other.ChangeGuideDir2;
                    }
                    if (other.ChangeSegNum2.Length != 0)
                    {
                        ChangeSegNum2 = other.ChangeSegNum2;
                    }
                    if (other.AtSegment.Length != 0)
                    {
                        AtSegment = other.AtSegment;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    DriveDir = input.ReadInt32();
                                    break;
                                }
                            case 16:
                                {
                                    AeraSecsor = input.ReadInt32();
                                    break;
                                }
                            case 24:
                                {
                                    GuideDir = input.ReadInt32();
                                    break;
                                }
                            case 34:
                                {
                                    SectionID = input.ReadString();
                                    break;
                                }
                            case 42:
                                {
                                    FromAddr = input.ReadString();
                                    break;
                                }
                            case 50:
                                {
                                    ToAddr = input.ReadString();
                                    break;
                                }
                            case 56:
                                {
                                    ControlTable = input.ReadInt32();
                                    break;
                                }
                            case 72:
                                {
                                    Speed = input.ReadInt32();
                                    break;
                                }
                            case 80:
                                {
                                    Distance = input.ReadInt32();
                                    break;
                                }
                            case 88:
                                {
                                    ChangeAreaSensor1 = input.ReadInt32();
                                    break;
                                }
                            case 96:
                                {
                                    ChangeGuideDir1 = input.ReadInt32();
                                    break;
                                }
                            case 106:
                                {
                                    ChangeSegNum1 = input.ReadString();
                                    break;
                                }
                            case 112:
                                {
                                    ChangeAreaSensor2 = input.ReadInt32();
                                    break;
                                }
                            case 120:
                                {
                                    ChangeGuideDir2 = input.ReadInt32();
                                    break;
                                }
                            case 130:
                                {
                                    ChangeSegNum2 = input.ReadString();
                                    break;
                                }
                            case 138:
                                {
                                    AtSegment = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    public sealed partial class ID_115_SECTION_DATA_RESPONSE : pb::IMessage<ID_115_SECTION_DATA_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_115_SECTION_DATA_RESPONSE> _parser = new pb::MessageParser<ID_115_SECTION_DATA_RESPONSE>(() => new ID_115_SECTION_DATA_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_115_SECTION_DATA_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_115_SECTION_DATA_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_115_SECTION_DATA_RESPONSE(ID_115_SECTION_DATA_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_115_SECTION_DATA_RESPONSE Clone()
        {
            return new ID_115_SECTION_DATA_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_115_SECTION_DATA_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_115_SECTION_DATA_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_115_SECTION_DATA_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_17_ADDRESS_DATA_REP : pb::IMessage<ID_17_ADDRESS_DATA_REP>
    {
        private static readonly pb::MessageParser<ID_17_ADDRESS_DATA_REP> _parser = new pb::MessageParser<ID_17_ADDRESS_DATA_REP>(() => new ID_17_ADDRESS_DATA_REP());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_17_ADDRESS_DATA_REP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_17_ADDRESS_DATA_REP()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_17_ADDRESS_DATA_REP(ID_17_ADDRESS_DATA_REP other) : this()
        {
            addresss_ = other.addresss_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_17_ADDRESS_DATA_REP Clone()
        {
            return new ID_17_ADDRESS_DATA_REP(this);
        }

        /// <summary>Field number for the "Addresss" field.</summary>
        public const int AddresssFieldNumber = 1;
        private static readonly pb::FieldCodec<global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP.Types.Address> _repeated_addresss_codec
            = pb::FieldCodec.ForMessage(10, global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP.Types.Address.Parser);
        private readonly pbc::RepeatedField<global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP.Types.Address> addresss_ = new pbc::RepeatedField<global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP.Types.Address>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP.Types.Address> Addresss
        {
            get { return addresss_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_17_ADDRESS_DATA_REP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_17_ADDRESS_DATA_REP other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!addresss_.Equals(other.addresss_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= addresss_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            addresss_.WriteTo(output, _repeated_addresss_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += addresss_.CalculateSize(_repeated_addresss_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_17_ADDRESS_DATA_REP other)
        {
            if (other == null)
            {
                return;
            }
            addresss_.Add(other.addresss_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            addresss_.AddEntriesFrom(input, _repeated_addresss_codec);
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ID_17_ADDRESS_DATA_REP message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class Address : pb::IMessage<Address>
            {
                private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Address> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Address()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Address(Address other) : this()
                {
                    addr_ = other.addr_;
                    resolution_ = other.resolution_;
                    loaction_ = other.loaction_;
                    blockRelease_ = other.blockRelease_;
                    hIDRelease_ = other.hIDRelease_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Address Clone()
                {
                    return new Address(this);
                }

                /// <summary>Field number for the "Addr" field.</summary>
                public const int AddrFieldNumber = 1;
                private string addr_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Addr
                {
                    get { return addr_; }
                    set
                    {
                        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "Resolution" field.</summary>
                public const int ResolutionFieldNumber = 2;
                private int resolution_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int Resolution
                {
                    get { return resolution_; }
                    set
                    {
                        resolution_ = value;
                    }
                }

                /// <summary>Field number for the "Loaction" field.</summary>
                public const int LoactionFieldNumber = 3;
                private int loaction_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int Loaction
                {
                    get { return loaction_; }
                    set
                    {
                        loaction_ = value;
                    }
                }

                /// <summary>Field number for the "BlockRelease" field.</summary>
                public const int BlockReleaseFieldNumber = 4;
                private int blockRelease_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int BlockRelease
                {
                    get { return blockRelease_; }
                    set
                    {
                        blockRelease_ = value;
                    }
                }

                /// <summary>Field number for the "HIDRelease" field.</summary>
                public const int HIDReleaseFieldNumber = 5;
                private int hIDRelease_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int HIDRelease
                {
                    get { return hIDRelease_; }
                    set
                    {
                        hIDRelease_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Address);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Address other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Addr != other.Addr) return false;
                    if (Resolution != other.Resolution) return false;
                    if (Loaction != other.Loaction) return false;
                    if (BlockRelease != other.BlockRelease) return false;
                    if (HIDRelease != other.HIDRelease) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Addr.Length != 0) hash ^= Addr.GetHashCode();
                    if (Resolution != 0) hash ^= Resolution.GetHashCode();
                    if (Loaction != 0) hash ^= Loaction.GetHashCode();
                    if (BlockRelease != 0) hash ^= BlockRelease.GetHashCode();
                    if (HIDRelease != 0) hash ^= HIDRelease.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Addr.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Addr);
                    }
                    if (Resolution != 0)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt32(Resolution);
                    }
                    if (Loaction != 0)
                    {
                        output.WriteRawTag(24);
                        output.WriteInt32(Loaction);
                    }
                    if (BlockRelease != 0)
                    {
                        output.WriteRawTag(32);
                        output.WriteInt32(BlockRelease);
                    }
                    if (HIDRelease != 0)
                    {
                        output.WriteRawTag(40);
                        output.WriteInt32(HIDRelease);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Addr.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
                    }
                    if (Resolution != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resolution);
                    }
                    if (Loaction != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Loaction);
                    }
                    if (BlockRelease != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockRelease);
                    }
                    if (HIDRelease != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HIDRelease);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Address other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Addr.Length != 0)
                    {
                        Addr = other.Addr;
                    }
                    if (other.Resolution != 0)
                    {
                        Resolution = other.Resolution;
                    }
                    if (other.Loaction != 0)
                    {
                        Loaction = other.Loaction;
                    }
                    if (other.BlockRelease != 0)
                    {
                        BlockRelease = other.BlockRelease;
                    }
                    if (other.HIDRelease != 0)
                    {
                        HIDRelease = other.HIDRelease;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    Addr = input.ReadString();
                                    break;
                                }
                            case 16:
                                {
                                    Resolution = input.ReadInt32();
                                    break;
                                }
                            case 24:
                                {
                                    Loaction = input.ReadInt32();
                                    break;
                                }
                            case 32:
                                {
                                    BlockRelease = input.ReadInt32();
                                    break;
                                }
                            case 40:
                                {
                                    HIDRelease = input.ReadInt32();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    public sealed partial class ID_117_ADDRESS_DATA_RESPONSE : pb::IMessage<ID_117_ADDRESS_DATA_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_117_ADDRESS_DATA_RESPONSE> _parser = new pb::MessageParser<ID_117_ADDRESS_DATA_RESPONSE>(() => new ID_117_ADDRESS_DATA_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_117_ADDRESS_DATA_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_117_ADDRESS_DATA_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_117_ADDRESS_DATA_RESPONSE(ID_117_ADDRESS_DATA_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_117_ADDRESS_DATA_RESPONSE Clone()
        {
            return new ID_117_ADDRESS_DATA_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_117_ADDRESS_DATA_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_117_ADDRESS_DATA_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_117_ADDRESS_DATA_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_19_SCALE_DATA_REP : pb::IMessage<ID_19_SCALE_DATA_REP>
    {
        private static readonly pb::MessageParser<ID_19_SCALE_DATA_REP> _parser = new pb::MessageParser<ID_19_SCALE_DATA_REP>(() => new ID_19_SCALE_DATA_REP());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_19_SCALE_DATA_REP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_19_SCALE_DATA_REP()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_19_SCALE_DATA_REP(ID_19_SCALE_DATA_REP other) : this()
        {
            resolution_ = other.resolution_;
            inposArea_ = other.inposArea_;
            inposStability_ = other.inposStability_;
            scalePulse_ = other.scalePulse_;
            scaleOffset_ = other.scaleOffset_;
            scaleReset_ = other.scaleReset_;
            readDir_ = other.readDir_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_19_SCALE_DATA_REP Clone()
        {
            return new ID_19_SCALE_DATA_REP(this);
        }

        /// <summary>Field number for the "Resolution" field.</summary>
        public const int ResolutionFieldNumber = 1;
        private uint resolution_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Resolution
        {
            get { return resolution_; }
            set
            {
                resolution_ = value;
            }
        }

        /// <summary>Field number for the "InposArea" field.</summary>
        public const int InposAreaFieldNumber = 2;
        private uint inposArea_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InposArea
        {
            get { return inposArea_; }
            set
            {
                inposArea_ = value;
            }
        }

        /// <summary>Field number for the "InposStability" field.</summary>
        public const int InposStabilityFieldNumber = 3;
        private uint inposStability_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint InposStability
        {
            get { return inposStability_; }
            set
            {
                inposStability_ = value;
            }
        }

        /// <summary>Field number for the "ScalePulse" field.</summary>
        public const int ScalePulseFieldNumber = 4;
        private uint scalePulse_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ScalePulse
        {
            get { return scalePulse_; }
            set
            {
                scalePulse_ = value;
            }
        }

        /// <summary>Field number for the "ScaleOffset" field.</summary>
        public const int ScaleOffsetFieldNumber = 5;
        private uint scaleOffset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ScaleOffset
        {
            get { return scaleOffset_; }
            set
            {
                scaleOffset_ = value;
            }
        }

        /// <summary>Field number for the "ScaleReset" field.</summary>
        public const int ScaleResetFieldNumber = 6;
        private uint scaleReset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ScaleReset
        {
            get { return scaleReset_; }
            set
            {
                scaleReset_ = value;
            }
        }

        /// <summary>Field number for the "ReadDir" field.</summary>
        public const int ReadDirFieldNumber = 7;
        private int readDir_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReadDir
        {
            get { return readDir_; }
            set
            {
                readDir_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_19_SCALE_DATA_REP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_19_SCALE_DATA_REP other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Resolution != other.Resolution) return false;
            if (InposArea != other.InposArea) return false;
            if (InposStability != other.InposStability) return false;
            if (ScalePulse != other.ScalePulse) return false;
            if (ScaleOffset != other.ScaleOffset) return false;
            if (ScaleReset != other.ScaleReset) return false;
            if (ReadDir != other.ReadDir) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Resolution != 0) hash ^= Resolution.GetHashCode();
            if (InposArea != 0) hash ^= InposArea.GetHashCode();
            if (InposStability != 0) hash ^= InposStability.GetHashCode();
            if (ScalePulse != 0) hash ^= ScalePulse.GetHashCode();
            if (ScaleOffset != 0) hash ^= ScaleOffset.GetHashCode();
            if (ScaleReset != 0) hash ^= ScaleReset.GetHashCode();
            if (ReadDir != 0) hash ^= ReadDir.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Resolution != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Resolution);
            }
            if (InposArea != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(InposArea);
            }
            if (InposStability != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(InposStability);
            }
            if (ScalePulse != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(ScalePulse);
            }
            if (ScaleOffset != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(ScaleOffset);
            }
            if (ScaleReset != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(ScaleReset);
            }
            if (ReadDir != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(ReadDir);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Resolution != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resolution);
            }
            if (InposArea != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InposArea);
            }
            if (InposStability != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InposStability);
            }
            if (ScalePulse != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScalePulse);
            }
            if (ScaleOffset != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScaleOffset);
            }
            if (ScaleReset != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScaleReset);
            }
            if (ReadDir != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReadDir);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_19_SCALE_DATA_REP other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Resolution != 0)
            {
                Resolution = other.Resolution;
            }
            if (other.InposArea != 0)
            {
                InposArea = other.InposArea;
            }
            if (other.InposStability != 0)
            {
                InposStability = other.InposStability;
            }
            if (other.ScalePulse != 0)
            {
                ScalePulse = other.ScalePulse;
            }
            if (other.ScaleOffset != 0)
            {
                ScaleOffset = other.ScaleOffset;
            }
            if (other.ScaleReset != 0)
            {
                ScaleReset = other.ScaleReset;
            }
            if (other.ReadDir != 0)
            {
                ReadDir = other.ReadDir;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            Resolution = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            InposArea = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            InposStability = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            ScalePulse = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            ScaleOffset = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            ScaleReset = input.ReadUInt32();
                            break;
                        }
                    case 56:
                        {
                            ReadDir = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_119_SCALE_DATA_RESPONSE : pb::IMessage<ID_119_SCALE_DATA_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_119_SCALE_DATA_RESPONSE> _parser = new pb::MessageParser<ID_119_SCALE_DATA_RESPONSE>(() => new ID_119_SCALE_DATA_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_119_SCALE_DATA_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_119_SCALE_DATA_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_119_SCALE_DATA_RESPONSE(ID_119_SCALE_DATA_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_119_SCALE_DATA_RESPONSE Clone()
        {
            return new ID_119_SCALE_DATA_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_119_SCALE_DATA_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_119_SCALE_DATA_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_119_SCALE_DATA_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_21_CONTROL_DATA_REP : pb::IMessage<ID_21_CONTROL_DATA_REP>
    {
        private static readonly pb::MessageParser<ID_21_CONTROL_DATA_REP> _parser = new pb::MessageParser<ID_21_CONTROL_DATA_REP>(() => new ID_21_CONTROL_DATA_REP());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_21_CONTROL_DATA_REP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_21_CONTROL_DATA_REP()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_21_CONTROL_DATA_REP(ID_21_CONTROL_DATA_REP other) : this()
        {
            timeoutT1_ = other.timeoutT1_;
            timeoutT2_ = other.timeoutT2_;
            timeoutT3_ = other.timeoutT3_;
            timeoutT4_ = other.timeoutT4_;
            timeoutT5_ = other.timeoutT5_;
            timeoutT6_ = other.timeoutT6_;
            timeoutT7_ = other.timeoutT7_;
            timeoutT8_ = other.timeoutT8_;
            timeoutBlock_ = other.timeoutBlock_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_21_CONTROL_DATA_REP Clone()
        {
            return new ID_21_CONTROL_DATA_REP(this);
        }

        /// <summary>Field number for the "TimeoutT1" field.</summary>
        public const int TimeoutT1FieldNumber = 1;
        private uint timeoutT1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutT1
        {
            get { return timeoutT1_; }
            set
            {
                timeoutT1_ = value;
            }
        }

        /// <summary>Field number for the "TimeoutT2" field.</summary>
        public const int TimeoutT2FieldNumber = 2;
        private uint timeoutT2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutT2
        {
            get { return timeoutT2_; }
            set
            {
                timeoutT2_ = value;
            }
        }

        /// <summary>Field number for the "TimeoutT3" field.</summary>
        public const int TimeoutT3FieldNumber = 3;
        private uint timeoutT3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutT3
        {
            get { return timeoutT3_; }
            set
            {
                timeoutT3_ = value;
            }
        }

        /// <summary>Field number for the "TimeoutT4" field.</summary>
        public const int TimeoutT4FieldNumber = 4;
        private uint timeoutT4_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutT4
        {
            get { return timeoutT4_; }
            set
            {
                timeoutT4_ = value;
            }
        }

        /// <summary>Field number for the "TimeoutT5" field.</summary>
        public const int TimeoutT5FieldNumber = 5;
        private uint timeoutT5_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutT5
        {
            get { return timeoutT5_; }
            set
            {
                timeoutT5_ = value;
            }
        }

        /// <summary>Field number for the "TimeoutT6" field.</summary>
        public const int TimeoutT6FieldNumber = 6;
        private uint timeoutT6_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutT6
        {
            get { return timeoutT6_; }
            set
            {
                timeoutT6_ = value;
            }
        }

        /// <summary>Field number for the "TimeoutT7" field.</summary>
        public const int TimeoutT7FieldNumber = 7;
        private uint timeoutT7_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutT7
        {
            get { return timeoutT7_; }
            set
            {
                timeoutT7_ = value;
            }
        }

        /// <summary>Field number for the "TimeoutT8" field.</summary>
        public const int TimeoutT8FieldNumber = 8;
        private uint timeoutT8_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutT8
        {
            get { return timeoutT8_; }
            set
            {
                timeoutT8_ = value;
            }
        }

        /// <summary>Field number for the "TimeoutBlock" field.</summary>
        public const int TimeoutBlockFieldNumber = 9;
        private uint timeoutBlock_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TimeoutBlock
        {
            get { return timeoutBlock_; }
            set
            {
                timeoutBlock_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_21_CONTROL_DATA_REP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_21_CONTROL_DATA_REP other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (TimeoutT1 != other.TimeoutT1) return false;
            if (TimeoutT2 != other.TimeoutT2) return false;
            if (TimeoutT3 != other.TimeoutT3) return false;
            if (TimeoutT4 != other.TimeoutT4) return false;
            if (TimeoutT5 != other.TimeoutT5) return false;
            if (TimeoutT6 != other.TimeoutT6) return false;
            if (TimeoutT7 != other.TimeoutT7) return false;
            if (TimeoutT8 != other.TimeoutT8) return false;
            if (TimeoutBlock != other.TimeoutBlock) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (TimeoutT1 != 0) hash ^= TimeoutT1.GetHashCode();
            if (TimeoutT2 != 0) hash ^= TimeoutT2.GetHashCode();
            if (TimeoutT3 != 0) hash ^= TimeoutT3.GetHashCode();
            if (TimeoutT4 != 0) hash ^= TimeoutT4.GetHashCode();
            if (TimeoutT5 != 0) hash ^= TimeoutT5.GetHashCode();
            if (TimeoutT6 != 0) hash ^= TimeoutT6.GetHashCode();
            if (TimeoutT7 != 0) hash ^= TimeoutT7.GetHashCode();
            if (TimeoutT8 != 0) hash ^= TimeoutT8.GetHashCode();
            if (TimeoutBlock != 0) hash ^= TimeoutBlock.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (TimeoutT1 != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(TimeoutT1);
            }
            if (TimeoutT2 != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(TimeoutT2);
            }
            if (TimeoutT3 != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(TimeoutT3);
            }
            if (TimeoutT4 != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(TimeoutT4);
            }
            if (TimeoutT5 != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(TimeoutT5);
            }
            if (TimeoutT6 != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(TimeoutT6);
            }
            if (TimeoutT7 != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(TimeoutT7);
            }
            if (TimeoutT8 != 0)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(TimeoutT8);
            }
            if (TimeoutBlock != 0)
            {
                output.WriteRawTag(72);
                output.WriteUInt32(TimeoutBlock);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (TimeoutT1 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT1);
            }
            if (TimeoutT2 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT2);
            }
            if (TimeoutT3 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT3);
            }
            if (TimeoutT4 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT4);
            }
            if (TimeoutT5 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT5);
            }
            if (TimeoutT6 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT6);
            }
            if (TimeoutT7 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT7);
            }
            if (TimeoutT8 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutT8);
            }
            if (TimeoutBlock != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutBlock);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_21_CONTROL_DATA_REP other)
        {
            if (other == null)
            {
                return;
            }
            if (other.TimeoutT1 != 0)
            {
                TimeoutT1 = other.TimeoutT1;
            }
            if (other.TimeoutT2 != 0)
            {
                TimeoutT2 = other.TimeoutT2;
            }
            if (other.TimeoutT3 != 0)
            {
                TimeoutT3 = other.TimeoutT3;
            }
            if (other.TimeoutT4 != 0)
            {
                TimeoutT4 = other.TimeoutT4;
            }
            if (other.TimeoutT5 != 0)
            {
                TimeoutT5 = other.TimeoutT5;
            }
            if (other.TimeoutT6 != 0)
            {
                TimeoutT6 = other.TimeoutT6;
            }
            if (other.TimeoutT7 != 0)
            {
                TimeoutT7 = other.TimeoutT7;
            }
            if (other.TimeoutT8 != 0)
            {
                TimeoutT8 = other.TimeoutT8;
            }
            if (other.TimeoutBlock != 0)
            {
                TimeoutBlock = other.TimeoutBlock;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            TimeoutT1 = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            TimeoutT2 = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            TimeoutT3 = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            TimeoutT4 = input.ReadUInt32();
                            break;
                        }
                    case 40:
                        {
                            TimeoutT5 = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            TimeoutT6 = input.ReadUInt32();
                            break;
                        }
                    case 56:
                        {
                            TimeoutT7 = input.ReadUInt32();
                            break;
                        }
                    case 64:
                        {
                            TimeoutT8 = input.ReadUInt32();
                            break;
                        }
                    case 72:
                        {
                            TimeoutBlock = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_121_CONTROL_DATA_RESPONSE : pb::IMessage<ID_121_CONTROL_DATA_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_121_CONTROL_DATA_RESPONSE> _parser = new pb::MessageParser<ID_121_CONTROL_DATA_RESPONSE>(() => new ID_121_CONTROL_DATA_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_121_CONTROL_DATA_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_121_CONTROL_DATA_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_121_CONTROL_DATA_RESPONSE(ID_121_CONTROL_DATA_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_121_CONTROL_DATA_RESPONSE Clone()
        {
            return new ID_121_CONTROL_DATA_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_121_CONTROL_DATA_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_121_CONTROL_DATA_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_121_CONTROL_DATA_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_23_GUIDE_DATA_REP : pb::IMessage<ID_23_GUIDE_DATA_REP>
    {
        private static readonly pb::MessageParser<ID_23_GUIDE_DATA_REP> _parser = new pb::MessageParser<ID_23_GUIDE_DATA_REP>(() => new ID_23_GUIDE_DATA_REP());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_23_GUIDE_DATA_REP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[16]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_23_GUIDE_DATA_REP()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_23_GUIDE_DATA_REP(ID_23_GUIDE_DATA_REP other) : this()
        {
            startStopSpd_ = other.startStopSpd_;
            maxSpeed_ = other.maxSpeed_;
            accelTime_ = other.accelTime_;
            sCurveRate_ = other.sCurveRate_;
            normalSpd_ = other.normalSpd_;
            manualHSpd_ = other.manualHSpd_;
            manualLSpd_ = other.manualLSpd_;
            lFLockPos_ = other.lFLockPos_;
            lBLockPos_ = other.lBLockPos_;
            rFLockPos_ = other.rFLockPos_;
            rBLockPos_ = other.rBLockPos_;
            changeStabilityTime_ = other.changeStabilityTime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_23_GUIDE_DATA_REP Clone()
        {
            return new ID_23_GUIDE_DATA_REP(this);
        }

        /// <summary>Field number for the "StartStopSpd" field.</summary>
        public const int StartStopSpdFieldNumber = 1;
        private uint startStopSpd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StartStopSpd
        {
            get { return startStopSpd_; }
            set
            {
                startStopSpd_ = value;
            }
        }

        /// <summary>Field number for the "MaxSpeed" field.</summary>
        public const int MaxSpeedFieldNumber = 2;
        private uint maxSpeed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaxSpeed
        {
            get { return maxSpeed_; }
            set
            {
                maxSpeed_ = value;
            }
        }

        /// <summary>Field number for the "AccelTime" field.</summary>
        public const int AccelTimeFieldNumber = 3;
        private uint accelTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AccelTime
        {
            get { return accelTime_; }
            set
            {
                accelTime_ = value;
            }
        }

        /// <summary>Field number for the "SCurveRate" field.</summary>
        public const int SCurveRateFieldNumber = 4;
        private int sCurveRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SCurveRate
        {
            get { return sCurveRate_; }
            set
            {
                sCurveRate_ = value;
            }
        }

        /// <summary>Field number for the "NormalSpd" field.</summary>
        public const int NormalSpdFieldNumber = 5;
        private uint normalSpd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NormalSpd
        {
            get { return normalSpd_; }
            set
            {
                normalSpd_ = value;
            }
        }

        /// <summary>Field number for the "ManualHSpd" field.</summary>
        public const int ManualHSpdFieldNumber = 6;
        private uint manualHSpd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ManualHSpd
        {
            get { return manualHSpd_; }
            set
            {
                manualHSpd_ = value;
            }
        }

        /// <summary>Field number for the "ManualLSpd" field.</summary>
        public const int ManualLSpdFieldNumber = 7;
        private uint manualLSpd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ManualLSpd
        {
            get { return manualLSpd_; }
            set
            {
                manualLSpd_ = value;
            }
        }

        /// <summary>Field number for the "LFLockPos" field.</summary>
        public const int LFLockPosFieldNumber = 8;
        private uint lFLockPos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LFLockPos
        {
            get { return lFLockPos_; }
            set
            {
                lFLockPos_ = value;
            }
        }

        /// <summary>Field number for the "LBLockPos" field.</summary>
        public const int LBLockPosFieldNumber = 9;
        private uint lBLockPos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LBLockPos
        {
            get { return lBLockPos_; }
            set
            {
                lBLockPos_ = value;
            }
        }

        /// <summary>Field number for the "RFLockPos" field.</summary>
        public const int RFLockPosFieldNumber = 10;
        private uint rFLockPos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RFLockPos
        {
            get { return rFLockPos_; }
            set
            {
                rFLockPos_ = value;
            }
        }

        /// <summary>Field number for the "RBLockPos" field.</summary>
        public const int RBLockPosFieldNumber = 11;
        private uint rBLockPos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RBLockPos
        {
            get { return rBLockPos_; }
            set
            {
                rBLockPos_ = value;
            }
        }

        /// <summary>Field number for the "ChangeStabilityTime" field.</summary>
        public const int ChangeStabilityTimeFieldNumber = 12;
        private uint changeStabilityTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ChangeStabilityTime
        {
            get { return changeStabilityTime_; }
            set
            {
                changeStabilityTime_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_23_GUIDE_DATA_REP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_23_GUIDE_DATA_REP other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (StartStopSpd != other.StartStopSpd) return false;
            if (MaxSpeed != other.MaxSpeed) return false;
            if (AccelTime != other.AccelTime) return false;
            if (SCurveRate != other.SCurveRate) return false;
            if (NormalSpd != other.NormalSpd) return false;
            if (ManualHSpd != other.ManualHSpd) return false;
            if (ManualLSpd != other.ManualLSpd) return false;
            if (LFLockPos != other.LFLockPos) return false;
            if (LBLockPos != other.LBLockPos) return false;
            if (RFLockPos != other.RFLockPos) return false;
            if (RBLockPos != other.RBLockPos) return false;
            if (ChangeStabilityTime != other.ChangeStabilityTime) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (StartStopSpd != 0) hash ^= StartStopSpd.GetHashCode();
            if (MaxSpeed != 0) hash ^= MaxSpeed.GetHashCode();
            if (AccelTime != 0) hash ^= AccelTime.GetHashCode();
            if (SCurveRate != 0) hash ^= SCurveRate.GetHashCode();
            if (NormalSpd != 0) hash ^= NormalSpd.GetHashCode();
            if (ManualHSpd != 0) hash ^= ManualHSpd.GetHashCode();
            if (ManualLSpd != 0) hash ^= ManualLSpd.GetHashCode();
            if (LFLockPos != 0) hash ^= LFLockPos.GetHashCode();
            if (LBLockPos != 0) hash ^= LBLockPos.GetHashCode();
            if (RFLockPos != 0) hash ^= RFLockPos.GetHashCode();
            if (RBLockPos != 0) hash ^= RBLockPos.GetHashCode();
            if (ChangeStabilityTime != 0) hash ^= ChangeStabilityTime.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (StartStopSpd != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(StartStopSpd);
            }
            if (MaxSpeed != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MaxSpeed);
            }
            if (AccelTime != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(AccelTime);
            }
            if (SCurveRate != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(SCurveRate);
            }
            if (NormalSpd != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(NormalSpd);
            }
            if (ManualHSpd != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(ManualHSpd);
            }
            if (ManualLSpd != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(ManualLSpd);
            }
            if (LFLockPos != 0)
            {
                output.WriteRawTag(64);
                output.WriteUInt32(LFLockPos);
            }
            if (LBLockPos != 0)
            {
                output.WriteRawTag(72);
                output.WriteUInt32(LBLockPos);
            }
            if (RFLockPos != 0)
            {
                output.WriteRawTag(80);
                output.WriteUInt32(RFLockPos);
            }
            if (RBLockPos != 0)
            {
                output.WriteRawTag(88);
                output.WriteUInt32(RBLockPos);
            }
            if (ChangeStabilityTime != 0)
            {
                output.WriteRawTag(96);
                output.WriteUInt32(ChangeStabilityTime);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (StartStopSpd != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartStopSpd);
            }
            if (MaxSpeed != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSpeed);
            }
            if (AccelTime != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccelTime);
            }
            if (SCurveRate != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SCurveRate);
            }
            if (NormalSpd != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NormalSpd);
            }
            if (ManualHSpd != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualHSpd);
            }
            if (ManualLSpd != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ManualLSpd);
            }
            if (LFLockPos != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LFLockPos);
            }
            if (LBLockPos != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LBLockPos);
            }
            if (RFLockPos != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RFLockPos);
            }
            if (RBLockPos != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RBLockPos);
            }
            if (ChangeStabilityTime != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChangeStabilityTime);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_23_GUIDE_DATA_REP other)
        {
            if (other == null)
            {
                return;
            }
            if (other.StartStopSpd != 0)
            {
                StartStopSpd = other.StartStopSpd;
            }
            if (other.MaxSpeed != 0)
            {
                MaxSpeed = other.MaxSpeed;
            }
            if (other.AccelTime != 0)
            {
                AccelTime = other.AccelTime;
            }
            if (other.SCurveRate != 0)
            {
                SCurveRate = other.SCurveRate;
            }
            if (other.NormalSpd != 0)
            {
                NormalSpd = other.NormalSpd;
            }
            if (other.ManualHSpd != 0)
            {
                ManualHSpd = other.ManualHSpd;
            }
            if (other.ManualLSpd != 0)
            {
                ManualLSpd = other.ManualLSpd;
            }
            if (other.LFLockPos != 0)
            {
                LFLockPos = other.LFLockPos;
            }
            if (other.LBLockPos != 0)
            {
                LBLockPos = other.LBLockPos;
            }
            if (other.RFLockPos != 0)
            {
                RFLockPos = other.RFLockPos;
            }
            if (other.RBLockPos != 0)
            {
                RBLockPos = other.RBLockPos;
            }
            if (other.ChangeStabilityTime != 0)
            {
                ChangeStabilityTime = other.ChangeStabilityTime;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            StartStopSpd = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            MaxSpeed = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            AccelTime = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            SCurveRate = input.ReadInt32();
                            break;
                        }
                    case 40:
                        {
                            NormalSpd = input.ReadUInt32();
                            break;
                        }
                    case 48:
                        {
                            ManualHSpd = input.ReadUInt32();
                            break;
                        }
                    case 56:
                        {
                            ManualLSpd = input.ReadUInt32();
                            break;
                        }
                    case 64:
                        {
                            LFLockPos = input.ReadUInt32();
                            break;
                        }
                    case 72:
                        {
                            LBLockPos = input.ReadUInt32();
                            break;
                        }
                    case 80:
                        {
                            RFLockPos = input.ReadUInt32();
                            break;
                        }
                    case 88:
                        {
                            RBLockPos = input.ReadUInt32();
                            break;
                        }
                    case 96:
                        {
                            ChangeStabilityTime = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_123_GUIDE_DATA_RESPONSE : pb::IMessage<ID_123_GUIDE_DATA_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_123_GUIDE_DATA_RESPONSE> _parser = new pb::MessageParser<ID_123_GUIDE_DATA_RESPONSE>(() => new ID_123_GUIDE_DATA_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_123_GUIDE_DATA_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[17]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_123_GUIDE_DATA_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_123_GUIDE_DATA_RESPONSE(ID_123_GUIDE_DATA_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_123_GUIDE_DATA_RESPONSE Clone()
        {
            return new ID_123_GUIDE_DATA_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_123_GUIDE_DATA_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_123_GUIDE_DATA_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_123_GUIDE_DATA_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_61_INDIVIDUAL_UPLOAD_REQ : pb::IMessage<ID_61_INDIVIDUAL_UPLOAD_REQ>
    {
        private static readonly pb::MessageParser<ID_61_INDIVIDUAL_UPLOAD_REQ> _parser = new pb::MessageParser<ID_61_INDIVIDUAL_UPLOAD_REQ>(() => new ID_61_INDIVIDUAL_UPLOAD_REQ());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_61_INDIVIDUAL_UPLOAD_REQ> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[18]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_61_INDIVIDUAL_UPLOAD_REQ()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_61_INDIVIDUAL_UPLOAD_REQ(ID_61_INDIVIDUAL_UPLOAD_REQ other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_61_INDIVIDUAL_UPLOAD_REQ Clone()
        {
            return new ID_61_INDIVIDUAL_UPLOAD_REQ(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_61_INDIVIDUAL_UPLOAD_REQ);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_61_INDIVIDUAL_UPLOAD_REQ other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_61_INDIVIDUAL_UPLOAD_REQ other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

    }

    public sealed partial class ID_161_INDIVIDUAL_UPLOAD_RESPONSE : pb::IMessage<ID_161_INDIVIDUAL_UPLOAD_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_161_INDIVIDUAL_UPLOAD_RESPONSE> _parser = new pb::MessageParser<ID_161_INDIVIDUAL_UPLOAD_RESPONSE>(() => new ID_161_INDIVIDUAL_UPLOAD_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_161_INDIVIDUAL_UPLOAD_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[19]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_161_INDIVIDUAL_UPLOAD_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_161_INDIVIDUAL_UPLOAD_RESPONSE(ID_161_INDIVIDUAL_UPLOAD_RESPONSE other) : this()
        {
            offsetGuideFL_ = other.offsetGuideFL_;
            offsetGuideRL_ = other.offsetGuideRL_;
            offsetGuideFR_ = other.offsetGuideFR_;
            offsetGuideRR_ = other.offsetGuideRR_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_161_INDIVIDUAL_UPLOAD_RESPONSE Clone()
        {
            return new ID_161_INDIVIDUAL_UPLOAD_RESPONSE(this);
        }

        /// <summary>Field number for the "OffsetGuideFL" field.</summary>
        public const int OffsetGuideFLFieldNumber = 1;
        private uint offsetGuideFL_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OffsetGuideFL
        {
            get { return offsetGuideFL_; }
            set
            {
                offsetGuideFL_ = value;
            }
        }

        /// <summary>Field number for the "OffsetGuideRL" field.</summary>
        public const int OffsetGuideRLFieldNumber = 2;
        private uint offsetGuideRL_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OffsetGuideRL
        {
            get { return offsetGuideRL_; }
            set
            {
                offsetGuideRL_ = value;
            }
        }

        /// <summary>Field number for the "OffsetGuideFR" field.</summary>
        public const int OffsetGuideFRFieldNumber = 3;
        private uint offsetGuideFR_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OffsetGuideFR
        {
            get { return offsetGuideFR_; }
            set
            {
                offsetGuideFR_ = value;
            }
        }

        /// <summary>Field number for the "OffsetGuideRR" field.</summary>
        public const int OffsetGuideRRFieldNumber = 4;
        private uint offsetGuideRR_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OffsetGuideRR
        {
            get { return offsetGuideRR_; }
            set
            {
                offsetGuideRR_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_161_INDIVIDUAL_UPLOAD_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_161_INDIVIDUAL_UPLOAD_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (OffsetGuideFL != other.OffsetGuideFL) return false;
            if (OffsetGuideRL != other.OffsetGuideRL) return false;
            if (OffsetGuideFR != other.OffsetGuideFR) return false;
            if (OffsetGuideRR != other.OffsetGuideRR) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (OffsetGuideFL != 0) hash ^= OffsetGuideFL.GetHashCode();
            if (OffsetGuideRL != 0) hash ^= OffsetGuideRL.GetHashCode();
            if (OffsetGuideFR != 0) hash ^= OffsetGuideFR.GetHashCode();
            if (OffsetGuideRR != 0) hash ^= OffsetGuideRR.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OffsetGuideFL != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(OffsetGuideFL);
            }
            if (OffsetGuideRL != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(OffsetGuideRL);
            }
            if (OffsetGuideFR != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(OffsetGuideFR);
            }
            if (OffsetGuideRR != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(OffsetGuideRR);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (OffsetGuideFL != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFL);
            }
            if (OffsetGuideRL != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRL);
            }
            if (OffsetGuideFR != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFR);
            }
            if (OffsetGuideRR != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRR);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_161_INDIVIDUAL_UPLOAD_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.OffsetGuideFL != 0)
            {
                OffsetGuideFL = other.OffsetGuideFL;
            }
            if (other.OffsetGuideRL != 0)
            {
                OffsetGuideRL = other.OffsetGuideRL;
            }
            if (other.OffsetGuideFR != 0)
            {
                OffsetGuideFR = other.OffsetGuideFR;
            }
            if (other.OffsetGuideRR != 0)
            {
                OffsetGuideRR = other.OffsetGuideRR;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            OffsetGuideFL = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            OffsetGuideRL = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            OffsetGuideFR = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            OffsetGuideRR = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_162_INDIVIDUAL_DOWNLOAD_REQ : pb::IMessage<ID_162_INDIVIDUAL_DOWNLOAD_REQ>
    {
        private static readonly pb::MessageParser<ID_162_INDIVIDUAL_DOWNLOAD_REQ> _parser = new pb::MessageParser<ID_162_INDIVIDUAL_DOWNLOAD_REQ>(() => new ID_162_INDIVIDUAL_DOWNLOAD_REQ());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_162_INDIVIDUAL_DOWNLOAD_REQ> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[20]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_162_INDIVIDUAL_DOWNLOAD_REQ()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_162_INDIVIDUAL_DOWNLOAD_REQ(ID_162_INDIVIDUAL_DOWNLOAD_REQ other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_162_INDIVIDUAL_DOWNLOAD_REQ Clone()
        {
            return new ID_162_INDIVIDUAL_DOWNLOAD_REQ(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_162_INDIVIDUAL_DOWNLOAD_REQ);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_162_INDIVIDUAL_DOWNLOAD_REQ other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_162_INDIVIDUAL_DOWNLOAD_REQ other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

    }

    public sealed partial class ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE : pb::IMessage<ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE> _parser = new pb::MessageParser<ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE>(() => new ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[21]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE(ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE other) : this()
        {
            offsetGuideFL_ = other.offsetGuideFL_;
            offsetGuideRL_ = other.offsetGuideRL_;
            offsetGuideFR_ = other.offsetGuideFR_;
            offsetGuideRR_ = other.offsetGuideRR_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE Clone()
        {
            return new ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE(this);
        }

        /// <summary>Field number for the "OffsetGuideFL" field.</summary>
        public const int OffsetGuideFLFieldNumber = 1;
        private uint offsetGuideFL_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OffsetGuideFL
        {
            get { return offsetGuideFL_; }
            set
            {
                offsetGuideFL_ = value;
            }
        }

        /// <summary>Field number for the "OffsetGuideRL" field.</summary>
        public const int OffsetGuideRLFieldNumber = 2;
        private uint offsetGuideRL_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OffsetGuideRL
        {
            get { return offsetGuideRL_; }
            set
            {
                offsetGuideRL_ = value;
            }
        }

        /// <summary>Field number for the "OffsetGuideFR" field.</summary>
        public const int OffsetGuideFRFieldNumber = 3;
        private uint offsetGuideFR_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OffsetGuideFR
        {
            get { return offsetGuideFR_; }
            set
            {
                offsetGuideFR_ = value;
            }
        }

        /// <summary>Field number for the "OffsetGuideRR" field.</summary>
        public const int OffsetGuideRRFieldNumber = 4;
        private uint offsetGuideRR_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OffsetGuideRR
        {
            get { return offsetGuideRR_; }
            set
            {
                offsetGuideRR_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (OffsetGuideFL != other.OffsetGuideFL) return false;
            if (OffsetGuideRL != other.OffsetGuideRL) return false;
            if (OffsetGuideFR != other.OffsetGuideFR) return false;
            if (OffsetGuideRR != other.OffsetGuideRR) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (OffsetGuideFL != 0) hash ^= OffsetGuideFL.GetHashCode();
            if (OffsetGuideRL != 0) hash ^= OffsetGuideRL.GetHashCode();
            if (OffsetGuideFR != 0) hash ^= OffsetGuideFR.GetHashCode();
            if (OffsetGuideRR != 0) hash ^= OffsetGuideRR.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OffsetGuideFL != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(OffsetGuideFL);
            }
            if (OffsetGuideRL != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(OffsetGuideRL);
            }
            if (OffsetGuideFR != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(OffsetGuideFR);
            }
            if (OffsetGuideRR != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(OffsetGuideRR);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (OffsetGuideFL != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFL);
            }
            if (OffsetGuideRL != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRL);
            }
            if (OffsetGuideFR != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFR);
            }
            if (OffsetGuideRR != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRR);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.OffsetGuideFL != 0)
            {
                OffsetGuideFL = other.OffsetGuideFL;
            }
            if (other.OffsetGuideRL != 0)
            {
                OffsetGuideRL = other.OffsetGuideRL;
            }
            if (other.OffsetGuideFR != 0)
            {
                OffsetGuideFR = other.OffsetGuideFR;
            }
            if (other.OffsetGuideRR != 0)
            {
                OffsetGuideRR = other.OffsetGuideRR;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            OffsetGuideFL = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            OffsetGuideRL = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            OffsetGuideFR = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            OffsetGuideRR = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_63_INDIVIDUAL_CHANGE_REQ : pb::IMessage<ID_63_INDIVIDUAL_CHANGE_REQ>
    {
        private static readonly pb::MessageParser<ID_63_INDIVIDUAL_CHANGE_REQ> _parser = new pb::MessageParser<ID_63_INDIVIDUAL_CHANGE_REQ>(() => new ID_63_INDIVIDUAL_CHANGE_REQ());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_63_INDIVIDUAL_CHANGE_REQ> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[22]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_63_INDIVIDUAL_CHANGE_REQ()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_63_INDIVIDUAL_CHANGE_REQ(ID_63_INDIVIDUAL_CHANGE_REQ other) : this()
        {
            offsetGuideFL_ = other.offsetGuideFL_;
            offsetGuideRL_ = other.offsetGuideRL_;
            offsetGuideFR_ = other.offsetGuideFR_;
            offsetGuideRR_ = other.offsetGuideRR_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_63_INDIVIDUAL_CHANGE_REQ Clone()
        {
            return new ID_63_INDIVIDUAL_CHANGE_REQ(this);
        }

        /// <summary>Field number for the "OffsetGuideFL" field.</summary>
        public const int OffsetGuideFLFieldNumber = 1;
        private uint offsetGuideFL_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OffsetGuideFL
        {
            get { return offsetGuideFL_; }
            set
            {
                offsetGuideFL_ = value;
            }
        }

        /// <summary>Field number for the "OffsetGuideRL" field.</summary>
        public const int OffsetGuideRLFieldNumber = 2;
        private uint offsetGuideRL_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OffsetGuideRL
        {
            get { return offsetGuideRL_; }
            set
            {
                offsetGuideRL_ = value;
            }
        }

        /// <summary>Field number for the "OffsetGuideFR" field.</summary>
        public const int OffsetGuideFRFieldNumber = 3;
        private uint offsetGuideFR_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OffsetGuideFR
        {
            get { return offsetGuideFR_; }
            set
            {
                offsetGuideFR_ = value;
            }
        }

        /// <summary>Field number for the "OffsetGuideRR" field.</summary>
        public const int OffsetGuideRRFieldNumber = 4;
        private uint offsetGuideRR_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint OffsetGuideRR
        {
            get { return offsetGuideRR_; }
            set
            {
                offsetGuideRR_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_63_INDIVIDUAL_CHANGE_REQ);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_63_INDIVIDUAL_CHANGE_REQ other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (OffsetGuideFL != other.OffsetGuideFL) return false;
            if (OffsetGuideRL != other.OffsetGuideRL) return false;
            if (OffsetGuideFR != other.OffsetGuideFR) return false;
            if (OffsetGuideRR != other.OffsetGuideRR) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (OffsetGuideFL != 0) hash ^= OffsetGuideFL.GetHashCode();
            if (OffsetGuideRL != 0) hash ^= OffsetGuideRL.GetHashCode();
            if (OffsetGuideFR != 0) hash ^= OffsetGuideFR.GetHashCode();
            if (OffsetGuideRR != 0) hash ^= OffsetGuideRR.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OffsetGuideFL != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(OffsetGuideFL);
            }
            if (OffsetGuideRL != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(OffsetGuideRL);
            }
            if (OffsetGuideFR != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(OffsetGuideFR);
            }
            if (OffsetGuideRR != 0)
            {
                output.WriteRawTag(32);
                output.WriteUInt32(OffsetGuideRR);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (OffsetGuideFL != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFL);
            }
            if (OffsetGuideRL != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRL);
            }
            if (OffsetGuideFR != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideFR);
            }
            if (OffsetGuideRR != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetGuideRR);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_63_INDIVIDUAL_CHANGE_REQ other)
        {
            if (other == null)
            {
                return;
            }
            if (other.OffsetGuideFL != 0)
            {
                OffsetGuideFL = other.OffsetGuideFL;
            }
            if (other.OffsetGuideRL != 0)
            {
                OffsetGuideRL = other.OffsetGuideRL;
            }
            if (other.OffsetGuideFR != 0)
            {
                OffsetGuideFR = other.OffsetGuideFR;
            }
            if (other.OffsetGuideRR != 0)
            {
                OffsetGuideRR = other.OffsetGuideRR;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            OffsetGuideFL = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            OffsetGuideRL = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            OffsetGuideFR = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            OffsetGuideRR = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_163_INDIVIDUAL_CHANGE_RESPONSE : pb::IMessage<ID_163_INDIVIDUAL_CHANGE_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_163_INDIVIDUAL_CHANGE_RESPONSE> _parser = new pb::MessageParser<ID_163_INDIVIDUAL_CHANGE_RESPONSE>(() => new ID_163_INDIVIDUAL_CHANGE_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_163_INDIVIDUAL_CHANGE_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[23]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_163_INDIVIDUAL_CHANGE_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_163_INDIVIDUAL_CHANGE_RESPONSE(ID_163_INDIVIDUAL_CHANGE_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_163_INDIVIDUAL_CHANGE_RESPONSE Clone()
        {
            return new ID_163_INDIVIDUAL_CHANGE_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_163_INDIVIDUAL_CHANGE_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_163_INDIVIDUAL_CHANGE_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_163_INDIVIDUAL_CHANGE_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_31_TRANS_REQUEST : pb::IMessage<ID_31_TRANS_REQUEST>
    {
        private static readonly pb::MessageParser<ID_31_TRANS_REQUEST> _parser = new pb::MessageParser<ID_31_TRANS_REQUEST>(() => new ID_31_TRANS_REQUEST());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_31_TRANS_REQUEST> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[24]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_31_TRANS_REQUEST()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_31_TRANS_REQUEST(ID_31_TRANS_REQUEST other) : this()
        {
            cmdID_ = other.cmdID_;
            actType_ = other.actType_;
            loadAdr_ = other.loadAdr_;
            toAdr_ = other.toAdr_;
            secDistance_ = other.secDistance_;
            cSTID_ = other.cSTID_;
            guideSections_ = other.guideSections_.Clone();
            guideSegments_ = other.guideSegments_.Clone();
            cycleSections_ = other.cycleSections_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_31_TRANS_REQUEST Clone()
        {
            return new ID_31_TRANS_REQUEST(this);
        }

        /// <summary>Field number for the "Cmd_ID" field.</summary>
        public const int CmdIDFieldNumber = 1;
        private string cmdID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CmdID
        {
            get { return cmdID_; }
            set
            {
                cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ActType" field.</summary>
        public const int ActTypeFieldNumber = 2;
        private global::TcpIpClientSample.ActiveType actType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ActiveType ActType
        {
            get { return actType_; }
            set
            {
                actType_ = value;
            }
        }

        /// <summary>Field number for the "LoadAdr" field.</summary>
        public const int LoadAdrFieldNumber = 3;
        private string loadAdr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LoadAdr
        {
            get { return loadAdr_; }
            set
            {
                loadAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ToAdr" field.</summary>
        public const int ToAdrFieldNumber = 4;
        private string toAdr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ToAdr
        {
            get { return toAdr_; }
            set
            {
                toAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Sec_Distance" field.</summary>
        public const int SecDistanceFieldNumber = 5;
        private uint secDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SecDistance
        {
            get { return secDistance_; }
            set
            {
                secDistance_ = value;
            }
        }

        /// <summary>Field number for the "CST_ID" field.</summary>
        public const int CSTIDFieldNumber = 6;
        private string cSTID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CSTID
        {
            get { return cSTID_; }
            set
            {
                cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Guide_Sections" field.</summary>
        public const int GuideSectionsFieldNumber = 7;
        private static readonly pb::FieldCodec<string> _repeated_guideSections_codec
            = pb::FieldCodec.ForString(58);
        private readonly pbc::RepeatedField<string> guideSections_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> GuideSections
        {
            get { return guideSections_; }
        }

        /// <summary>Field number for the "Guide_Segments" field.</summary>
        public const int GuideSegmentsFieldNumber = 8;
        private static readonly pb::FieldCodec<string> _repeated_guideSegments_codec
            = pb::FieldCodec.ForString(66);
        private readonly pbc::RepeatedField<string> guideSegments_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> GuideSegments
        {
            get { return guideSegments_; }
        }

        /// <summary>Field number for the "Cycle_Sections" field.</summary>
        public const int CycleSectionsFieldNumber = 9;
        private static readonly pb::FieldCodec<string> _repeated_cycleSections_codec
            = pb::FieldCodec.ForString(74);
        private readonly pbc::RepeatedField<string> cycleSections_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> CycleSections
        {
            get { return cycleSections_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_31_TRANS_REQUEST);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_31_TRANS_REQUEST other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (CmdID != other.CmdID) return false;
            if (ActType != other.ActType) return false;
            if (LoadAdr != other.LoadAdr) return false;
            if (ToAdr != other.ToAdr) return false;
            if (SecDistance != other.SecDistance) return false;
            if (CSTID != other.CSTID) return false;
            if (!guideSections_.Equals(other.guideSections_)) return false;
            if (!guideSegments_.Equals(other.guideSegments_)) return false;
            if (!cycleSections_.Equals(other.cycleSections_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
            if (ActType != 0) hash ^= ActType.GetHashCode();
            if (LoadAdr.Length != 0) hash ^= LoadAdr.GetHashCode();
            if (ToAdr.Length != 0) hash ^= ToAdr.GetHashCode();
            if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
            if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
            hash ^= guideSections_.GetHashCode();
            hash ^= guideSegments_.GetHashCode();
            hash ^= cycleSections_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (CmdID.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(CmdID);
            }
            if (ActType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)ActType);
            }
            if (LoadAdr.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(LoadAdr);
            }
            if (ToAdr.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(ToAdr);
            }
            if (SecDistance != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(SecDistance);
            }
            if (CSTID.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(CSTID);
            }
            guideSections_.WriteTo(output, _repeated_guideSections_codec);
            guideSegments_.WriteTo(output, _repeated_guideSegments_codec);
            cycleSections_.WriteTo(output, _repeated_cycleSections_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (CmdID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
            }
            if (ActType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ActType);
            }
            if (LoadAdr.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LoadAdr);
            }
            if (ToAdr.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAdr);
            }
            if (SecDistance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
            }
            if (CSTID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CSTID);
            }
            size += guideSections_.CalculateSize(_repeated_guideSections_codec);
            size += guideSegments_.CalculateSize(_repeated_guideSegments_codec);
            size += cycleSections_.CalculateSize(_repeated_cycleSections_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_31_TRANS_REQUEST other)
        {
            if (other == null)
            {
                return;
            }
            if (other.CmdID.Length != 0)
            {
                CmdID = other.CmdID;
            }
            if (other.ActType != 0)
            {
                ActType = other.ActType;
            }
            if (other.LoadAdr.Length != 0)
            {
                LoadAdr = other.LoadAdr;
            }
            if (other.ToAdr.Length != 0)
            {
                ToAdr = other.ToAdr;
            }
            if (other.SecDistance != 0)
            {
                SecDistance = other.SecDistance;
            }
            if (other.CSTID.Length != 0)
            {
                CSTID = other.CSTID;
            }
            guideSections_.Add(other.guideSections_);
            guideSegments_.Add(other.guideSegments_);
            cycleSections_.Add(other.cycleSections_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            CmdID = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            actType_ = (global::TcpIpClientSample.ActiveType)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            LoadAdr = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            ToAdr = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            SecDistance = input.ReadUInt32();
                            break;
                        }
                    case 50:
                        {
                            CSTID = input.ReadString();
                            break;
                        }
                    case 58:
                        {
                            guideSections_.AddEntriesFrom(input, _repeated_guideSections_codec);
                            break;
                        }
                    case 66:
                        {
                            guideSegments_.AddEntriesFrom(input, _repeated_guideSegments_codec);
                            break;
                        }
                    case 74:
                        {
                            cycleSections_.AddEntriesFrom(input, _repeated_cycleSections_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_131_TRANS_RESPONSE : pb::IMessage<ID_131_TRANS_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_131_TRANS_RESPONSE> _parser = new pb::MessageParser<ID_131_TRANS_RESPONSE>(() => new ID_131_TRANS_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_131_TRANS_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[25]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_131_TRANS_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_131_TRANS_RESPONSE(ID_131_TRANS_RESPONSE other) : this()
        {
            cmdID_ = other.cmdID_;
            actType_ = other.actType_;
            replyCode_ = other.replyCode_;
            ngReason_ = other.ngReason_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_131_TRANS_RESPONSE Clone()
        {
            return new ID_131_TRANS_RESPONSE(this);
        }

        /// <summary>Field number for the "Cmd_ID" field.</summary>
        public const int CmdIDFieldNumber = 1;
        private string cmdID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CmdID
        {
            get { return cmdID_; }
            set
            {
                cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ActType" field.</summary>
        public const int ActTypeFieldNumber = 2;
        private global::TcpIpClientSample.ActiveType actType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ActiveType ActType
        {
            get { return actType_; }
            set
            {
                actType_ = value;
            }
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 3;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        /// <summary>Field number for the "NgReason" field.</summary>
        public const int NgReasonFieldNumber = 4;
        private string ngReason_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NgReason
        {
            get { return ngReason_; }
            set
            {
                ngReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_131_TRANS_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_131_TRANS_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (CmdID != other.CmdID) return false;
            if (ActType != other.ActType) return false;
            if (ReplyCode != other.ReplyCode) return false;
            if (NgReason != other.NgReason) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
            if (ActType != 0) hash ^= ActType.GetHashCode();
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            if (NgReason.Length != 0) hash ^= NgReason.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (CmdID.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(CmdID);
            }
            if (ActType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)ActType);
            }
            if (ReplyCode != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(ReplyCode);
            }
            if (NgReason.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(NgReason);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (CmdID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
            }
            if (ActType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ActType);
            }
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            if (NgReason.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(NgReason);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_131_TRANS_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.CmdID.Length != 0)
            {
                CmdID = other.CmdID;
            }
            if (other.ActType != 0)
            {
                ActType = other.ActType;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
            if (other.NgReason.Length != 0)
            {
                NgReason = other.NgReason;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            CmdID = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            actType_ = (global::TcpIpClientSample.ActiveType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                    case 34:
                        {
                            NgReason = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_132_TRANS_COMPLETE_REPORT : pb::IMessage<ID_132_TRANS_COMPLETE_REPORT>
    {
        private static readonly pb::MessageParser<ID_132_TRANS_COMPLETE_REPORT> _parser = new pb::MessageParser<ID_132_TRANS_COMPLETE_REPORT>(() => new ID_132_TRANS_COMPLETE_REPORT());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_132_TRANS_COMPLETE_REPORT> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[26]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_132_TRANS_COMPLETE_REPORT()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_132_TRANS_COMPLETE_REPORT(ID_132_TRANS_COMPLETE_REPORT other) : this()
        {
            cmdID_ = other.cmdID_;
            cSTID_ = other.cSTID_;
            cmpStatus_ = other.cmpStatus_;
            currentAdrID_ = other.currentAdrID_;
            currentSecID_ = other.currentSecID_;
            secDistance_ = other.secDistance_;
            cmdDistance_ = other.cmdDistance_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_132_TRANS_COMPLETE_REPORT Clone()
        {
            return new ID_132_TRANS_COMPLETE_REPORT(this);
        }

        /// <summary>Field number for the "Cmd_ID" field.</summary>
        public const int CmdIDFieldNumber = 1;
        private string cmdID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CmdID
        {
            get { return cmdID_; }
            set
            {
                cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CST_ID" field.</summary>
        public const int CSTIDFieldNumber = 2;
        private string cSTID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CSTID
        {
            get { return cSTID_; }
            set
            {
                cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CmpStatus" field.</summary>
        public const int CmpStatusFieldNumber = 3;
        private global::TcpIpClientSample.CompleteStatus cmpStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.CompleteStatus CmpStatus
        {
            get { return cmpStatus_; }
            set
            {
                cmpStatus_ = value;
            }
        }

        /// <summary>Field number for the "CurrentAdrID" field.</summary>
        public const int CurrentAdrIDFieldNumber = 4;
        private string currentAdrID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentAdrID
        {
            get { return currentAdrID_; }
            set
            {
                currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CurrentSecID" field.</summary>
        public const int CurrentSecIDFieldNumber = 5;
        private string currentSecID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentSecID
        {
            get { return currentSecID_; }
            set
            {
                currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Sec_Distance" field.</summary>
        public const int SecDistanceFieldNumber = 6;
        private uint secDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SecDistance
        {
            get { return secDistance_; }
            set
            {
                secDistance_ = value;
            }
        }

        /// <summary>Field number for the "Cmd_Distance" field.</summary>
        public const int CmdDistanceFieldNumber = 7;
        private int cmdDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CmdDistance
        {
            get { return cmdDistance_; }
            set
            {
                cmdDistance_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_132_TRANS_COMPLETE_REPORT);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_132_TRANS_COMPLETE_REPORT other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (CmdID != other.CmdID) return false;
            if (CSTID != other.CSTID) return false;
            if (CmpStatus != other.CmpStatus) return false;
            if (CurrentAdrID != other.CurrentAdrID) return false;
            if (CurrentSecID != other.CurrentSecID) return false;
            if (SecDistance != other.SecDistance) return false;
            if (CmdDistance != other.CmdDistance) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
            if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
            if (CmpStatus != 0) hash ^= CmpStatus.GetHashCode();
            if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
            if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
            if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
            if (CmdDistance != 0) hash ^= CmdDistance.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (CmdID.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(CmdID);
            }
            if (CSTID.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(CSTID);
            }
            if (CmpStatus != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)CmpStatus);
            }
            if (CurrentAdrID.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(CurrentAdrID);
            }
            if (CurrentSecID.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(CurrentSecID);
            }
            if (SecDistance != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(SecDistance);
            }
            if (CmdDistance != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(CmdDistance);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (CmdID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
            }
            if (CSTID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CSTID);
            }
            if (CmpStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)CmpStatus);
            }
            if (CurrentAdrID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
            }
            if (CurrentSecID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
            }
            if (SecDistance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
            }
            if (CmdDistance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(CmdDistance);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_132_TRANS_COMPLETE_REPORT other)
        {
            if (other == null)
            {
                return;
            }
            if (other.CmdID.Length != 0)
            {
                CmdID = other.CmdID;
            }
            if (other.CSTID.Length != 0)
            {
                CSTID = other.CSTID;
            }
            if (other.CmpStatus != 0)
            {
                CmpStatus = other.CmpStatus;
            }
            if (other.CurrentAdrID.Length != 0)
            {
                CurrentAdrID = other.CurrentAdrID;
            }
            if (other.CurrentSecID.Length != 0)
            {
                CurrentSecID = other.CurrentSecID;
            }
            if (other.SecDistance != 0)
            {
                SecDistance = other.SecDistance;
            }
            if (other.CmdDistance != 0)
            {
                CmdDistance = other.CmdDistance;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            CmdID = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            CSTID = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            cmpStatus_ = (global::TcpIpClientSample.CompleteStatus)input.ReadEnum();
                            break;
                        }
                    case 34:
                        {
                            CurrentAdrID = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            CurrentSecID = input.ReadString();
                            break;
                        }
                    case 48:
                        {
                            SecDistance = input.ReadUInt32();
                            break;
                        }
                    case 56:
                        {
                            CmdDistance = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_32_TRANS_COMPLETE_RESPONSE : pb::IMessage<ID_32_TRANS_COMPLETE_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_32_TRANS_COMPLETE_RESPONSE> _parser = new pb::MessageParser<ID_32_TRANS_COMPLETE_RESPONSE>(() => new ID_32_TRANS_COMPLETE_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_32_TRANS_COMPLETE_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[27]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_32_TRANS_COMPLETE_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_32_TRANS_COMPLETE_RESPONSE(ID_32_TRANS_COMPLETE_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_32_TRANS_COMPLETE_RESPONSE Clone()
        {
            return new ID_32_TRANS_COMPLETE_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_32_TRANS_COMPLETE_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_32_TRANS_COMPLETE_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_32_TRANS_COMPLETE_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST : pb::IMessage<ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST>
    {
        private static readonly pb::MessageParser<ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST> _parser = new pb::MessageParser<ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST>(() => new ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[28]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST(ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST other) : this()
        {
            controlType_ = other.controlType_;
            cancelSecID_ = other.cancelSecID_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST Clone()
        {
            return new ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST(this);
        }

        /// <summary>Field number for the "ControlType" field.</summary>
        public const int ControlTypeFieldNumber = 1;
        private global::TcpIpClientSample.ControlType controlType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ControlType ControlType
        {
            get { return controlType_; }
            set
            {
                controlType_ = value;
            }
        }

        /// <summary>Field number for the "CancelSecID" field.</summary>
        public const int CancelSecIDFieldNumber = 2;
        private string cancelSecID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CancelSecID
        {
            get { return cancelSecID_; }
            set
            {
                cancelSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ControlType != other.ControlType) return false;
            if (CancelSecID != other.CancelSecID) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ControlType != 0) hash ^= ControlType.GetHashCode();
            if (CancelSecID.Length != 0) hash ^= CancelSecID.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ControlType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ControlType);
            }
            if (CancelSecID.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(CancelSecID);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ControlType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ControlType);
            }
            if (CancelSecID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CancelSecID);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ControlType != 0)
            {
                ControlType = other.ControlType;
            }
            if (other.CancelSecID.Length != 0)
            {
                CancelSecID = other.CancelSecID;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            controlType_ = (global::TcpIpClientSample.ControlType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            CancelSecID = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE : pb::IMessage<ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE> _parser = new pb::MessageParser<ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE>(() => new ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[29]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE(ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE other) : this()
        {
            controlType_ = other.controlType_;
            cancelSecID_ = other.cancelSecID_;
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE Clone()
        {
            return new ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE(this);
        }

        /// <summary>Field number for the "ControlType" field.</summary>
        public const int ControlTypeFieldNumber = 1;
        private global::TcpIpClientSample.ControlType controlType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ControlType ControlType
        {
            get { return controlType_; }
            set
            {
                controlType_ = value;
            }
        }

        /// <summary>Field number for the "CancelSecID" field.</summary>
        public const int CancelSecIDFieldNumber = 2;
        private string cancelSecID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CancelSecID
        {
            get { return cancelSecID_; }
            set
            {
                cancelSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 3;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ControlType != other.ControlType) return false;
            if (CancelSecID != other.CancelSecID) return false;
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ControlType != 0) hash ^= ControlType.GetHashCode();
            if (CancelSecID.Length != 0) hash ^= CancelSecID.GetHashCode();
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ControlType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)ControlType);
            }
            if (CancelSecID.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(CancelSecID);
            }
            if (ReplyCode != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ControlType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ControlType);
            }
            if (CancelSecID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CancelSecID);
            }
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ControlType != 0)
            {
                ControlType = other.ControlType;
            }
            if (other.CancelSecID.Length != 0)
            {
                CancelSecID = other.CancelSecID;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            controlType_ = (global::TcpIpClientSample.ControlType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            CancelSecID = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_134_TRANS_EVENT_REP : pb::IMessage<ID_134_TRANS_EVENT_REP>
    {
        private static readonly pb::MessageParser<ID_134_TRANS_EVENT_REP> _parser = new pb::MessageParser<ID_134_TRANS_EVENT_REP>(() => new ID_134_TRANS_EVENT_REP());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_134_TRANS_EVENT_REP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[30]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_134_TRANS_EVENT_REP()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_134_TRANS_EVENT_REP(ID_134_TRANS_EVENT_REP other) : this()
        {
            eventType_ = other.eventType_;
            currentAdrID_ = other.currentAdrID_;
            currentSecID_ = other.currentSecID_;
            leftGuideLockStatus_ = other.leftGuideLockStatus_;
            rightGuideLockStatus_ = other.rightGuideLockStatus_;
            secDistance_ = other.secDistance_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_134_TRANS_EVENT_REP Clone()
        {
            return new ID_134_TRANS_EVENT_REP(this);
        }

        /// <summary>Field number for the "EventType" field.</summary>
        public const int EventTypeFieldNumber = 1;
        private global::TcpIpClientSample.EventType eventType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.EventType EventType
        {
            get { return eventType_; }
            set
            {
                eventType_ = value;
            }
        }

        /// <summary>Field number for the "CurrentAdrID" field.</summary>
        public const int CurrentAdrIDFieldNumber = 2;
        private string currentAdrID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentAdrID
        {
            get { return currentAdrID_; }
            set
            {
                currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CurrentSecID" field.</summary>
        public const int CurrentSecIDFieldNumber = 3;
        private string currentSecID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentSecID
        {
            get { return currentSecID_; }
            set
            {
                currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "LeftGuideLockStatus" field.</summary>
        public const int LeftGuideLockStatusFieldNumber = 5;
        private global::TcpIpClientSample.VhGuideStatus leftGuideLockStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhGuideStatus LeftGuideLockStatus
        {
            get { return leftGuideLockStatus_; }
            set
            {
                leftGuideLockStatus_ = value;
            }
        }

        /// <summary>Field number for the "RightGuideLockStatus" field.</summary>
        public const int RightGuideLockStatusFieldNumber = 6;
        private global::TcpIpClientSample.VhGuideStatus rightGuideLockStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhGuideStatus RightGuideLockStatus
        {
            get { return rightGuideLockStatus_; }
            set
            {
                rightGuideLockStatus_ = value;
            }
        }

        /// <summary>Field number for the "Sec_Distance" field.</summary>
        public const int SecDistanceFieldNumber = 7;
        private uint secDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SecDistance
        {
            get { return secDistance_; }
            set
            {
                secDistance_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_134_TRANS_EVENT_REP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_134_TRANS_EVENT_REP other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EventType != other.EventType) return false;
            if (CurrentAdrID != other.CurrentAdrID) return false;
            if (CurrentSecID != other.CurrentSecID) return false;
            if (LeftGuideLockStatus != other.LeftGuideLockStatus) return false;
            if (RightGuideLockStatus != other.RightGuideLockStatus) return false;
            if (SecDistance != other.SecDistance) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EventType != 0) hash ^= EventType.GetHashCode();
            if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
            if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
            if (LeftGuideLockStatus != 0) hash ^= LeftGuideLockStatus.GetHashCode();
            if (RightGuideLockStatus != 0) hash ^= RightGuideLockStatus.GetHashCode();
            if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EventType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)EventType);
            }
            if (CurrentAdrID.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(CurrentAdrID);
            }
            if (CurrentSecID.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(CurrentSecID);
            }
            if (LeftGuideLockStatus != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)LeftGuideLockStatus);
            }
            if (RightGuideLockStatus != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)RightGuideLockStatus);
            }
            if (SecDistance != 0)
            {
                output.WriteRawTag(56);
                output.WriteUInt32(SecDistance);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EventType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)EventType);
            }
            if (CurrentAdrID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
            }
            if (CurrentSecID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
            }
            if (LeftGuideLockStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)LeftGuideLockStatus);
            }
            if (RightGuideLockStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)RightGuideLockStatus);
            }
            if (SecDistance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_134_TRANS_EVENT_REP other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EventType != 0)
            {
                EventType = other.EventType;
            }
            if (other.CurrentAdrID.Length != 0)
            {
                CurrentAdrID = other.CurrentAdrID;
            }
            if (other.CurrentSecID.Length != 0)
            {
                CurrentSecID = other.CurrentSecID;
            }
            if (other.LeftGuideLockStatus != 0)
            {
                LeftGuideLockStatus = other.LeftGuideLockStatus;
            }
            if (other.RightGuideLockStatus != 0)
            {
                RightGuideLockStatus = other.RightGuideLockStatus;
            }
            if (other.SecDistance != 0)
            {
                SecDistance = other.SecDistance;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            eventType_ = (global::TcpIpClientSample.EventType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            CurrentAdrID = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            CurrentSecID = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            leftGuideLockStatus_ = (global::TcpIpClientSample.VhGuideStatus)input.ReadEnum();
                            break;
                        }
                    case 48:
                        {
                            rightGuideLockStatus_ = (global::TcpIpClientSample.VhGuideStatus)input.ReadEnum();
                            break;
                        }
                    case 56:
                        {
                            SecDistance = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_136_TRANS_EVENT_REP : pb::IMessage<ID_136_TRANS_EVENT_REP>
    {
        private static readonly pb::MessageParser<ID_136_TRANS_EVENT_REP> _parser = new pb::MessageParser<ID_136_TRANS_EVENT_REP>(() => new ID_136_TRANS_EVENT_REP());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_136_TRANS_EVENT_REP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[31]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_136_TRANS_EVENT_REP()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_136_TRANS_EVENT_REP(ID_136_TRANS_EVENT_REP other) : this()
        {
            eventType_ = other.eventType_;
            requestBlockID_ = other.requestBlockID_;
            requestHIDID_ = other.requestHIDID_;
            cSTID_ = other.cSTID_;
            releaseBlockAdrID_ = other.releaseBlockAdrID_;
            releaseHIDAdrID_ = other.releaseHIDAdrID_;
            currentAdrID_ = other.currentAdrID_;
            currentSecID_ = other.currentSecID_;
            secDistance_ = other.secDistance_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_136_TRANS_EVENT_REP Clone()
        {
            return new ID_136_TRANS_EVENT_REP(this);
        }

        /// <summary>Field number for the "EventType" field.</summary>
        public const int EventTypeFieldNumber = 1;
        private global::TcpIpClientSample.EventType eventType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.EventType EventType
        {
            get { return eventType_; }
            set
            {
                eventType_ = value;
            }
        }

        /// <summary>Field number for the "Request_Block_ID" field.</summary>
        public const int RequestBlockIDFieldNumber = 2;
        private string requestBlockID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RequestBlockID
        {
            get { return requestBlockID_; }
            set
            {
                requestBlockID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Request_HID_ID" field.</summary>
        public const int RequestHIDIDFieldNumber = 3;
        private string requestHIDID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RequestHIDID
        {
            get { return requestHIDID_; }
            set
            {
                requestHIDID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CST_ID" field.</summary>
        public const int CSTIDFieldNumber = 5;
        private string cSTID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CSTID
        {
            get { return cSTID_; }
            set
            {
                cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Release_Block_AdrID" field.</summary>
        public const int ReleaseBlockAdrIDFieldNumber = 6;
        private string releaseBlockAdrID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ReleaseBlockAdrID
        {
            get { return releaseBlockAdrID_; }
            set
            {
                releaseBlockAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Release_HID_AdrID" field.</summary>
        public const int ReleaseHIDAdrIDFieldNumber = 7;
        private string releaseHIDAdrID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ReleaseHIDAdrID
        {
            get { return releaseHIDAdrID_; }
            set
            {
                releaseHIDAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CurrentAdrID" field.</summary>
        public const int CurrentAdrIDFieldNumber = 8;
        private string currentAdrID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentAdrID
        {
            get { return currentAdrID_; }
            set
            {
                currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CurrentSecID" field.</summary>
        public const int CurrentSecIDFieldNumber = 9;
        private string currentSecID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentSecID
        {
            get { return currentSecID_; }
            set
            {
                currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Sec_Distance" field.</summary>
        public const int SecDistanceFieldNumber = 10;
        private uint secDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SecDistance
        {
            get { return secDistance_; }
            set
            {
                secDistance_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_136_TRANS_EVENT_REP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_136_TRANS_EVENT_REP other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EventType != other.EventType) return false;
            if (RequestBlockID != other.RequestBlockID) return false;
            if (RequestHIDID != other.RequestHIDID) return false;
            if (CSTID != other.CSTID) return false;
            if (ReleaseBlockAdrID != other.ReleaseBlockAdrID) return false;
            if (ReleaseHIDAdrID != other.ReleaseHIDAdrID) return false;
            if (CurrentAdrID != other.CurrentAdrID) return false;
            if (CurrentSecID != other.CurrentSecID) return false;
            if (SecDistance != other.SecDistance) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EventType != 0) hash ^= EventType.GetHashCode();
            if (RequestBlockID.Length != 0) hash ^= RequestBlockID.GetHashCode();
            if (RequestHIDID.Length != 0) hash ^= RequestHIDID.GetHashCode();
            if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
            if (ReleaseBlockAdrID.Length != 0) hash ^= ReleaseBlockAdrID.GetHashCode();
            if (ReleaseHIDAdrID.Length != 0) hash ^= ReleaseHIDAdrID.GetHashCode();
            if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
            if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
            if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EventType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)EventType);
            }
            if (RequestBlockID.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(RequestBlockID);
            }
            if (RequestHIDID.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(RequestHIDID);
            }
            if (CSTID.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(CSTID);
            }
            if (ReleaseBlockAdrID.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(ReleaseBlockAdrID);
            }
            if (ReleaseHIDAdrID.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteString(ReleaseHIDAdrID);
            }
            if (CurrentAdrID.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteString(CurrentAdrID);
            }
            if (CurrentSecID.Length != 0)
            {
                output.WriteRawTag(74);
                output.WriteString(CurrentSecID);
            }
            if (SecDistance != 0)
            {
                output.WriteRawTag(80);
                output.WriteUInt32(SecDistance);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EventType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)EventType);
            }
            if (RequestBlockID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestBlockID);
            }
            if (RequestHIDID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestHIDID);
            }
            if (CSTID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CSTID);
            }
            if (ReleaseBlockAdrID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ReleaseBlockAdrID);
            }
            if (ReleaseHIDAdrID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ReleaseHIDAdrID);
            }
            if (CurrentAdrID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
            }
            if (CurrentSecID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
            }
            if (SecDistance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_136_TRANS_EVENT_REP other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EventType != 0)
            {
                EventType = other.EventType;
            }
            if (other.RequestBlockID.Length != 0)
            {
                RequestBlockID = other.RequestBlockID;
            }
            if (other.RequestHIDID.Length != 0)
            {
                RequestHIDID = other.RequestHIDID;
            }
            if (other.CSTID.Length != 0)
            {
                CSTID = other.CSTID;
            }
            if (other.ReleaseBlockAdrID.Length != 0)
            {
                ReleaseBlockAdrID = other.ReleaseBlockAdrID;
            }
            if (other.ReleaseHIDAdrID.Length != 0)
            {
                ReleaseHIDAdrID = other.ReleaseHIDAdrID;
            }
            if (other.CurrentAdrID.Length != 0)
            {
                CurrentAdrID = other.CurrentAdrID;
            }
            if (other.CurrentSecID.Length != 0)
            {
                CurrentSecID = other.CurrentSecID;
            }
            if (other.SecDistance != 0)
            {
                SecDistance = other.SecDistance;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            eventType_ = (global::TcpIpClientSample.EventType)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            RequestBlockID = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            RequestHIDID = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            CSTID = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            ReleaseBlockAdrID = input.ReadString();
                            break;
                        }
                    case 58:
                        {
                            ReleaseHIDAdrID = input.ReadString();
                            break;
                        }
                    case 66:
                        {
                            CurrentAdrID = input.ReadString();
                            break;
                        }
                    case 74:
                        {
                            CurrentSecID = input.ReadString();
                            break;
                        }
                    case 80:
                        {
                            SecDistance = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_36_TRANS_EVENT_RESPONSE : pb::IMessage<ID_36_TRANS_EVENT_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_36_TRANS_EVENT_RESPONSE> _parser = new pb::MessageParser<ID_36_TRANS_EVENT_RESPONSE>(() => new ID_36_TRANS_EVENT_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_36_TRANS_EVENT_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[32]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_36_TRANS_EVENT_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_36_TRANS_EVENT_RESPONSE(ID_36_TRANS_EVENT_RESPONSE other) : this()
        {
            isBlockPass_ = other.isBlockPass_;
            isHIDPass_ = other.isHIDPass_;
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_36_TRANS_EVENT_RESPONSE Clone()
        {
            return new ID_36_TRANS_EVENT_RESPONSE(this);
        }

        /// <summary>Field number for the "Is_Block_Pass" field.</summary>
        public const int IsBlockPassFieldNumber = 1;
        private global::TcpIpClientSample.PassType isBlockPass_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.PassType IsBlockPass
        {
            get { return isBlockPass_; }
            set
            {
                isBlockPass_ = value;
            }
        }

        /// <summary>Field number for the "Is_HID_Pass" field.</summary>
        public const int IsHIDPassFieldNumber = 2;
        private global::TcpIpClientSample.PassType isHIDPass_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.PassType IsHIDPass
        {
            get { return isHIDPass_; }
            set
            {
                isHIDPass_ = value;
            }
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 3;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_36_TRANS_EVENT_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_36_TRANS_EVENT_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (IsBlockPass != other.IsBlockPass) return false;
            if (IsHIDPass != other.IsHIDPass) return false;
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (IsBlockPass != 0) hash ^= IsBlockPass.GetHashCode();
            if (IsHIDPass != 0) hash ^= IsHIDPass.GetHashCode();
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (IsBlockPass != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)IsBlockPass);
            }
            if (IsHIDPass != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)IsHIDPass);
            }
            if (ReplyCode != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (IsBlockPass != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)IsBlockPass);
            }
            if (IsHIDPass != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)IsHIDPass);
            }
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_36_TRANS_EVENT_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.IsBlockPass != 0)
            {
                IsBlockPass = other.IsBlockPass;
            }
            if (other.IsHIDPass != 0)
            {
                IsHIDPass = other.IsHIDPass;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            isBlockPass_ = (global::TcpIpClientSample.PassType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            isHIDPass_ = (global::TcpIpClientSample.PassType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_37_TRANS_CANCEL_REQUEST : pb::IMessage<ID_37_TRANS_CANCEL_REQUEST>
    {
        private static readonly pb::MessageParser<ID_37_TRANS_CANCEL_REQUEST> _parser = new pb::MessageParser<ID_37_TRANS_CANCEL_REQUEST>(() => new ID_37_TRANS_CANCEL_REQUEST());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_37_TRANS_CANCEL_REQUEST> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[33]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_37_TRANS_CANCEL_REQUEST()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_37_TRANS_CANCEL_REQUEST(ID_37_TRANS_CANCEL_REQUEST other) : this()
        {
            cmdID_ = other.cmdID_;
            actType_ = other.actType_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_37_TRANS_CANCEL_REQUEST Clone()
        {
            return new ID_37_TRANS_CANCEL_REQUEST(this);
        }

        /// <summary>Field number for the "Cmd_ID" field.</summary>
        public const int CmdIDFieldNumber = 1;
        private string cmdID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CmdID
        {
            get { return cmdID_; }
            set
            {
                cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ActType" field.</summary>
        public const int ActTypeFieldNumber = 2;
        private global::TcpIpClientSample.CMDCancelType actType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.CMDCancelType ActType
        {
            get { return actType_; }
            set
            {
                actType_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_37_TRANS_CANCEL_REQUEST);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_37_TRANS_CANCEL_REQUEST other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (CmdID != other.CmdID) return false;
            if (ActType != other.ActType) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
            if (ActType != 0) hash ^= ActType.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (CmdID.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(CmdID);
            }
            if (ActType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)ActType);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (CmdID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
            }
            if (ActType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ActType);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_37_TRANS_CANCEL_REQUEST other)
        {
            if (other == null)
            {
                return;
            }
            if (other.CmdID.Length != 0)
            {
                CmdID = other.CmdID;
            }
            if (other.ActType != 0)
            {
                ActType = other.ActType;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            CmdID = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            actType_ = (global::TcpIpClientSample.CMDCancelType)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_137_TRANS_CANCEL_RESPONSE : pb::IMessage<ID_137_TRANS_CANCEL_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_137_TRANS_CANCEL_RESPONSE> _parser = new pb::MessageParser<ID_137_TRANS_CANCEL_RESPONSE>(() => new ID_137_TRANS_CANCEL_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_137_TRANS_CANCEL_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[34]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_137_TRANS_CANCEL_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_137_TRANS_CANCEL_RESPONSE(ID_137_TRANS_CANCEL_RESPONSE other) : this()
        {
            cmdID_ = other.cmdID_;
            actType_ = other.actType_;
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_137_TRANS_CANCEL_RESPONSE Clone()
        {
            return new ID_137_TRANS_CANCEL_RESPONSE(this);
        }

        /// <summary>Field number for the "Cmd_ID" field.</summary>
        public const int CmdIDFieldNumber = 1;
        private string cmdID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CmdID
        {
            get { return cmdID_; }
            set
            {
                cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ActType" field.</summary>
        public const int ActTypeFieldNumber = 2;
        private global::TcpIpClientSample.CMDCancelType actType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.CMDCancelType ActType
        {
            get { return actType_; }
            set
            {
                actType_ = value;
            }
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 3;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_137_TRANS_CANCEL_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_137_TRANS_CANCEL_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (CmdID != other.CmdID) return false;
            if (ActType != other.ActType) return false;
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
            if (ActType != 0) hash ^= ActType.GetHashCode();
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (CmdID.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(CmdID);
            }
            if (ActType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)ActType);
            }
            if (ReplyCode != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (CmdID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdID);
            }
            if (ActType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ActType);
            }
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_137_TRANS_CANCEL_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.CmdID.Length != 0)
            {
                CmdID = other.CmdID;
            }
            if (other.ActType != 0)
            {
                ActType = other.ActType;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            CmdID = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            actType_ = (global::TcpIpClientSample.CMDCancelType)input.ReadEnum();
                            break;
                        }
                    case 24:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_39_PAUSE_REQUEST : pb::IMessage<ID_39_PAUSE_REQUEST>
    {
        private static readonly pb::MessageParser<ID_39_PAUSE_REQUEST> _parser = new pb::MessageParser<ID_39_PAUSE_REQUEST>(() => new ID_39_PAUSE_REQUEST());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_39_PAUSE_REQUEST> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[35]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_39_PAUSE_REQUEST()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_39_PAUSE_REQUEST(ID_39_PAUSE_REQUEST other) : this()
        {
            eventType_ = other.eventType_;
            pauseType_ = other.pauseType_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_39_PAUSE_REQUEST Clone()
        {
            return new ID_39_PAUSE_REQUEST(this);
        }

        /// <summary>Field number for the "EventType" field.</summary>
        public const int EventTypeFieldNumber = 1;
        private global::TcpIpClientSample.PauseEvent eventType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.PauseEvent EventType
        {
            get { return eventType_; }
            set
            {
                eventType_ = value;
            }
        }

        /// <summary>Field number for the "PauseType" field.</summary>
        public const int PauseTypeFieldNumber = 2;
        private global::TcpIpClientSample.PauseType pauseType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.PauseType PauseType
        {
            get { return pauseType_; }
            set
            {
                pauseType_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_39_PAUSE_REQUEST);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_39_PAUSE_REQUEST other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EventType != other.EventType) return false;
            if (PauseType != other.PauseType) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EventType != 0) hash ^= EventType.GetHashCode();
            if (PauseType != 0) hash ^= PauseType.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EventType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)EventType);
            }
            if (PauseType != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)PauseType);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EventType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)EventType);
            }
            if (PauseType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PauseType);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_39_PAUSE_REQUEST other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EventType != 0)
            {
                EventType = other.EventType;
            }
            if (other.PauseType != 0)
            {
                PauseType = other.PauseType;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            eventType_ = (global::TcpIpClientSample.PauseEvent)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            pauseType_ = (global::TcpIpClientSample.PauseType)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_139_PAUSE_RESPONSE : pb::IMessage<ID_139_PAUSE_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_139_PAUSE_RESPONSE> _parser = new pb::MessageParser<ID_139_PAUSE_RESPONSE>(() => new ID_139_PAUSE_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_139_PAUSE_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[36]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_139_PAUSE_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_139_PAUSE_RESPONSE(ID_139_PAUSE_RESPONSE other) : this()
        {
            eventType_ = other.eventType_;
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_139_PAUSE_RESPONSE Clone()
        {
            return new ID_139_PAUSE_RESPONSE(this);
        }

        /// <summary>Field number for the "EventType" field.</summary>
        public const int EventTypeFieldNumber = 1;
        private global::TcpIpClientSample.PauseEvent eventType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.PauseEvent EventType
        {
            get { return eventType_; }
            set
            {
                eventType_ = value;
            }
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 2;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_139_PAUSE_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_139_PAUSE_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (EventType != other.EventType) return false;
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (EventType != 0) hash ^= EventType.GetHashCode();
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (EventType != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)EventType);
            }
            if (ReplyCode != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (EventType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)EventType);
            }
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_139_PAUSE_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.EventType != 0)
            {
                EventType = other.EventType;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            eventType_ = (global::TcpIpClientSample.PauseEvent)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_41_MODE_CHANGE_REQ : pb::IMessage<ID_41_MODE_CHANGE_REQ>
    {
        private static readonly pb::MessageParser<ID_41_MODE_CHANGE_REQ> _parser = new pb::MessageParser<ID_41_MODE_CHANGE_REQ>(() => new ID_41_MODE_CHANGE_REQ());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_41_MODE_CHANGE_REQ> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[37]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_41_MODE_CHANGE_REQ()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_41_MODE_CHANGE_REQ(ID_41_MODE_CHANGE_REQ other) : this()
        {
            operatingVHMode_ = other.operatingVHMode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_41_MODE_CHANGE_REQ Clone()
        {
            return new ID_41_MODE_CHANGE_REQ(this);
        }

        /// <summary>Field number for the "OperatingVHMode" field.</summary>
        public const int OperatingVHModeFieldNumber = 1;
        private global::TcpIpClientSample.OperatingVHMode operatingVHMode_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.OperatingVHMode OperatingVHMode
        {
            get { return operatingVHMode_; }
            set
            {
                operatingVHMode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_41_MODE_CHANGE_REQ);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_41_MODE_CHANGE_REQ other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (OperatingVHMode != other.OperatingVHMode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (OperatingVHMode != 0) hash ^= OperatingVHMode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OperatingVHMode != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)OperatingVHMode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (OperatingVHMode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)OperatingVHMode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_41_MODE_CHANGE_REQ other)
        {
            if (other == null)
            {
                return;
            }
            if (other.OperatingVHMode != 0)
            {
                OperatingVHMode = other.OperatingVHMode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            operatingVHMode_ = (global::TcpIpClientSample.OperatingVHMode)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_141_MODE_CHANGE_RESPONSE : pb::IMessage<ID_141_MODE_CHANGE_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_141_MODE_CHANGE_RESPONSE> _parser = new pb::MessageParser<ID_141_MODE_CHANGE_RESPONSE>(() => new ID_141_MODE_CHANGE_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_141_MODE_CHANGE_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[38]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_141_MODE_CHANGE_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_141_MODE_CHANGE_RESPONSE(ID_141_MODE_CHANGE_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_141_MODE_CHANGE_RESPONSE Clone()
        {
            return new ID_141_MODE_CHANGE_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_141_MODE_CHANGE_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_141_MODE_CHANGE_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_141_MODE_CHANGE_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_43_STATUS_REQUEST : pb::IMessage<ID_43_STATUS_REQUEST>
    {
        private static readonly pb::MessageParser<ID_43_STATUS_REQUEST> _parser = new pb::MessageParser<ID_43_STATUS_REQUEST>(() => new ID_43_STATUS_REQUEST());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_43_STATUS_REQUEST> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[39]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_43_STATUS_REQUEST()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_43_STATUS_REQUEST(ID_43_STATUS_REQUEST other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_43_STATUS_REQUEST Clone()
        {
            return new ID_43_STATUS_REQUEST(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_43_STATUS_REQUEST);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_43_STATUS_REQUEST other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_43_STATUS_REQUEST other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

    }

    public sealed partial class ID_143_STATUS_RESPONSE : pb::IMessage<ID_143_STATUS_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_143_STATUS_RESPONSE> _parser = new pb::MessageParser<ID_143_STATUS_RESPONSE>(() => new ID_143_STATUS_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_143_STATUS_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[40]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_143_STATUS_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_143_STATUS_RESPONSE(ID_143_STATUS_RESPONSE other) : this()
        {
            currentAdrID_ = other.currentAdrID_;
            currentSecID_ = other.currentSecID_;
            modeStatus_ = other.modeStatus_;
            actionStatus_ = other.actionStatus_;
            powerStatus_ = other.powerStatus_;
            obstacleStatus_ = other.obstacleStatus_;
            blockingStatus_ = other.blockingStatus_;
            hIDStatus_ = other.hIDStatus_;
            pauseStatus_ = other.pauseStatus_;
            errorStatus_ = other.errorStatus_;
            secDistance_ = other.secDistance_;
            obstDistance_ = other.obstDistance_;
            obstVehicleID_ = other.obstVehicleID_;
            stoppedBlockID_ = other.stoppedBlockID_;
            stoppedHIDID_ = other.stoppedHIDID_;
            earthquakePauseTatus_ = other.earthquakePauseTatus_;
            safetyPauseStatus_ = other.safetyPauseStatus_;
            hasCST_ = other.hasCST_;
            cmdID_ = other.cmdID_;
            cSTID_ = other.cSTID_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_143_STATUS_RESPONSE Clone()
        {
            return new ID_143_STATUS_RESPONSE(this);
        }

        /// <summary>Field number for the "CurrentAdrID" field.</summary>
        public const int CurrentAdrIDFieldNumber = 1;
        private string currentAdrID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentAdrID
        {
            get { return currentAdrID_; }
            set
            {
                currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CurrentSecID" field.</summary>
        public const int CurrentSecIDFieldNumber = 2;
        private string currentSecID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentSecID
        {
            get { return currentSecID_; }
            set
            {
                currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ModeStatus" field.</summary>
        public const int ModeStatusFieldNumber = 3;
        private global::TcpIpClientSample.VHModeStatus modeStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VHModeStatus ModeStatus
        {
            get { return modeStatus_; }
            set
            {
                modeStatus_ = value;
            }
        }

        /// <summary>Field number for the "ActionStatus" field.</summary>
        public const int ActionStatusFieldNumber = 4;
        private global::TcpIpClientSample.VHActionStatus actionStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VHActionStatus ActionStatus
        {
            get { return actionStatus_; }
            set
            {
                actionStatus_ = value;
            }
        }

        /// <summary>Field number for the "PowerStatus" field.</summary>
        public const int PowerStatusFieldNumber = 5;
        private global::TcpIpClientSample.VhPowerStatus powerStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhPowerStatus PowerStatus
        {
            get { return powerStatus_; }
            set
            {
                powerStatus_ = value;
            }
        }

        /// <summary>Field number for the "ObstacleStatus" field.</summary>
        public const int ObstacleStatusFieldNumber = 6;
        private global::TcpIpClientSample.VhStopSingle obstacleStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle ObstacleStatus
        {
            get { return obstacleStatus_; }
            set
            {
                obstacleStatus_ = value;
            }
        }

        /// <summary>Field number for the "BlockingStatus" field.</summary>
        public const int BlockingStatusFieldNumber = 7;
        private global::TcpIpClientSample.VhStopSingle blockingStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle BlockingStatus
        {
            get { return blockingStatus_; }
            set
            {
                blockingStatus_ = value;
            }
        }

        /// <summary>Field number for the "HIDStatus" field.</summary>
        public const int HIDStatusFieldNumber = 8;
        private global::TcpIpClientSample.VhStopSingle hIDStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle HIDStatus
        {
            get { return hIDStatus_; }
            set
            {
                hIDStatus_ = value;
            }
        }

        /// <summary>Field number for the "PauseStatus" field.</summary>
        public const int PauseStatusFieldNumber = 9;
        private global::TcpIpClientSample.VhStopSingle pauseStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle PauseStatus
        {
            get { return pauseStatus_; }
            set
            {
                pauseStatus_ = value;
            }
        }

        /// <summary>Field number for the "ErrorStatus" field.</summary>
        public const int ErrorStatusFieldNumber = 10;
        private global::TcpIpClientSample.VhStopSingle errorStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle ErrorStatus
        {
            get { return errorStatus_; }
            set
            {
                errorStatus_ = value;
            }
        }

        /// <summary>Field number for the "Sec_Distance" field.</summary>
        public const int SecDistanceFieldNumber = 11;
        private uint secDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SecDistance
        {
            get { return secDistance_; }
            set
            {
                secDistance_ = value;
            }
        }

        /// <summary>Field number for the "Obst_Distance" field.</summary>
        public const int ObstDistanceFieldNumber = 12;
        private int obstDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ObstDistance
        {
            get { return obstDistance_; }
            set
            {
                obstDistance_ = value;
            }
        }

        /// <summary>Field number for the "Obst_Vehicle_ID" field.</summary>
        public const int ObstVehicleIDFieldNumber = 13;
        private string obstVehicleID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ObstVehicleID
        {
            get { return obstVehicleID_; }
            set
            {
                obstVehicleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Stopped_Block_ID_" field.</summary>
        public const int StoppedBlockIDFieldNumber = 14;
        private string stoppedBlockID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StoppedBlockID
        {
            get { return stoppedBlockID_; }
            set
            {
                stoppedBlockID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Stopped_HID_ID" field.</summary>
        public const int StoppedHIDIDFieldNumber = 15;
        private string stoppedHIDID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StoppedHIDID
        {
            get { return stoppedHIDID_; }
            set
            {
                stoppedHIDID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Earthquake_Pause_tatus" field.</summary>
        public const int EarthquakePauseTatusFieldNumber = 16;
        private global::TcpIpClientSample.VhStopSingle earthquakePauseTatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle EarthquakePauseTatus
        {
            get { return earthquakePauseTatus_; }
            set
            {
                earthquakePauseTatus_ = value;
            }
        }

        /// <summary>Field number for the "Safety_Pause_Status" field.</summary>
        public const int SafetyPauseStatusFieldNumber = 17;
        private global::TcpIpClientSample.VhStopSingle safetyPauseStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle SafetyPauseStatus
        {
            get { return safetyPauseStatus_; }
            set
            {
                safetyPauseStatus_ = value;
            }
        }

        /// <summary>Field number for the "HasCST" field.</summary>
        public const int HasCSTFieldNumber = 18;
        private global::TcpIpClientSample.VhLoadCSTStatus hasCST_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhLoadCSTStatus HasCST
        {
            get { return hasCST_; }
            set
            {
                hasCST_ = value;
            }
        }

        /// <summary>Field number for the "Cmd_ID" field.</summary>
        public const int CmdIDFieldNumber = 19;
        private string cmdID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CmdID
        {
            get { return cmdID_; }
            set
            {
                cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CST_ID" field.</summary>
        public const int CSTIDFieldNumber = 20;
        private string cSTID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CSTID
        {
            get { return cSTID_; }
            set
            {
                cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_143_STATUS_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_143_STATUS_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (CurrentAdrID != other.CurrentAdrID) return false;
            if (CurrentSecID != other.CurrentSecID) return false;
            if (ModeStatus != other.ModeStatus) return false;
            if (ActionStatus != other.ActionStatus) return false;
            if (PowerStatus != other.PowerStatus) return false;
            if (ObstacleStatus != other.ObstacleStatus) return false;
            if (BlockingStatus != other.BlockingStatus) return false;
            if (HIDStatus != other.HIDStatus) return false;
            if (PauseStatus != other.PauseStatus) return false;
            if (ErrorStatus != other.ErrorStatus) return false;
            if (SecDistance != other.SecDistance) return false;
            if (ObstDistance != other.ObstDistance) return false;
            if (ObstVehicleID != other.ObstVehicleID) return false;
            if (StoppedBlockID != other.StoppedBlockID) return false;
            if (StoppedHIDID != other.StoppedHIDID) return false;
            if (EarthquakePauseTatus != other.EarthquakePauseTatus) return false;
            if (SafetyPauseStatus != other.SafetyPauseStatus) return false;
            if (HasCST != other.HasCST) return false;
            if (CmdID != other.CmdID) return false;
            if (CSTID != other.CSTID) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
            if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
            if (ModeStatus != 0) hash ^= ModeStatus.GetHashCode();
            if (ActionStatus != 0) hash ^= ActionStatus.GetHashCode();
            if (PowerStatus != 0) hash ^= PowerStatus.GetHashCode();
            if (ObstacleStatus != 0) hash ^= ObstacleStatus.GetHashCode();
            if (BlockingStatus != 0) hash ^= BlockingStatus.GetHashCode();
            if (HIDStatus != 0) hash ^= HIDStatus.GetHashCode();
            if (PauseStatus != 0) hash ^= PauseStatus.GetHashCode();
            if (ErrorStatus != 0) hash ^= ErrorStatus.GetHashCode();
            if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
            if (ObstDistance != 0) hash ^= ObstDistance.GetHashCode();
            if (ObstVehicleID.Length != 0) hash ^= ObstVehicleID.GetHashCode();
            if (StoppedBlockID.Length != 0) hash ^= StoppedBlockID.GetHashCode();
            if (StoppedHIDID.Length != 0) hash ^= StoppedHIDID.GetHashCode();
            if (EarthquakePauseTatus != 0) hash ^= EarthquakePauseTatus.GetHashCode();
            if (SafetyPauseStatus != 0) hash ^= SafetyPauseStatus.GetHashCode();
            if (HasCST != 0) hash ^= HasCST.GetHashCode();
            if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
            if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (CurrentAdrID.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(CurrentAdrID);
            }
            if (CurrentSecID.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(CurrentSecID);
            }
            if (ModeStatus != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)ModeStatus);
            }
            if (ActionStatus != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)ActionStatus);
            }
            if (PowerStatus != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)PowerStatus);
            }
            if (ObstacleStatus != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)ObstacleStatus);
            }
            if (BlockingStatus != 0)
            {
                output.WriteRawTag(56);
                output.WriteEnum((int)BlockingStatus);
            }
            if (HIDStatus != 0)
            {
                output.WriteRawTag(64);
                output.WriteEnum((int)HIDStatus);
            }
            if (PauseStatus != 0)
            {
                output.WriteRawTag(72);
                output.WriteEnum((int)PauseStatus);
            }
            if (ErrorStatus != 0)
            {
                output.WriteRawTag(80);
                output.WriteEnum((int)ErrorStatus);
            }
            if (SecDistance != 0)
            {
                output.WriteRawTag(88);
                output.WriteUInt32(SecDistance);
            }
            if (ObstDistance != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(ObstDistance);
            }
            if (ObstVehicleID.Length != 0)
            {
                output.WriteRawTag(106);
                output.WriteString(ObstVehicleID);
            }
            if (StoppedBlockID.Length != 0)
            {
                output.WriteRawTag(114);
                output.WriteString(StoppedBlockID);
            }
            if (StoppedHIDID.Length != 0)
            {
                output.WriteRawTag(122);
                output.WriteString(StoppedHIDID);
            }
            if (EarthquakePauseTatus != 0)
            {
                output.WriteRawTag(128, 1);
                output.WriteEnum((int)EarthquakePauseTatus);
            }
            if (SafetyPauseStatus != 0)
            {
                output.WriteRawTag(136, 1);
                output.WriteEnum((int)SafetyPauseStatus);
            }
            if (HasCST != 0)
            {
                output.WriteRawTag(144, 1);
                output.WriteEnum((int)HasCST);
            }
            if (CmdID.Length != 0)
            {
                output.WriteRawTag(154, 1);
                output.WriteString(CmdID);
            }
            if (CSTID.Length != 0)
            {
                output.WriteRawTag(162, 1);
                output.WriteString(CSTID);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (CurrentAdrID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
            }
            if (CurrentSecID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
            }
            if (ModeStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ModeStatus);
            }
            if (ActionStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ActionStatus);
            }
            if (PowerStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PowerStatus);
            }
            if (ObstacleStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ObstacleStatus);
            }
            if (BlockingStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)BlockingStatus);
            }
            if (HIDStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)HIDStatus);
            }
            if (PauseStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PauseStatus);
            }
            if (ErrorStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ErrorStatus);
            }
            if (SecDistance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
            }
            if (ObstDistance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstDistance);
            }
            if (ObstVehicleID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ObstVehicleID);
            }
            if (StoppedBlockID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(StoppedBlockID);
            }
            if (StoppedHIDID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(StoppedHIDID);
            }
            if (EarthquakePauseTatus != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)EarthquakePauseTatus);
            }
            if (SafetyPauseStatus != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)SafetyPauseStatus);
            }
            if (HasCST != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)HasCST);
            }
            if (CmdID.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdID);
            }
            if (CSTID.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(CSTID);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_143_STATUS_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.CurrentAdrID.Length != 0)
            {
                CurrentAdrID = other.CurrentAdrID;
            }
            if (other.CurrentSecID.Length != 0)
            {
                CurrentSecID = other.CurrentSecID;
            }
            if (other.ModeStatus != 0)
            {
                ModeStatus = other.ModeStatus;
            }
            if (other.ActionStatus != 0)
            {
                ActionStatus = other.ActionStatus;
            }
            if (other.PowerStatus != 0)
            {
                PowerStatus = other.PowerStatus;
            }
            if (other.ObstacleStatus != 0)
            {
                ObstacleStatus = other.ObstacleStatus;
            }
            if (other.BlockingStatus != 0)
            {
                BlockingStatus = other.BlockingStatus;
            }
            if (other.HIDStatus != 0)
            {
                HIDStatus = other.HIDStatus;
            }
            if (other.PauseStatus != 0)
            {
                PauseStatus = other.PauseStatus;
            }
            if (other.ErrorStatus != 0)
            {
                ErrorStatus = other.ErrorStatus;
            }
            if (other.SecDistance != 0)
            {
                SecDistance = other.SecDistance;
            }
            if (other.ObstDistance != 0)
            {
                ObstDistance = other.ObstDistance;
            }
            if (other.ObstVehicleID.Length != 0)
            {
                ObstVehicleID = other.ObstVehicleID;
            }
            if (other.StoppedBlockID.Length != 0)
            {
                StoppedBlockID = other.StoppedBlockID;
            }
            if (other.StoppedHIDID.Length != 0)
            {
                StoppedHIDID = other.StoppedHIDID;
            }
            if (other.EarthquakePauseTatus != 0)
            {
                EarthquakePauseTatus = other.EarthquakePauseTatus;
            }
            if (other.SafetyPauseStatus != 0)
            {
                SafetyPauseStatus = other.SafetyPauseStatus;
            }
            if (other.HasCST != 0)
            {
                HasCST = other.HasCST;
            }
            if (other.CmdID.Length != 0)
            {
                CmdID = other.CmdID;
            }
            if (other.CSTID.Length != 0)
            {
                CSTID = other.CSTID;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            CurrentAdrID = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            CurrentSecID = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            modeStatus_ = (global::TcpIpClientSample.VHModeStatus)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            actionStatus_ = (global::TcpIpClientSample.VHActionStatus)input.ReadEnum();
                            break;
                        }
                    case 40:
                        {
                            powerStatus_ = (global::TcpIpClientSample.VhPowerStatus)input.ReadEnum();
                            break;
                        }
                    case 48:
                        {
                            obstacleStatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 56:
                        {
                            blockingStatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 64:
                        {
                            hIDStatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 72:
                        {
                            pauseStatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 80:
                        {
                            errorStatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 88:
                        {
                            SecDistance = input.ReadUInt32();
                            break;
                        }
                    case 96:
                        {
                            ObstDistance = input.ReadInt32();
                            break;
                        }
                    case 106:
                        {
                            ObstVehicleID = input.ReadString();
                            break;
                        }
                    case 114:
                        {
                            StoppedBlockID = input.ReadString();
                            break;
                        }
                    case 122:
                        {
                            StoppedHIDID = input.ReadString();
                            break;
                        }
                    case 128:
                        {
                            earthquakePauseTatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 136:
                        {
                            safetyPauseStatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 144:
                        {
                            hasCST_ = (global::TcpIpClientSample.VhLoadCSTStatus)input.ReadEnum();
                            break;
                        }
                    case 154:
                        {
                            CmdID = input.ReadString();
                            break;
                        }
                    case 162:
                        {
                            CSTID = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_144_STATUS_CHANGE_REP : pb::IMessage<ID_144_STATUS_CHANGE_REP>
    {
        private static readonly pb::MessageParser<ID_144_STATUS_CHANGE_REP> _parser = new pb::MessageParser<ID_144_STATUS_CHANGE_REP>(() => new ID_144_STATUS_CHANGE_REP());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_144_STATUS_CHANGE_REP> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[41]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_144_STATUS_CHANGE_REP()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_144_STATUS_CHANGE_REP(ID_144_STATUS_CHANGE_REP other) : this()
        {
            currentAdrID_ = other.currentAdrID_;
            currentSecID_ = other.currentSecID_;
            modeStatus_ = other.modeStatus_;
            actionStatus_ = other.actionStatus_;
            powerStatus_ = other.powerStatus_;
            obstacleStatus_ = other.obstacleStatus_;
            blockingStatus_ = other.blockingStatus_;
            hIDStatus_ = other.hIDStatus_;
            pauseStatus_ = other.pauseStatus_;
            errorStatus_ = other.errorStatus_;
            secDistance_ = other.secDistance_;
            obstDistance_ = other.obstDistance_;
            obstVehicleID_ = other.obstVehicleID_;
            stoppedBlockID_ = other.stoppedBlockID_;
            stoppedHIDID_ = other.stoppedHIDID_;
            earthquakePauseTatus_ = other.earthquakePauseTatus_;
            safetyPauseStatus_ = other.safetyPauseStatus_;
            hasCST_ = other.hasCST_;
            cmdID_ = other.cmdID_;
            cSTID_ = other.cSTID_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_144_STATUS_CHANGE_REP Clone()
        {
            return new ID_144_STATUS_CHANGE_REP(this);
        }

        /// <summary>Field number for the "CurrentAdrID" field.</summary>
        public const int CurrentAdrIDFieldNumber = 1;
        private string currentAdrID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentAdrID
        {
            get { return currentAdrID_; }
            set
            {
                currentAdrID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CurrentSecID" field.</summary>
        public const int CurrentSecIDFieldNumber = 2;
        private string currentSecID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CurrentSecID
        {
            get { return currentSecID_; }
            set
            {
                currentSecID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ModeStatus" field.</summary>
        public const int ModeStatusFieldNumber = 3;
        private global::TcpIpClientSample.VHModeStatus modeStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VHModeStatus ModeStatus
        {
            get { return modeStatus_; }
            set
            {
                modeStatus_ = value;
            }
        }

        /// <summary>Field number for the "ActionStatus" field.</summary>
        public const int ActionStatusFieldNumber = 4;
        private global::TcpIpClientSample.VHActionStatus actionStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VHActionStatus ActionStatus
        {
            get { return actionStatus_; }
            set
            {
                actionStatus_ = value;
            }
        }

        /// <summary>Field number for the "PowerStatus" field.</summary>
        public const int PowerStatusFieldNumber = 5;
        private global::TcpIpClientSample.VhPowerStatus powerStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhPowerStatus PowerStatus
        {
            get { return powerStatus_; }
            set
            {
                powerStatus_ = value;
            }
        }

        /// <summary>Field number for the "ObstacleStatus" field.</summary>
        public const int ObstacleStatusFieldNumber = 6;
        private global::TcpIpClientSample.VhStopSingle obstacleStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle ObstacleStatus
        {
            get { return obstacleStatus_; }
            set
            {
                obstacleStatus_ = value;
            }
        }

        /// <summary>Field number for the "BlockingStatus" field.</summary>
        public const int BlockingStatusFieldNumber = 7;
        private global::TcpIpClientSample.VhStopSingle blockingStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle BlockingStatus
        {
            get { return blockingStatus_; }
            set
            {
                blockingStatus_ = value;
            }
        }

        /// <summary>Field number for the "HIDStatus" field.</summary>
        public const int HIDStatusFieldNumber = 8;
        private global::TcpIpClientSample.VhStopSingle hIDStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle HIDStatus
        {
            get { return hIDStatus_; }
            set
            {
                hIDStatus_ = value;
            }
        }

        /// <summary>Field number for the "PauseStatus" field.</summary>
        public const int PauseStatusFieldNumber = 9;
        private global::TcpIpClientSample.VhStopSingle pauseStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle PauseStatus
        {
            get { return pauseStatus_; }
            set
            {
                pauseStatus_ = value;
            }
        }

        /// <summary>Field number for the "ErrorStatus" field.</summary>
        public const int ErrorStatusFieldNumber = 10;
        private global::TcpIpClientSample.VhStopSingle errorStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle ErrorStatus
        {
            get { return errorStatus_; }
            set
            {
                errorStatus_ = value;
            }
        }

        /// <summary>Field number for the "Sec_Distance" field.</summary>
        public const int SecDistanceFieldNumber = 11;
        private uint secDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SecDistance
        {
            get { return secDistance_; }
            set
            {
                secDistance_ = value;
            }
        }

        /// <summary>Field number for the "Obst_Distance" field.</summary>
        public const int ObstDistanceFieldNumber = 12;
        private int obstDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ObstDistance
        {
            get { return obstDistance_; }
            set
            {
                obstDistance_ = value;
            }
        }

        /// <summary>Field number for the "Obst_Vehicle_ID" field.</summary>
        public const int ObstVehicleIDFieldNumber = 13;
        private string obstVehicleID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ObstVehicleID
        {
            get { return obstVehicleID_; }
            set
            {
                obstVehicleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Stopped_Block_ID_" field.</summary>
        public const int StoppedBlockIDFieldNumber = 14;
        private string stoppedBlockID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StoppedBlockID
        {
            get { return stoppedBlockID_; }
            set
            {
                stoppedBlockID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Stopped_HID_ID" field.</summary>
        public const int StoppedHIDIDFieldNumber = 15;
        private string stoppedHIDID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StoppedHIDID
        {
            get { return stoppedHIDID_; }
            set
            {
                stoppedHIDID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Earthquake_Pause_tatus" field.</summary>
        public const int EarthquakePauseTatusFieldNumber = 16;
        private global::TcpIpClientSample.VhStopSingle earthquakePauseTatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle EarthquakePauseTatus
        {
            get { return earthquakePauseTatus_; }
            set
            {
                earthquakePauseTatus_ = value;
            }
        }

        /// <summary>Field number for the "Safety_Pause_Status" field.</summary>
        public const int SafetyPauseStatusFieldNumber = 17;
        private global::TcpIpClientSample.VhStopSingle safetyPauseStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhStopSingle SafetyPauseStatus
        {
            get { return safetyPauseStatus_; }
            set
            {
                safetyPauseStatus_ = value;
            }
        }

        /// <summary>Field number for the "HasCST" field.</summary>
        public const int HasCSTFieldNumber = 18;
        private global::TcpIpClientSample.VhLoadCSTStatus hasCST_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.VhLoadCSTStatus HasCST
        {
            get { return hasCST_; }
            set
            {
                hasCST_ = value;
            }
        }

        /// <summary>Field number for the "Cmd_ID" field.</summary>
        public const int CmdIDFieldNumber = 19;
        private string cmdID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CmdID
        {
            get { return cmdID_; }
            set
            {
                cmdID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "CST_ID" field.</summary>
        public const int CSTIDFieldNumber = 20;
        private string cSTID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CSTID
        {
            get { return cSTID_; }
            set
            {
                cSTID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_144_STATUS_CHANGE_REP);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_144_STATUS_CHANGE_REP other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (CurrentAdrID != other.CurrentAdrID) return false;
            if (CurrentSecID != other.CurrentSecID) return false;
            if (ModeStatus != other.ModeStatus) return false;
            if (ActionStatus != other.ActionStatus) return false;
            if (PowerStatus != other.PowerStatus) return false;
            if (ObstacleStatus != other.ObstacleStatus) return false;
            if (BlockingStatus != other.BlockingStatus) return false;
            if (HIDStatus != other.HIDStatus) return false;
            if (PauseStatus != other.PauseStatus) return false;
            if (ErrorStatus != other.ErrorStatus) return false;
            if (SecDistance != other.SecDistance) return false;
            if (ObstDistance != other.ObstDistance) return false;
            if (ObstVehicleID != other.ObstVehicleID) return false;
            if (StoppedBlockID != other.StoppedBlockID) return false;
            if (StoppedHIDID != other.StoppedHIDID) return false;
            if (EarthquakePauseTatus != other.EarthquakePauseTatus) return false;
            if (SafetyPauseStatus != other.SafetyPauseStatus) return false;
            if (HasCST != other.HasCST) return false;
            if (CmdID != other.CmdID) return false;
            if (CSTID != other.CSTID) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (CurrentAdrID.Length != 0) hash ^= CurrentAdrID.GetHashCode();
            if (CurrentSecID.Length != 0) hash ^= CurrentSecID.GetHashCode();
            if (ModeStatus != 0) hash ^= ModeStatus.GetHashCode();
            if (ActionStatus != 0) hash ^= ActionStatus.GetHashCode();
            if (PowerStatus != 0) hash ^= PowerStatus.GetHashCode();
            if (ObstacleStatus != 0) hash ^= ObstacleStatus.GetHashCode();
            if (BlockingStatus != 0) hash ^= BlockingStatus.GetHashCode();
            if (HIDStatus != 0) hash ^= HIDStatus.GetHashCode();
            if (PauseStatus != 0) hash ^= PauseStatus.GetHashCode();
            if (ErrorStatus != 0) hash ^= ErrorStatus.GetHashCode();
            if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
            if (ObstDistance != 0) hash ^= ObstDistance.GetHashCode();
            if (ObstVehicleID.Length != 0) hash ^= ObstVehicleID.GetHashCode();
            if (StoppedBlockID.Length != 0) hash ^= StoppedBlockID.GetHashCode();
            if (StoppedHIDID.Length != 0) hash ^= StoppedHIDID.GetHashCode();
            if (EarthquakePauseTatus != 0) hash ^= EarthquakePauseTatus.GetHashCode();
            if (SafetyPauseStatus != 0) hash ^= SafetyPauseStatus.GetHashCode();
            if (HasCST != 0) hash ^= HasCST.GetHashCode();
            if (CmdID.Length != 0) hash ^= CmdID.GetHashCode();
            if (CSTID.Length != 0) hash ^= CSTID.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (CurrentAdrID.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(CurrentAdrID);
            }
            if (CurrentSecID.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(CurrentSecID);
            }
            if (ModeStatus != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)ModeStatus);
            }
            if (ActionStatus != 0)
            {
                output.WriteRawTag(32);
                output.WriteEnum((int)ActionStatus);
            }
            if (PowerStatus != 0)
            {
                output.WriteRawTag(40);
                output.WriteEnum((int)PowerStatus);
            }
            if (ObstacleStatus != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)ObstacleStatus);
            }
            if (BlockingStatus != 0)
            {
                output.WriteRawTag(56);
                output.WriteEnum((int)BlockingStatus);
            }
            if (HIDStatus != 0)
            {
                output.WriteRawTag(64);
                output.WriteEnum((int)HIDStatus);
            }
            if (PauseStatus != 0)
            {
                output.WriteRawTag(72);
                output.WriteEnum((int)PauseStatus);
            }
            if (ErrorStatus != 0)
            {
                output.WriteRawTag(80);
                output.WriteEnum((int)ErrorStatus);
            }
            if (SecDistance != 0)
            {
                output.WriteRawTag(88);
                output.WriteUInt32(SecDistance);
            }
            if (ObstDistance != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(ObstDistance);
            }
            if (ObstVehicleID.Length != 0)
            {
                output.WriteRawTag(106);
                output.WriteString(ObstVehicleID);
            }
            if (StoppedBlockID.Length != 0)
            {
                output.WriteRawTag(114);
                output.WriteString(StoppedBlockID);
            }
            if (StoppedHIDID.Length != 0)
            {
                output.WriteRawTag(122);
                output.WriteString(StoppedHIDID);
            }
            if (EarthquakePauseTatus != 0)
            {
                output.WriteRawTag(128, 1);
                output.WriteEnum((int)EarthquakePauseTatus);
            }
            if (SafetyPauseStatus != 0)
            {
                output.WriteRawTag(136, 1);
                output.WriteEnum((int)SafetyPauseStatus);
            }
            if (HasCST != 0)
            {
                output.WriteRawTag(144, 1);
                output.WriteEnum((int)HasCST);
            }
            if (CmdID.Length != 0)
            {
                output.WriteRawTag(154, 1);
                output.WriteString(CmdID);
            }
            if (CSTID.Length != 0)
            {
                output.WriteRawTag(162, 1);
                output.WriteString(CSTID);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (CurrentAdrID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAdrID);
            }
            if (CurrentSecID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSecID);
            }
            if (ModeStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ModeStatus);
            }
            if (ActionStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ActionStatus);
            }
            if (PowerStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PowerStatus);
            }
            if (ObstacleStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ObstacleStatus);
            }
            if (BlockingStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)BlockingStatus);
            }
            if (HIDStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)HIDStatus);
            }
            if (PauseStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PauseStatus);
            }
            if (ErrorStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ErrorStatus);
            }
            if (SecDistance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
            }
            if (ObstDistance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObstDistance);
            }
            if (ObstVehicleID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ObstVehicleID);
            }
            if (StoppedBlockID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(StoppedBlockID);
            }
            if (StoppedHIDID.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(StoppedHIDID);
            }
            if (EarthquakePauseTatus != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)EarthquakePauseTatus);
            }
            if (SafetyPauseStatus != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)SafetyPauseStatus);
            }
            if (HasCST != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)HasCST);
            }
            if (CmdID.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(CmdID);
            }
            if (CSTID.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(CSTID);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_144_STATUS_CHANGE_REP other)
        {
            if (other == null)
            {
                return;
            }
            if (other.CurrentAdrID.Length != 0)
            {
                CurrentAdrID = other.CurrentAdrID;
            }
            if (other.CurrentSecID.Length != 0)
            {
                CurrentSecID = other.CurrentSecID;
            }
            if (other.ModeStatus != 0)
            {
                ModeStatus = other.ModeStatus;
            }
            if (other.ActionStatus != 0)
            {
                ActionStatus = other.ActionStatus;
            }
            if (other.PowerStatus != 0)
            {
                PowerStatus = other.PowerStatus;
            }
            if (other.ObstacleStatus != 0)
            {
                ObstacleStatus = other.ObstacleStatus;
            }
            if (other.BlockingStatus != 0)
            {
                BlockingStatus = other.BlockingStatus;
            }
            if (other.HIDStatus != 0)
            {
                HIDStatus = other.HIDStatus;
            }
            if (other.PauseStatus != 0)
            {
                PauseStatus = other.PauseStatus;
            }
            if (other.ErrorStatus != 0)
            {
                ErrorStatus = other.ErrorStatus;
            }
            if (other.SecDistance != 0)
            {
                SecDistance = other.SecDistance;
            }
            if (other.ObstDistance != 0)
            {
                ObstDistance = other.ObstDistance;
            }
            if (other.ObstVehicleID.Length != 0)
            {
                ObstVehicleID = other.ObstVehicleID;
            }
            if (other.StoppedBlockID.Length != 0)
            {
                StoppedBlockID = other.StoppedBlockID;
            }
            if (other.StoppedHIDID.Length != 0)
            {
                StoppedHIDID = other.StoppedHIDID;
            }
            if (other.EarthquakePauseTatus != 0)
            {
                EarthquakePauseTatus = other.EarthquakePauseTatus;
            }
            if (other.SafetyPauseStatus != 0)
            {
                SafetyPauseStatus = other.SafetyPauseStatus;
            }
            if (other.HasCST != 0)
            {
                HasCST = other.HasCST;
            }
            if (other.CmdID.Length != 0)
            {
                CmdID = other.CmdID;
            }
            if (other.CSTID.Length != 0)
            {
                CSTID = other.CSTID;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            CurrentAdrID = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            CurrentSecID = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            modeStatus_ = (global::TcpIpClientSample.VHModeStatus)input.ReadEnum();
                            break;
                        }
                    case 32:
                        {
                            actionStatus_ = (global::TcpIpClientSample.VHActionStatus)input.ReadEnum();
                            break;
                        }
                    case 40:
                        {
                            powerStatus_ = (global::TcpIpClientSample.VhPowerStatus)input.ReadEnum();
                            break;
                        }
                    case 48:
                        {
                            obstacleStatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 56:
                        {
                            blockingStatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 64:
                        {
                            hIDStatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 72:
                        {
                            pauseStatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 80:
                        {
                            errorStatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 88:
                        {
                            SecDistance = input.ReadUInt32();
                            break;
                        }
                    case 96:
                        {
                            ObstDistance = input.ReadInt32();
                            break;
                        }
                    case 106:
                        {
                            ObstVehicleID = input.ReadString();
                            break;
                        }
                    case 114:
                        {
                            StoppedBlockID = input.ReadString();
                            break;
                        }
                    case 122:
                        {
                            StoppedHIDID = input.ReadString();
                            break;
                        }
                    case 128:
                        {
                            earthquakePauseTatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 136:
                        {
                            safetyPauseStatus_ = (global::TcpIpClientSample.VhStopSingle)input.ReadEnum();
                            break;
                        }
                    case 144:
                        {
                            hasCST_ = (global::TcpIpClientSample.VhLoadCSTStatus)input.ReadEnum();
                            break;
                        }
                    case 154:
                        {
                            CmdID = input.ReadString();
                            break;
                        }
                    case 162:
                        {
                            CSTID = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_44_STATUS_CHANGE_RESPONSE : pb::IMessage<ID_44_STATUS_CHANGE_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_44_STATUS_CHANGE_RESPONSE> _parser = new pb::MessageParser<ID_44_STATUS_CHANGE_RESPONSE>(() => new ID_44_STATUS_CHANGE_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_44_STATUS_CHANGE_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[42]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_44_STATUS_CHANGE_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_44_STATUS_CHANGE_RESPONSE(ID_44_STATUS_CHANGE_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_44_STATUS_CHANGE_RESPONSE Clone()
        {
            return new ID_44_STATUS_CHANGE_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_44_STATUS_CHANGE_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_44_STATUS_CHANGE_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_44_STATUS_CHANGE_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_45_POWER_OPE_REQ : pb::IMessage<ID_45_POWER_OPE_REQ>
    {
        private static readonly pb::MessageParser<ID_45_POWER_OPE_REQ> _parser = new pb::MessageParser<ID_45_POWER_OPE_REQ>(() => new ID_45_POWER_OPE_REQ());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_45_POWER_OPE_REQ> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[43]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_45_POWER_OPE_REQ()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_45_POWER_OPE_REQ(ID_45_POWER_OPE_REQ other) : this()
        {
            operatingPowerMode_ = other.operatingPowerMode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_45_POWER_OPE_REQ Clone()
        {
            return new ID_45_POWER_OPE_REQ(this);
        }

        /// <summary>Field number for the "OperatingPowerMode" field.</summary>
        public const int OperatingPowerModeFieldNumber = 1;
        private global::TcpIpClientSample.OperatingPowerMode operatingPowerMode_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.OperatingPowerMode OperatingPowerMode
        {
            get { return operatingPowerMode_; }
            set
            {
                operatingPowerMode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_45_POWER_OPE_REQ);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_45_POWER_OPE_REQ other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (OperatingPowerMode != other.OperatingPowerMode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (OperatingPowerMode != 0) hash ^= OperatingPowerMode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (OperatingPowerMode != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)OperatingPowerMode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (OperatingPowerMode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)OperatingPowerMode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_45_POWER_OPE_REQ other)
        {
            if (other == null)
            {
                return;
            }
            if (other.OperatingPowerMode != 0)
            {
                OperatingPowerMode = other.OperatingPowerMode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            operatingPowerMode_ = (global::TcpIpClientSample.OperatingPowerMode)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_145_POWER_OPE_RESPONSE : pb::IMessage<ID_145_POWER_OPE_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_145_POWER_OPE_RESPONSE> _parser = new pb::MessageParser<ID_145_POWER_OPE_RESPONSE>(() => new ID_145_POWER_OPE_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_145_POWER_OPE_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[44]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_145_POWER_OPE_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_145_POWER_OPE_RESPONSE(ID_145_POWER_OPE_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_145_POWER_OPE_RESPONSE Clone()
        {
            return new ID_145_POWER_OPE_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_145_POWER_OPE_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_145_POWER_OPE_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_145_POWER_OPE_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_71_RANGE_TEACHING_REQUEST : pb::IMessage<ID_71_RANGE_TEACHING_REQUEST>
    {
        private static readonly pb::MessageParser<ID_71_RANGE_TEACHING_REQUEST> _parser = new pb::MessageParser<ID_71_RANGE_TEACHING_REQUEST>(() => new ID_71_RANGE_TEACHING_REQUEST());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_71_RANGE_TEACHING_REQUEST> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[45]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_71_RANGE_TEACHING_REQUEST()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_71_RANGE_TEACHING_REQUEST(ID_71_RANGE_TEACHING_REQUEST other) : this()
        {
            fromAdr_ = other.fromAdr_;
            toAdr_ = other.toAdr_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_71_RANGE_TEACHING_REQUEST Clone()
        {
            return new ID_71_RANGE_TEACHING_REQUEST(this);
        }

        /// <summary>Field number for the "FromAdr" field.</summary>
        public const int FromAdrFieldNumber = 1;
        private string fromAdr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FromAdr
        {
            get { return fromAdr_; }
            set
            {
                fromAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ToAdr" field.</summary>
        public const int ToAdrFieldNumber = 2;
        private string toAdr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ToAdr
        {
            get { return toAdr_; }
            set
            {
                toAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_71_RANGE_TEACHING_REQUEST);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_71_RANGE_TEACHING_REQUEST other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (FromAdr != other.FromAdr) return false;
            if (ToAdr != other.ToAdr) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (FromAdr.Length != 0) hash ^= FromAdr.GetHashCode();
            if (ToAdr.Length != 0) hash ^= ToAdr.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (FromAdr.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(FromAdr);
            }
            if (ToAdr.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(ToAdr);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (FromAdr.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FromAdr);
            }
            if (ToAdr.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAdr);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_71_RANGE_TEACHING_REQUEST other)
        {
            if (other == null)
            {
                return;
            }
            if (other.FromAdr.Length != 0)
            {
                FromAdr = other.FromAdr;
            }
            if (other.ToAdr.Length != 0)
            {
                ToAdr = other.ToAdr;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            FromAdr = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            ToAdr = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_171_RANGE_TEACHING_RESPONSE : pb::IMessage<ID_171_RANGE_TEACHING_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_171_RANGE_TEACHING_RESPONSE> _parser = new pb::MessageParser<ID_171_RANGE_TEACHING_RESPONSE>(() => new ID_171_RANGE_TEACHING_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_171_RANGE_TEACHING_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[46]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_171_RANGE_TEACHING_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_171_RANGE_TEACHING_RESPONSE(ID_171_RANGE_TEACHING_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_171_RANGE_TEACHING_RESPONSE Clone()
        {
            return new ID_171_RANGE_TEACHING_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_171_RANGE_TEACHING_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_171_RANGE_TEACHING_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_171_RANGE_TEACHING_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_172_RANGE_TEACHING_COMPLETE_REPORT : pb::IMessage<ID_172_RANGE_TEACHING_COMPLETE_REPORT>
    {
        private static readonly pb::MessageParser<ID_172_RANGE_TEACHING_COMPLETE_REPORT> _parser = new pb::MessageParser<ID_172_RANGE_TEACHING_COMPLETE_REPORT>(() => new ID_172_RANGE_TEACHING_COMPLETE_REPORT());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_172_RANGE_TEACHING_COMPLETE_REPORT> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[47]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_172_RANGE_TEACHING_COMPLETE_REPORT()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_172_RANGE_TEACHING_COMPLETE_REPORT(ID_172_RANGE_TEACHING_COMPLETE_REPORT other) : this()
        {
            fromAdr_ = other.fromAdr_;
            toAdr_ = other.toAdr_;
            secDistance_ = other.secDistance_;
            completeCode_ = other.completeCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_172_RANGE_TEACHING_COMPLETE_REPORT Clone()
        {
            return new ID_172_RANGE_TEACHING_COMPLETE_REPORT(this);
        }

        /// <summary>Field number for the "FromAdr" field.</summary>
        public const int FromAdrFieldNumber = 1;
        private string fromAdr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FromAdr
        {
            get { return fromAdr_; }
            set
            {
                fromAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ToAdr" field.</summary>
        public const int ToAdrFieldNumber = 2;
        private string toAdr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ToAdr
        {
            get { return toAdr_; }
            set
            {
                toAdr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Sec_Distance" field.</summary>
        public const int SecDistanceFieldNumber = 3;
        private uint secDistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SecDistance
        {
            get { return secDistance_; }
            set
            {
                secDistance_ = value;
            }
        }

        /// <summary>Field number for the "Complete_Code" field.</summary>
        public const int CompleteCodeFieldNumber = 4;
        private int completeCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CompleteCode
        {
            get { return completeCode_; }
            set
            {
                completeCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_172_RANGE_TEACHING_COMPLETE_REPORT);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_172_RANGE_TEACHING_COMPLETE_REPORT other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (FromAdr != other.FromAdr) return false;
            if (ToAdr != other.ToAdr) return false;
            if (SecDistance != other.SecDistance) return false;
            if (CompleteCode != other.CompleteCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (FromAdr.Length != 0) hash ^= FromAdr.GetHashCode();
            if (ToAdr.Length != 0) hash ^= ToAdr.GetHashCode();
            if (SecDistance != 0) hash ^= SecDistance.GetHashCode();
            if (CompleteCode != 0) hash ^= CompleteCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (FromAdr.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(FromAdr);
            }
            if (ToAdr.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(ToAdr);
            }
            if (SecDistance != 0)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(SecDistance);
            }
            if (CompleteCode != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(CompleteCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (FromAdr.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FromAdr);
            }
            if (ToAdr.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAdr);
            }
            if (SecDistance != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecDistance);
            }
            if (CompleteCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompleteCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_172_RANGE_TEACHING_COMPLETE_REPORT other)
        {
            if (other == null)
            {
                return;
            }
            if (other.FromAdr.Length != 0)
            {
                FromAdr = other.FromAdr;
            }
            if (other.ToAdr.Length != 0)
            {
                ToAdr = other.ToAdr;
            }
            if (other.SecDistance != 0)
            {
                SecDistance = other.SecDistance;
            }
            if (other.CompleteCode != 0)
            {
                CompleteCode = other.CompleteCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            FromAdr = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            ToAdr = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            SecDistance = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            CompleteCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_72_RANGE_TEACHING_COMPLETE_RESPONSE : pb::IMessage<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE> _parser = new pb::MessageParser<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE>(() => new ID_72_RANGE_TEACHING_COMPLETE_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_72_RANGE_TEACHING_COMPLETE_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[48]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_72_RANGE_TEACHING_COMPLETE_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_72_RANGE_TEACHING_COMPLETE_RESPONSE(ID_72_RANGE_TEACHING_COMPLETE_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_72_RANGE_TEACHING_COMPLETE_RESPONSE Clone()
        {
            return new ID_72_RANGE_TEACHING_COMPLETE_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_72_RANGE_TEACHING_COMPLETE_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_72_RANGE_TEACHING_COMPLETE_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_72_RANGE_TEACHING_COMPLETE_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_174_ADDRESS_TEACH_REPORT : pb::IMessage<ID_174_ADDRESS_TEACH_REPORT>
    {
        private static readonly pb::MessageParser<ID_174_ADDRESS_TEACH_REPORT> _parser = new pb::MessageParser<ID_174_ADDRESS_TEACH_REPORT>(() => new ID_174_ADDRESS_TEACH_REPORT());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_174_ADDRESS_TEACH_REPORT> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[49]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_174_ADDRESS_TEACH_REPORT()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_174_ADDRESS_TEACH_REPORT(ID_174_ADDRESS_TEACH_REPORT other) : this()
        {
            addr_ = other.addr_;
            position_ = other.position_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_174_ADDRESS_TEACH_REPORT Clone()
        {
            return new ID_174_ADDRESS_TEACH_REPORT(this);
        }

        /// <summary>Field number for the "Addr" field.</summary>
        public const int AddrFieldNumber = 1;
        private string addr_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Addr
        {
            get { return addr_; }
            set
            {
                addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Position" field.</summary>
        public const int PositionFieldNumber = 2;
        private int position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Position
        {
            get { return position_; }
            set
            {
                position_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_174_ADDRESS_TEACH_REPORT);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_174_ADDRESS_TEACH_REPORT other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Addr != other.Addr) return false;
            if (Position != other.Position) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Addr.Length != 0) hash ^= Addr.GetHashCode();
            if (Position != 0) hash ^= Position.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Addr.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Addr);
            }
            if (Position != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(Position);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Addr.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
            }
            if (Position != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_174_ADDRESS_TEACH_REPORT other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Addr.Length != 0)
            {
                Addr = other.Addr;
            }
            if (other.Position != 0)
            {
                Position = other.Position;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Addr = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            Position = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_74_ADDRESS_TEACH_RESPONSE : pb::IMessage<ID_74_ADDRESS_TEACH_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_74_ADDRESS_TEACH_RESPONSE> _parser = new pb::MessageParser<ID_74_ADDRESS_TEACH_RESPONSE>(() => new ID_74_ADDRESS_TEACH_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_74_ADDRESS_TEACH_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[50]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_74_ADDRESS_TEACH_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_74_ADDRESS_TEACH_RESPONSE(ID_74_ADDRESS_TEACH_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_74_ADDRESS_TEACH_RESPONSE Clone()
        {
            return new ID_74_ADDRESS_TEACH_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_74_ADDRESS_TEACH_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_74_ADDRESS_TEACH_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_74_ADDRESS_TEACH_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_91_ALARM_RESET_REQUEST : pb::IMessage<ID_91_ALARM_RESET_REQUEST>
    {
        private static readonly pb::MessageParser<ID_91_ALARM_RESET_REQUEST> _parser = new pb::MessageParser<ID_91_ALARM_RESET_REQUEST>(() => new ID_91_ALARM_RESET_REQUEST());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_91_ALARM_RESET_REQUEST> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[51]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_91_ALARM_RESET_REQUEST()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_91_ALARM_RESET_REQUEST(ID_91_ALARM_RESET_REQUEST other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_91_ALARM_RESET_REQUEST Clone()
        {
            return new ID_91_ALARM_RESET_REQUEST(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_91_ALARM_RESET_REQUEST);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_91_ALARM_RESET_REQUEST other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_91_ALARM_RESET_REQUEST other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

    }

    public sealed partial class ID_191_ALARM_RESET_RESPONSE : pb::IMessage<ID_191_ALARM_RESET_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_191_ALARM_RESET_RESPONSE> _parser = new pb::MessageParser<ID_191_ALARM_RESET_RESPONSE>(() => new ID_191_ALARM_RESET_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_191_ALARM_RESET_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[52]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_191_ALARM_RESET_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_191_ALARM_RESET_RESPONSE(ID_191_ALARM_RESET_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_191_ALARM_RESET_RESPONSE Clone()
        {
            return new ID_191_ALARM_RESET_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_191_ALARM_RESET_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_191_ALARM_RESET_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_191_ALARM_RESET_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_194_ALARM_REPORT : pb::IMessage<ID_194_ALARM_REPORT>
    {
        private static readonly pb::MessageParser<ID_194_ALARM_REPORT> _parser = new pb::MessageParser<ID_194_ALARM_REPORT>(() => new ID_194_ALARM_REPORT());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_194_ALARM_REPORT> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[53]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_194_ALARM_REPORT()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_194_ALARM_REPORT(ID_194_ALARM_REPORT other) : this()
        {
            errCode_ = other.errCode_;
            errStatus_ = other.errStatus_;
            errDescription_ = other.errDescription_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_194_ALARM_REPORT Clone()
        {
            return new ID_194_ALARM_REPORT(this);
        }

        /// <summary>Field number for the "ErrCode" field.</summary>
        public const int ErrCodeFieldNumber = 1;
        private string errCode_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrCode
        {
            get { return errCode_; }
            set
            {
                errCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ErrStatus" field.</summary>
        public const int ErrStatusFieldNumber = 2;
        private global::TcpIpClientSample.ErrorStatus errStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ErrorStatus ErrStatus
        {
            get { return errStatus_; }
            set
            {
                errStatus_ = value;
            }
        }

        /// <summary>Field number for the "ErrDescription" field.</summary>
        public const int ErrDescriptionFieldNumber = 3;
        private string errDescription_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrDescription
        {
            get { return errDescription_; }
            set
            {
                errDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_194_ALARM_REPORT);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_194_ALARM_REPORT other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ErrCode != other.ErrCode) return false;
            if (ErrStatus != other.ErrStatus) return false;
            if (ErrDescription != other.ErrDescription) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ErrCode.Length != 0) hash ^= ErrCode.GetHashCode();
            if (ErrStatus != 0) hash ^= ErrStatus.GetHashCode();
            if (ErrDescription.Length != 0) hash ^= ErrDescription.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ErrCode.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ErrCode);
            }
            if (ErrStatus != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)ErrStatus);
            }
            if (ErrDescription.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(ErrDescription);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ErrCode.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrCode);
            }
            if (ErrStatus != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ErrStatus);
            }
            if (ErrDescription.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrDescription);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_194_ALARM_REPORT other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ErrCode.Length != 0)
            {
                ErrCode = other.ErrCode;
            }
            if (other.ErrStatus != 0)
            {
                ErrStatus = other.ErrStatus;
            }
            if (other.ErrDescription.Length != 0)
            {
                ErrDescription = other.ErrDescription;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            ErrCode = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            errStatus_ = (global::TcpIpClientSample.ErrorStatus)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            ErrDescription = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ID_94_ALARM_RESPONSE : pb::IMessage<ID_94_ALARM_RESPONSE>
    {
        private static readonly pb::MessageParser<ID_94_ALARM_RESPONSE> _parser = new pb::MessageParser<ID_94_ALARM_RESPONSE>(() => new ID_94_ALARM_RESPONSE());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ID_94_ALARM_RESPONSE> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[54]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_94_ALARM_RESPONSE()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_94_ALARM_RESPONSE(ID_94_ALARM_RESPONSE other) : this()
        {
            replyCode_ = other.replyCode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ID_94_ALARM_RESPONSE Clone()
        {
            return new ID_94_ALARM_RESPONSE(this);
        }

        /// <summary>Field number for the "ReplyCode" field.</summary>
        public const int ReplyCodeFieldNumber = 1;
        private int replyCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReplyCode
        {
            get { return replyCode_; }
            set
            {
                replyCode_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ID_94_ALARM_RESPONSE);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ID_94_ALARM_RESPONSE other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReplyCode != other.ReplyCode) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReplyCode != 0) hash ^= ReplyCode.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReplyCode != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(ReplyCode);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReplyCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplyCode);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ID_94_ALARM_RESPONSE other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReplyCode != 0)
            {
                ReplyCode = other.ReplyCode;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ReplyCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class WrapperMessage : pb::IMessage<WrapperMessage>
    {
        private static readonly pb::MessageParser<WrapperMessage> _parser = new pb::MessageParser<WrapperMessage>(() => new WrapperMessage());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WrapperMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TcpIpClientSample.OhtmessageReflection.Descriptor.MessageTypes[55]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WrapperMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WrapperMessage(WrapperMessage other) : this()
        {
            iD_ = other.iD_;
            seqNum_ = other.seqNum_;
            switch (other.MsgCase)
            {
                case MsgOneofCase.HostBasicInfoRep:
                    HostBasicInfoRep = other.HostBasicInfoRep.Clone();
                    break;
                case MsgOneofCase.HostBasicInfoResp:
                    HostBasicInfoResp = other.HostBasicInfoResp.Clone();
                    break;
                case MsgOneofCase.BasicInfoVersionRep:
                    BasicInfoVersionRep = other.BasicInfoVersionRep.Clone();
                    break;
                case MsgOneofCase.BasicInfoVersionResp:
                    BasicInfoVersionResp = other.BasicInfoVersionResp.Clone();
                    break;
                case MsgOneofCase.BasicInfoRep:
                    BasicInfoRep = other.BasicInfoRep.Clone();
                    break;
                case MsgOneofCase.BasicInfoResp:
                    BasicInfoResp = other.BasicInfoResp.Clone();
                    break;
                case MsgOneofCase.TavellingDataRep:
                    TavellingDataRep = other.TavellingDataRep.Clone();
                    break;
                case MsgOneofCase.TavellingDataResp:
                    TavellingDataResp = other.TavellingDataResp.Clone();
                    break;
                case MsgOneofCase.SectionDataRep:
                    SectionDataRep = other.SectionDataRep.Clone();
                    break;
                case MsgOneofCase.SectionDataResp:
                    SectionDataResp = other.SectionDataResp.Clone();
                    break;
                case MsgOneofCase.AddressDataRep:
                    AddressDataRep = other.AddressDataRep.Clone();
                    break;
                case MsgOneofCase.AddressDataResp:
                    AddressDataResp = other.AddressDataResp.Clone();
                    break;
                case MsgOneofCase.ScaleDataRep:
                    ScaleDataRep = other.ScaleDataRep.Clone();
                    break;
                case MsgOneofCase.ScaleDataResp:
                    ScaleDataResp = other.ScaleDataResp.Clone();
                    break;
                case MsgOneofCase.ControlDataRep:
                    ControlDataRep = other.ControlDataRep.Clone();
                    break;
                case MsgOneofCase.ControlDataResp:
                    ControlDataResp = other.ControlDataResp.Clone();
                    break;
                case MsgOneofCase.GuideDataRep:
                    GuideDataRep = other.GuideDataRep.Clone();
                    break;
                case MsgOneofCase.GuideDataResp:
                    GuideDataResp = other.GuideDataResp.Clone();
                    break;
                case MsgOneofCase.IndividualUploadReq:
                    IndividualUploadReq = other.IndividualUploadReq.Clone();
                    break;
                case MsgOneofCase.IndividualUploadResp:
                    IndividualUploadResp = other.IndividualUploadResp.Clone();
                    break;
                case MsgOneofCase.IndividualDownloadReq:
                    IndividualDownloadReq = other.IndividualDownloadReq.Clone();
                    break;
                case MsgOneofCase.IndividualDownloadResp:
                    IndividualDownloadResp = other.IndividualDownloadResp.Clone();
                    break;
                case MsgOneofCase.IndividualChangeReq:
                    IndividualChangeReq = other.IndividualChangeReq.Clone();
                    break;
                case MsgOneofCase.IndividualChangeResp:
                    IndividualChangeResp = other.IndividualChangeResp.Clone();
                    break;
                case MsgOneofCase.ModeChangeReq:
                    ModeChangeReq = other.ModeChangeReq.Clone();
                    break;
                case MsgOneofCase.ModeChangeResp:
                    ModeChangeResp = other.ModeChangeResp.Clone();
                    break;
                case MsgOneofCase.TransReq:
                    TransReq = other.TransReq.Clone();
                    break;
                case MsgOneofCase.TransResp:
                    TransResp = other.TransResp.Clone();
                    break;
                case MsgOneofCase.TranCmpRep:
                    TranCmpRep = other.TranCmpRep.Clone();
                    break;
                case MsgOneofCase.TranCmpResp:
                    TranCmpResp = other.TranCmpResp.Clone();
                    break;
                case MsgOneofCase.ControlZoneReq:
                    ControlZoneReq = other.ControlZoneReq.Clone();
                    break;
                case MsgOneofCase.ControlZoneResp:
                    ControlZoneResp = other.ControlZoneResp.Clone();
                    break;
                case MsgOneofCase.TransCancelReq:
                    TransCancelReq = other.TransCancelReq.Clone();
                    break;
                case MsgOneofCase.TransCancelResp:
                    TransCancelResp = other.TransCancelResp.Clone();
                    break;
                case MsgOneofCase.PauseReq:
                    PauseReq = other.PauseReq.Clone();
                    break;
                case MsgOneofCase.PauseResp:
                    PauseResp = other.PauseResp.Clone();
                    break;
                case MsgOneofCase.TransEventRep:
                    TransEventRep = other.TransEventRep.Clone();
                    break;
                case MsgOneofCase.ImpTransEventRep:
                    ImpTransEventRep = other.ImpTransEventRep.Clone();
                    break;
                case MsgOneofCase.ImpTransEventResp:
                    ImpTransEventResp = other.ImpTransEventResp.Clone();
                    break;
                case MsgOneofCase.StatusReq:
                    StatusReq = other.StatusReq.Clone();
                    break;
                case MsgOneofCase.StatusReqResp:
                    StatusReqResp = other.StatusReqResp.Clone();
                    break;
                case MsgOneofCase.StatueChangeRep:
                    StatueChangeRep = other.StatueChangeRep.Clone();
                    break;
                case MsgOneofCase.StatusChangeResp:
                    StatusChangeResp = other.StatusChangeResp.Clone();
                    break;
                case MsgOneofCase.PowerOpeReq:
                    PowerOpeReq = other.PowerOpeReq.Clone();
                    break;
                case MsgOneofCase.PowerOpeResp:
                    PowerOpeResp = other.PowerOpeResp.Clone();
                    break;
                case MsgOneofCase.RangeTeachingReq:
                    RangeTeachingReq = other.RangeTeachingReq.Clone();
                    break;
                case MsgOneofCase.RangeTeachingResp:
                    RangeTeachingResp = other.RangeTeachingResp.Clone();
                    break;
                case MsgOneofCase.RangeTeachingCmpRep:
                    RangeTeachingCmpRep = other.RangeTeachingCmpRep.Clone();
                    break;
                case MsgOneofCase.RangeTeachingCmpResp:
                    RangeTeachingCmpResp = other.RangeTeachingCmpResp.Clone();
                    break;
                case MsgOneofCase.AddressTeachRep:
                    AddressTeachRep = other.AddressTeachRep.Clone();
                    break;
                case MsgOneofCase.AddressTeachResp:
                    AddressTeachResp = other.AddressTeachResp.Clone();
                    break;
                case MsgOneofCase.AlarmResetReq:
                    AlarmResetReq = other.AlarmResetReq.Clone();
                    break;
                case MsgOneofCase.AlarmResetResp:
                    AlarmResetResp = other.AlarmResetResp.Clone();
                    break;
                case MsgOneofCase.AlarmRep:
                    AlarmRep = other.AlarmRep.Clone();
                    break;
                case MsgOneofCase.AlarmResp:
                    AlarmResp = other.AlarmResp.Clone();
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WrapperMessage Clone()
        {
            return new WrapperMessage(this);
        }

        /// <summary>Field number for the "ID" field.</summary>
        public const int IDFieldNumber = 1000;
        private int iD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ID
        {
            get { return iD_; }
            set
            {
                iD_ = value;
            }
        }

        /// <summary>Field number for the "SeqNum" field.</summary>
        public const int SeqNumFieldNumber = 1001;
        private int seqNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SeqNum
        {
            get { return seqNum_; }
            set
            {
                seqNum_ = value;
            }
        }

        /// <summary>Field number for the "Host_Basic_Info_Rep" field.</summary>
        public const int HostBasicInfoRepFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_1_HOST_BASIC_INFO_VERSION_REP HostBasicInfoRep
        {
            get { return msgCase_ == MsgOneofCase.HostBasicInfoRep ? (global::TcpIpClientSample.ID_1_HOST_BASIC_INFO_VERSION_REP)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.HostBasicInfoRep;
            }
        }

        /// <summary>Field number for the "Host_Basic_Info_Resp" field.</summary>
        public const int HostBasicInfoRespFieldNumber = 101;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE HostBasicInfoResp
        {
            get { return msgCase_ == MsgOneofCase.HostBasicInfoResp ? (global::TcpIpClientSample.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.HostBasicInfoResp;
            }
        }

        /// <summary>Field number for the "Basic_Info_Version_Rep" field.</summary>
        public const int BasicInfoVersionRepFieldNumber = 102;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_102_BASIC_INFO_VERSION_REP BasicInfoVersionRep
        {
            get { return msgCase_ == MsgOneofCase.BasicInfoVersionRep ? (global::TcpIpClientSample.ID_102_BASIC_INFO_VERSION_REP)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoVersionRep;
            }
        }

        /// <summary>Field number for the "Basic_Info_Version_Resp" field.</summary>
        public const int BasicInfoVersionRespFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_2_BASIC_INFO_VERSION_RESPONSE BasicInfoVersionResp
        {
            get { return msgCase_ == MsgOneofCase.BasicInfoVersionResp ? (global::TcpIpClientSample.ID_2_BASIC_INFO_VERSION_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoVersionResp;
            }
        }

        /// <summary>Field number for the "Basic_Info_Rep" field.</summary>
        public const int BasicInfoRepFieldNumber = 11;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_11_BASIC_INFO_REP BasicInfoRep
        {
            get { return msgCase_ == MsgOneofCase.BasicInfoRep ? (global::TcpIpClientSample.ID_11_BASIC_INFO_REP)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoRep;
            }
        }

        /// <summary>Field number for the "Basic_Info_Resp" field.</summary>
        public const int BasicInfoRespFieldNumber = 111;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_111_BASIC_INFO_RESPONSE BasicInfoResp
        {
            get { return msgCase_ == MsgOneofCase.BasicInfoResp ? (global::TcpIpClientSample.ID_111_BASIC_INFO_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.BasicInfoResp;
            }
        }

        /// <summary>Field number for the "Tavelling_Data_Rep" field.</summary>
        public const int TavellingDataRepFieldNumber = 13;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_13_TAVELLING_DATA_REP TavellingDataRep
        {
            get { return msgCase_ == MsgOneofCase.TavellingDataRep ? (global::TcpIpClientSample.ID_13_TAVELLING_DATA_REP)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TavellingDataRep;
            }
        }

        /// <summary>Field number for the "Tavelling_Data_Resp" field.</summary>
        public const int TavellingDataRespFieldNumber = 113;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_113_TAVELLING_DATA_RESPONSE TavellingDataResp
        {
            get { return msgCase_ == MsgOneofCase.TavellingDataResp ? (global::TcpIpClientSample.ID_113_TAVELLING_DATA_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TavellingDataResp;
            }
        }

        /// <summary>Field number for the "Section_Data_Rep" field.</summary>
        public const int SectionDataRepFieldNumber = 15;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_15_SECTION_DATA_REP SectionDataRep
        {
            get { return msgCase_ == MsgOneofCase.SectionDataRep ? (global::TcpIpClientSample.ID_15_SECTION_DATA_REP)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SectionDataRep;
            }
        }

        /// <summary>Field number for the "Section_Data_Resp" field.</summary>
        public const int SectionDataRespFieldNumber = 115;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_115_SECTION_DATA_RESPONSE SectionDataResp
        {
            get { return msgCase_ == MsgOneofCase.SectionDataResp ? (global::TcpIpClientSample.ID_115_SECTION_DATA_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SectionDataResp;
            }
        }

        /// <summary>Field number for the "Address_Data_Rep" field.</summary>
        public const int AddressDataRepFieldNumber = 17;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP AddressDataRep
        {
            get { return msgCase_ == MsgOneofCase.AddressDataRep ? (global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressDataRep;
            }
        }

        /// <summary>Field number for the "Address_Data_Resp" field.</summary>
        public const int AddressDataRespFieldNumber = 117;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_117_ADDRESS_DATA_RESPONSE AddressDataResp
        {
            get { return msgCase_ == MsgOneofCase.AddressDataResp ? (global::TcpIpClientSample.ID_117_ADDRESS_DATA_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressDataResp;
            }
        }

        /// <summary>Field number for the "Scale_Data_Rep" field.</summary>
        public const int ScaleDataRepFieldNumber = 19;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_19_SCALE_DATA_REP ScaleDataRep
        {
            get { return msgCase_ == MsgOneofCase.ScaleDataRep ? (global::TcpIpClientSample.ID_19_SCALE_DATA_REP)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ScaleDataRep;
            }
        }

        /// <summary>Field number for the "Scale_Data_Resp" field.</summary>
        public const int ScaleDataRespFieldNumber = 119;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_119_SCALE_DATA_RESPONSE ScaleDataResp
        {
            get { return msgCase_ == MsgOneofCase.ScaleDataResp ? (global::TcpIpClientSample.ID_119_SCALE_DATA_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ScaleDataResp;
            }
        }

        /// <summary>Field number for the "Control_Data_Rep" field.</summary>
        public const int ControlDataRepFieldNumber = 21;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_21_CONTROL_DATA_REP ControlDataRep
        {
            get { return msgCase_ == MsgOneofCase.ControlDataRep ? (global::TcpIpClientSample.ID_21_CONTROL_DATA_REP)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlDataRep;
            }
        }

        /// <summary>Field number for the "Control_Data_Resp" field.</summary>
        public const int ControlDataRespFieldNumber = 121;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_121_CONTROL_DATA_RESPONSE ControlDataResp
        {
            get { return msgCase_ == MsgOneofCase.ControlDataResp ? (global::TcpIpClientSample.ID_121_CONTROL_DATA_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlDataResp;
            }
        }

        /// <summary>Field number for the "Guide_Data_Rep" field.</summary>
        public const int GuideDataRepFieldNumber = 23;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_23_GUIDE_DATA_REP GuideDataRep
        {
            get { return msgCase_ == MsgOneofCase.GuideDataRep ? (global::TcpIpClientSample.ID_23_GUIDE_DATA_REP)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GuideDataRep;
            }
        }

        /// <summary>Field number for the "Guide_Data_Resp" field.</summary>
        public const int GuideDataRespFieldNumber = 123;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_123_GUIDE_DATA_RESPONSE GuideDataResp
        {
            get { return msgCase_ == MsgOneofCase.GuideDataResp ? (global::TcpIpClientSample.ID_123_GUIDE_DATA_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.GuideDataResp;
            }
        }

        /// <summary>Field number for the "Individual_Upload_Req" field.</summary>
        public const int IndividualUploadReqFieldNumber = 61;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_61_INDIVIDUAL_UPLOAD_REQ IndividualUploadReq
        {
            get { return msgCase_ == MsgOneofCase.IndividualUploadReq ? (global::TcpIpClientSample.ID_61_INDIVIDUAL_UPLOAD_REQ)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualUploadReq;
            }
        }

        /// <summary>Field number for the "Individual_Upload_Resp" field.</summary>
        public const int IndividualUploadRespFieldNumber = 161;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_161_INDIVIDUAL_UPLOAD_RESPONSE IndividualUploadResp
        {
            get { return msgCase_ == MsgOneofCase.IndividualUploadResp ? (global::TcpIpClientSample.ID_161_INDIVIDUAL_UPLOAD_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualUploadResp;
            }
        }

        /// <summary>Field number for the "Individual_Download_Req" field.</summary>
        public const int IndividualDownloadReqFieldNumber = 162;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_162_INDIVIDUAL_DOWNLOAD_REQ IndividualDownloadReq
        {
            get { return msgCase_ == MsgOneofCase.IndividualDownloadReq ? (global::TcpIpClientSample.ID_162_INDIVIDUAL_DOWNLOAD_REQ)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualDownloadReq;
            }
        }

        /// <summary>Field number for the "Individual_Download_Resp" field.</summary>
        public const int IndividualDownloadRespFieldNumber = 62;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE IndividualDownloadResp
        {
            get { return msgCase_ == MsgOneofCase.IndividualDownloadResp ? (global::TcpIpClientSample.ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualDownloadResp;
            }
        }

        /// <summary>Field number for the "Individual_Change_Req" field.</summary>
        public const int IndividualChangeReqFieldNumber = 63;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_63_INDIVIDUAL_CHANGE_REQ IndividualChangeReq
        {
            get { return msgCase_ == MsgOneofCase.IndividualChangeReq ? (global::TcpIpClientSample.ID_63_INDIVIDUAL_CHANGE_REQ)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualChangeReq;
            }
        }

        /// <summary>Field number for the "Individual_Change_Resp" field.</summary>
        public const int IndividualChangeRespFieldNumber = 163;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_163_INDIVIDUAL_CHANGE_RESPONSE IndividualChangeResp
        {
            get { return msgCase_ == MsgOneofCase.IndividualChangeResp ? (global::TcpIpClientSample.ID_163_INDIVIDUAL_CHANGE_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.IndividualChangeResp;
            }
        }

        /// <summary>Field number for the "Mode_Change_Req" field.</summary>
        public const int ModeChangeReqFieldNumber = 41;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_41_MODE_CHANGE_REQ ModeChangeReq
        {
            get { return msgCase_ == MsgOneofCase.ModeChangeReq ? (global::TcpIpClientSample.ID_41_MODE_CHANGE_REQ)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ModeChangeReq;
            }
        }

        /// <summary>Field number for the "Mode_Change_Resp" field.</summary>
        public const int ModeChangeRespFieldNumber = 141;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_141_MODE_CHANGE_RESPONSE ModeChangeResp
        {
            get { return msgCase_ == MsgOneofCase.ModeChangeResp ? (global::TcpIpClientSample.ID_141_MODE_CHANGE_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ModeChangeResp;
            }
        }

        /// <summary>Field number for the "Trans_Req" field.</summary>
        public const int TransReqFieldNumber = 31;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_31_TRANS_REQUEST TransReq
        {
            get { return msgCase_ == MsgOneofCase.TransReq ? (global::TcpIpClientSample.ID_31_TRANS_REQUEST)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransReq;
            }
        }

        /// <summary>Field number for the "Trans_Resp" field.</summary>
        public const int TransRespFieldNumber = 131;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_131_TRANS_RESPONSE TransResp
        {
            get { return msgCase_ == MsgOneofCase.TransResp ? (global::TcpIpClientSample.ID_131_TRANS_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransResp;
            }
        }

        /// <summary>Field number for the "Tran_Cmp_Rep" field.</summary>
        public const int TranCmpRepFieldNumber = 132;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_132_TRANS_COMPLETE_REPORT TranCmpRep
        {
            get { return msgCase_ == MsgOneofCase.TranCmpRep ? (global::TcpIpClientSample.ID_132_TRANS_COMPLETE_REPORT)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TranCmpRep;
            }
        }

        /// <summary>Field number for the "Tran_Cmp_Resp" field.</summary>
        public const int TranCmpRespFieldNumber = 32;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_32_TRANS_COMPLETE_RESPONSE TranCmpResp
        {
            get { return msgCase_ == MsgOneofCase.TranCmpResp ? (global::TcpIpClientSample.ID_32_TRANS_COMPLETE_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TranCmpResp;
            }
        }

        /// <summary>Field number for the "Control_Zone_Req" field.</summary>
        public const int ControlZoneReqFieldNumber = 33;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST ControlZoneReq
        {
            get { return msgCase_ == MsgOneofCase.ControlZoneReq ? (global::TcpIpClientSample.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlZoneReq;
            }
        }

        /// <summary>Field number for the "Control_Zone_Resp" field.</summary>
        public const int ControlZoneRespFieldNumber = 133;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE ControlZoneResp
        {
            get { return msgCase_ == MsgOneofCase.ControlZoneResp ? (global::TcpIpClientSample.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ControlZoneResp;
            }
        }

        /// <summary>Field number for the "Trans_Cancel_Req" field.</summary>
        public const int TransCancelReqFieldNumber = 37;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_37_TRANS_CANCEL_REQUEST TransCancelReq
        {
            get { return msgCase_ == MsgOneofCase.TransCancelReq ? (global::TcpIpClientSample.ID_37_TRANS_CANCEL_REQUEST)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransCancelReq;
            }
        }

        /// <summary>Field number for the "Trans_Cancel_Resp" field.</summary>
        public const int TransCancelRespFieldNumber = 137;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_137_TRANS_CANCEL_RESPONSE TransCancelResp
        {
            get { return msgCase_ == MsgOneofCase.TransCancelResp ? (global::TcpIpClientSample.ID_137_TRANS_CANCEL_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransCancelResp;
            }
        }

        /// <summary>Field number for the "Pause_Req" field.</summary>
        public const int PauseReqFieldNumber = 39;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_39_PAUSE_REQUEST PauseReq
        {
            get { return msgCase_ == MsgOneofCase.PauseReq ? (global::TcpIpClientSample.ID_39_PAUSE_REQUEST)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PauseReq;
            }
        }

        /// <summary>Field number for the "Pause_Resp" field.</summary>
        public const int PauseRespFieldNumber = 139;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_139_PAUSE_RESPONSE PauseResp
        {
            get { return msgCase_ == MsgOneofCase.PauseResp ? (global::TcpIpClientSample.ID_139_PAUSE_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PauseResp;
            }
        }

        /// <summary>Field number for the "Trans_Event_Rep" field.</summary>
        public const int TransEventRepFieldNumber = 134;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_134_TRANS_EVENT_REP TransEventRep
        {
            get { return msgCase_ == MsgOneofCase.TransEventRep ? (global::TcpIpClientSample.ID_134_TRANS_EVENT_REP)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TransEventRep;
            }
        }

        /// <summary>Field number for the "Imp_Trans_Event_Rep" field.</summary>
        public const int ImpTransEventRepFieldNumber = 136;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_136_TRANS_EVENT_REP ImpTransEventRep
        {
            get { return msgCase_ == MsgOneofCase.ImpTransEventRep ? (global::TcpIpClientSample.ID_136_TRANS_EVENT_REP)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ImpTransEventRep;
            }
        }

        /// <summary>Field number for the "Imp_Trans_Event_Resp" field.</summary>
        public const int ImpTransEventRespFieldNumber = 36;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_36_TRANS_EVENT_RESPONSE ImpTransEventResp
        {
            get { return msgCase_ == MsgOneofCase.ImpTransEventResp ? (global::TcpIpClientSample.ID_36_TRANS_EVENT_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ImpTransEventResp;
            }
        }

        /// <summary>Field number for the "Status_Req" field.</summary>
        public const int StatusReqFieldNumber = 43;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_43_STATUS_REQUEST StatusReq
        {
            get { return msgCase_ == MsgOneofCase.StatusReq ? (global::TcpIpClientSample.ID_43_STATUS_REQUEST)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatusReq;
            }
        }

        /// <summary>Field number for the "Status_Req_Resp" field.</summary>
        public const int StatusReqRespFieldNumber = 143;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_143_STATUS_RESPONSE StatusReqResp
        {
            get { return msgCase_ == MsgOneofCase.StatusReqResp ? (global::TcpIpClientSample.ID_143_STATUS_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatusReqResp;
            }
        }

        /// <summary>Field number for the "Statue_Change_Rep" field.</summary>
        public const int StatueChangeRepFieldNumber = 144;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_144_STATUS_CHANGE_REP StatueChangeRep
        {
            get { return msgCase_ == MsgOneofCase.StatueChangeRep ? (global::TcpIpClientSample.ID_144_STATUS_CHANGE_REP)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatueChangeRep;
            }
        }

        /// <summary>Field number for the "Status_Change_Resp" field.</summary>
        public const int StatusChangeRespFieldNumber = 44;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_44_STATUS_CHANGE_RESPONSE StatusChangeResp
        {
            get { return msgCase_ == MsgOneofCase.StatusChangeResp ? (global::TcpIpClientSample.ID_44_STATUS_CHANGE_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.StatusChangeResp;
            }
        }

        /// <summary>Field number for the "Power_Ope_Req" field.</summary>
        public const int PowerOpeReqFieldNumber = 45;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_45_POWER_OPE_REQ PowerOpeReq
        {
            get { return msgCase_ == MsgOneofCase.PowerOpeReq ? (global::TcpIpClientSample.ID_45_POWER_OPE_REQ)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PowerOpeReq;
            }
        }

        /// <summary>Field number for the "Power_Ope_Resp" field.</summary>
        public const int PowerOpeRespFieldNumber = 145;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_145_POWER_OPE_RESPONSE PowerOpeResp
        {
            get { return msgCase_ == MsgOneofCase.PowerOpeResp ? (global::TcpIpClientSample.ID_145_POWER_OPE_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.PowerOpeResp;
            }
        }

        /// <summary>Field number for the "Range_Teaching_Req" field.</summary>
        public const int RangeTeachingReqFieldNumber = 71;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_71_RANGE_TEACHING_REQUEST RangeTeachingReq
        {
            get { return msgCase_ == MsgOneofCase.RangeTeachingReq ? (global::TcpIpClientSample.ID_71_RANGE_TEACHING_REQUEST)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingReq;
            }
        }

        /// <summary>Field number for the "Range_Teaching_Resp" field.</summary>
        public const int RangeTeachingRespFieldNumber = 171;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_171_RANGE_TEACHING_RESPONSE RangeTeachingResp
        {
            get { return msgCase_ == MsgOneofCase.RangeTeachingResp ? (global::TcpIpClientSample.ID_171_RANGE_TEACHING_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingResp;
            }
        }

        /// <summary>Field number for the "Range_Teaching_Cmp_Rep" field.</summary>
        public const int RangeTeachingCmpRepFieldNumber = 172;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_172_RANGE_TEACHING_COMPLETE_REPORT RangeTeachingCmpRep
        {
            get { return msgCase_ == MsgOneofCase.RangeTeachingCmpRep ? (global::TcpIpClientSample.ID_172_RANGE_TEACHING_COMPLETE_REPORT)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingCmpRep;
            }
        }

        /// <summary>Field number for the "Range_Teaching_Cmp_Resp" field.</summary>
        public const int RangeTeachingCmpRespFieldNumber = 72;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE RangeTeachingCmpResp
        {
            get { return msgCase_ == MsgOneofCase.RangeTeachingCmpResp ? (global::TcpIpClientSample.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.RangeTeachingCmpResp;
            }
        }

        /// <summary>Field number for the "Address_Teach_Rep" field.</summary>
        public const int AddressTeachRepFieldNumber = 174;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_174_ADDRESS_TEACH_REPORT AddressTeachRep
        {
            get { return msgCase_ == MsgOneofCase.AddressTeachRep ? (global::TcpIpClientSample.ID_174_ADDRESS_TEACH_REPORT)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressTeachRep;
            }
        }

        /// <summary>Field number for the "Address_Teach_Resp" field.</summary>
        public const int AddressTeachRespFieldNumber = 74;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_74_ADDRESS_TEACH_RESPONSE AddressTeachResp
        {
            get { return msgCase_ == MsgOneofCase.AddressTeachResp ? (global::TcpIpClientSample.ID_74_ADDRESS_TEACH_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AddressTeachResp;
            }
        }

        /// <summary>Field number for the "Alarm_Reset_Req" field.</summary>
        public const int AlarmResetReqFieldNumber = 91;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_91_ALARM_RESET_REQUEST AlarmResetReq
        {
            get { return msgCase_ == MsgOneofCase.AlarmResetReq ? (global::TcpIpClientSample.ID_91_ALARM_RESET_REQUEST)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmResetReq;
            }
        }

        /// <summary>Field number for the "Alarm_Reset_Resp" field.</summary>
        public const int AlarmResetRespFieldNumber = 191;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_191_ALARM_RESET_RESPONSE AlarmResetResp
        {
            get { return msgCase_ == MsgOneofCase.AlarmResetResp ? (global::TcpIpClientSample.ID_191_ALARM_RESET_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmResetResp;
            }
        }

        /// <summary>Field number for the "Alarm_Rep" field.</summary>
        public const int AlarmRepFieldNumber = 194;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_194_ALARM_REPORT AlarmRep
        {
            get { return msgCase_ == MsgOneofCase.AlarmRep ? (global::TcpIpClientSample.ID_194_ALARM_REPORT)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmRep;
            }
        }

        /// <summary>Field number for the "Alarm_Resp" field.</summary>
        public const int AlarmRespFieldNumber = 94;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TcpIpClientSample.ID_94_ALARM_RESPONSE AlarmResp
        {
            get { return msgCase_ == MsgOneofCase.AlarmResp ? (global::TcpIpClientSample.ID_94_ALARM_RESPONSE)msg_ : null; }
            set
            {
                msg_ = value;
                msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.AlarmResp;
            }
        }

        private object msg_;
        /// <summary>Enum of possible cases for the "msg" oneof.</summary>
        public enum MsgOneofCase
        {
            None = 0,
            HostBasicInfoRep = 1,
            HostBasicInfoResp = 101,
            BasicInfoVersionRep = 102,
            BasicInfoVersionResp = 2,
            BasicInfoRep = 11,
            BasicInfoResp = 111,
            TavellingDataRep = 13,
            TavellingDataResp = 113,
            SectionDataRep = 15,
            SectionDataResp = 115,
            AddressDataRep = 17,
            AddressDataResp = 117,
            ScaleDataRep = 19,
            ScaleDataResp = 119,
            ControlDataRep = 21,
            ControlDataResp = 121,
            GuideDataRep = 23,
            GuideDataResp = 123,
            IndividualUploadReq = 61,
            IndividualUploadResp = 161,
            IndividualDownloadReq = 162,
            IndividualDownloadResp = 62,
            IndividualChangeReq = 63,
            IndividualChangeResp = 163,
            ModeChangeReq = 41,
            ModeChangeResp = 141,
            TransReq = 31,
            TransResp = 131,
            TranCmpRep = 132,
            TranCmpResp = 32,
            ControlZoneReq = 33,
            ControlZoneResp = 133,
            TransCancelReq = 37,
            TransCancelResp = 137,
            PauseReq = 39,
            PauseResp = 139,
            TransEventRep = 134,
            ImpTransEventRep = 136,
            ImpTransEventResp = 36,
            StatusReq = 43,
            StatusReqResp = 143,
            StatueChangeRep = 144,
            StatusChangeResp = 44,
            PowerOpeReq = 45,
            PowerOpeResp = 145,
            RangeTeachingReq = 71,
            RangeTeachingResp = 171,
            RangeTeachingCmpRep = 172,
            RangeTeachingCmpResp = 72,
            AddressTeachRep = 174,
            AddressTeachResp = 74,
            AlarmResetReq = 91,
            AlarmResetResp = 191,
            AlarmRep = 194,
            AlarmResp = 94,
        }
        private MsgOneofCase msgCase_ = MsgOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MsgOneofCase MsgCase
        {
            get { return msgCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMsg()
        {
            msgCase_ = MsgOneofCase.None;
            msg_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as WrapperMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WrapperMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ID != other.ID) return false;
            if (SeqNum != other.SeqNum) return false;
            if (!object.Equals(HostBasicInfoRep, other.HostBasicInfoRep)) return false;
            if (!object.Equals(HostBasicInfoResp, other.HostBasicInfoResp)) return false;
            if (!object.Equals(BasicInfoVersionRep, other.BasicInfoVersionRep)) return false;
            if (!object.Equals(BasicInfoVersionResp, other.BasicInfoVersionResp)) return false;
            if (!object.Equals(BasicInfoRep, other.BasicInfoRep)) return false;
            if (!object.Equals(BasicInfoResp, other.BasicInfoResp)) return false;
            if (!object.Equals(TavellingDataRep, other.TavellingDataRep)) return false;
            if (!object.Equals(TavellingDataResp, other.TavellingDataResp)) return false;
            if (!object.Equals(SectionDataRep, other.SectionDataRep)) return false;
            if (!object.Equals(SectionDataResp, other.SectionDataResp)) return false;
            if (!object.Equals(AddressDataRep, other.AddressDataRep)) return false;
            if (!object.Equals(AddressDataResp, other.AddressDataResp)) return false;
            if (!object.Equals(ScaleDataRep, other.ScaleDataRep)) return false;
            if (!object.Equals(ScaleDataResp, other.ScaleDataResp)) return false;
            if (!object.Equals(ControlDataRep, other.ControlDataRep)) return false;
            if (!object.Equals(ControlDataResp, other.ControlDataResp)) return false;
            if (!object.Equals(GuideDataRep, other.GuideDataRep)) return false;
            if (!object.Equals(GuideDataResp, other.GuideDataResp)) return false;
            if (!object.Equals(IndividualUploadReq, other.IndividualUploadReq)) return false;
            if (!object.Equals(IndividualUploadResp, other.IndividualUploadResp)) return false;
            if (!object.Equals(IndividualDownloadReq, other.IndividualDownloadReq)) return false;
            if (!object.Equals(IndividualDownloadResp, other.IndividualDownloadResp)) return false;
            if (!object.Equals(IndividualChangeReq, other.IndividualChangeReq)) return false;
            if (!object.Equals(IndividualChangeResp, other.IndividualChangeResp)) return false;
            if (!object.Equals(ModeChangeReq, other.ModeChangeReq)) return false;
            if (!object.Equals(ModeChangeResp, other.ModeChangeResp)) return false;
            if (!object.Equals(TransReq, other.TransReq)) return false;
            if (!object.Equals(TransResp, other.TransResp)) return false;
            if (!object.Equals(TranCmpRep, other.TranCmpRep)) return false;
            if (!object.Equals(TranCmpResp, other.TranCmpResp)) return false;
            if (!object.Equals(ControlZoneReq, other.ControlZoneReq)) return false;
            if (!object.Equals(ControlZoneResp, other.ControlZoneResp)) return false;
            if (!object.Equals(TransCancelReq, other.TransCancelReq)) return false;
            if (!object.Equals(TransCancelResp, other.TransCancelResp)) return false;
            if (!object.Equals(PauseReq, other.PauseReq)) return false;
            if (!object.Equals(PauseResp, other.PauseResp)) return false;
            if (!object.Equals(TransEventRep, other.TransEventRep)) return false;
            if (!object.Equals(ImpTransEventRep, other.ImpTransEventRep)) return false;
            if (!object.Equals(ImpTransEventResp, other.ImpTransEventResp)) return false;
            if (!object.Equals(StatusReq, other.StatusReq)) return false;
            if (!object.Equals(StatusReqResp, other.StatusReqResp)) return false;
            if (!object.Equals(StatueChangeRep, other.StatueChangeRep)) return false;
            if (!object.Equals(StatusChangeResp, other.StatusChangeResp)) return false;
            if (!object.Equals(PowerOpeReq, other.PowerOpeReq)) return false;
            if (!object.Equals(PowerOpeResp, other.PowerOpeResp)) return false;
            if (!object.Equals(RangeTeachingReq, other.RangeTeachingReq)) return false;
            if (!object.Equals(RangeTeachingResp, other.RangeTeachingResp)) return false;
            if (!object.Equals(RangeTeachingCmpRep, other.RangeTeachingCmpRep)) return false;
            if (!object.Equals(RangeTeachingCmpResp, other.RangeTeachingCmpResp)) return false;
            if (!object.Equals(AddressTeachRep, other.AddressTeachRep)) return false;
            if (!object.Equals(AddressTeachResp, other.AddressTeachResp)) return false;
            if (!object.Equals(AlarmResetReq, other.AlarmResetReq)) return false;
            if (!object.Equals(AlarmResetResp, other.AlarmResetResp)) return false;
            if (!object.Equals(AlarmRep, other.AlarmRep)) return false;
            if (!object.Equals(AlarmResp, other.AlarmResp)) return false;
            if (MsgCase != other.MsgCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ID != 0) hash ^= ID.GetHashCode();
            if (SeqNum != 0) hash ^= SeqNum.GetHashCode();
            if (msgCase_ == MsgOneofCase.HostBasicInfoRep) hash ^= HostBasicInfoRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.HostBasicInfoResp) hash ^= HostBasicInfoResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.BasicInfoVersionRep) hash ^= BasicInfoVersionRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.BasicInfoVersionResp) hash ^= BasicInfoVersionResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.BasicInfoRep) hash ^= BasicInfoRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.BasicInfoResp) hash ^= BasicInfoResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.TavellingDataRep) hash ^= TavellingDataRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.TavellingDataResp) hash ^= TavellingDataResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.SectionDataRep) hash ^= SectionDataRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.SectionDataResp) hash ^= SectionDataResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.AddressDataRep) hash ^= AddressDataRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.AddressDataResp) hash ^= AddressDataResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.ScaleDataRep) hash ^= ScaleDataRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.ScaleDataResp) hash ^= ScaleDataResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.ControlDataRep) hash ^= ControlDataRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.ControlDataResp) hash ^= ControlDataResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.GuideDataRep) hash ^= GuideDataRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.GuideDataResp) hash ^= GuideDataResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.IndividualUploadReq) hash ^= IndividualUploadReq.GetHashCode();
            if (msgCase_ == MsgOneofCase.IndividualUploadResp) hash ^= IndividualUploadResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.IndividualDownloadReq) hash ^= IndividualDownloadReq.GetHashCode();
            if (msgCase_ == MsgOneofCase.IndividualDownloadResp) hash ^= IndividualDownloadResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.IndividualChangeReq) hash ^= IndividualChangeReq.GetHashCode();
            if (msgCase_ == MsgOneofCase.IndividualChangeResp) hash ^= IndividualChangeResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.ModeChangeReq) hash ^= ModeChangeReq.GetHashCode();
            if (msgCase_ == MsgOneofCase.ModeChangeResp) hash ^= ModeChangeResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.TransReq) hash ^= TransReq.GetHashCode();
            if (msgCase_ == MsgOneofCase.TransResp) hash ^= TransResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.TranCmpRep) hash ^= TranCmpRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.TranCmpResp) hash ^= TranCmpResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.ControlZoneReq) hash ^= ControlZoneReq.GetHashCode();
            if (msgCase_ == MsgOneofCase.ControlZoneResp) hash ^= ControlZoneResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.TransCancelReq) hash ^= TransCancelReq.GetHashCode();
            if (msgCase_ == MsgOneofCase.TransCancelResp) hash ^= TransCancelResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.PauseReq) hash ^= PauseReq.GetHashCode();
            if (msgCase_ == MsgOneofCase.PauseResp) hash ^= PauseResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.TransEventRep) hash ^= TransEventRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.ImpTransEventRep) hash ^= ImpTransEventRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.ImpTransEventResp) hash ^= ImpTransEventResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.StatusReq) hash ^= StatusReq.GetHashCode();
            if (msgCase_ == MsgOneofCase.StatusReqResp) hash ^= StatusReqResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.StatueChangeRep) hash ^= StatueChangeRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.StatusChangeResp) hash ^= StatusChangeResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.PowerOpeReq) hash ^= PowerOpeReq.GetHashCode();
            if (msgCase_ == MsgOneofCase.PowerOpeResp) hash ^= PowerOpeResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.RangeTeachingReq) hash ^= RangeTeachingReq.GetHashCode();
            if (msgCase_ == MsgOneofCase.RangeTeachingResp) hash ^= RangeTeachingResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep) hash ^= RangeTeachingCmpRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp) hash ^= RangeTeachingCmpResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.AddressTeachRep) hash ^= AddressTeachRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.AddressTeachResp) hash ^= AddressTeachResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.AlarmResetReq) hash ^= AlarmResetReq.GetHashCode();
            if (msgCase_ == MsgOneofCase.AlarmResetResp) hash ^= AlarmResetResp.GetHashCode();
            if (msgCase_ == MsgOneofCase.AlarmRep) hash ^= AlarmRep.GetHashCode();
            if (msgCase_ == MsgOneofCase.AlarmResp) hash ^= AlarmResp.GetHashCode();
            hash ^= (int)msgCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (msgCase_ == MsgOneofCase.HostBasicInfoRep)
            {
                output.WriteRawTag(10);
                output.WriteMessage(HostBasicInfoRep);
            }
            if (msgCase_ == MsgOneofCase.BasicInfoVersionResp)
            {
                output.WriteRawTag(18);
                output.WriteMessage(BasicInfoVersionResp);
            }
            if (msgCase_ == MsgOneofCase.BasicInfoRep)
            {
                output.WriteRawTag(90);
                output.WriteMessage(BasicInfoRep);
            }
            if (msgCase_ == MsgOneofCase.TavellingDataRep)
            {
                output.WriteRawTag(106);
                output.WriteMessage(TavellingDataRep);
            }
            if (msgCase_ == MsgOneofCase.SectionDataRep)
            {
                output.WriteRawTag(122);
                output.WriteMessage(SectionDataRep);
            }
            if (msgCase_ == MsgOneofCase.AddressDataRep)
            {
                output.WriteRawTag(138, 1);
                output.WriteMessage(AddressDataRep);
            }
            if (msgCase_ == MsgOneofCase.ScaleDataRep)
            {
                output.WriteRawTag(154, 1);
                output.WriteMessage(ScaleDataRep);
            }
            if (msgCase_ == MsgOneofCase.ControlDataRep)
            {
                output.WriteRawTag(170, 1);
                output.WriteMessage(ControlDataRep);
            }
            if (msgCase_ == MsgOneofCase.GuideDataRep)
            {
                output.WriteRawTag(186, 1);
                output.WriteMessage(GuideDataRep);
            }
            if (msgCase_ == MsgOneofCase.TransReq)
            {
                output.WriteRawTag(250, 1);
                output.WriteMessage(TransReq);
            }
            if (msgCase_ == MsgOneofCase.TranCmpResp)
            {
                output.WriteRawTag(130, 2);
                output.WriteMessage(TranCmpResp);
            }
            if (msgCase_ == MsgOneofCase.ControlZoneReq)
            {
                output.WriteRawTag(138, 2);
                output.WriteMessage(ControlZoneReq);
            }
            if (msgCase_ == MsgOneofCase.ImpTransEventResp)
            {
                output.WriteRawTag(162, 2);
                output.WriteMessage(ImpTransEventResp);
            }
            if (msgCase_ == MsgOneofCase.TransCancelReq)
            {
                output.WriteRawTag(170, 2);
                output.WriteMessage(TransCancelReq);
            }
            if (msgCase_ == MsgOneofCase.PauseReq)
            {
                output.WriteRawTag(186, 2);
                output.WriteMessage(PauseReq);
            }
            if (msgCase_ == MsgOneofCase.ModeChangeReq)
            {
                output.WriteRawTag(202, 2);
                output.WriteMessage(ModeChangeReq);
            }
            if (msgCase_ == MsgOneofCase.StatusReq)
            {
                output.WriteRawTag(218, 2);
                output.WriteMessage(StatusReq);
            }
            if (msgCase_ == MsgOneofCase.StatusChangeResp)
            {
                output.WriteRawTag(226, 2);
                output.WriteMessage(StatusChangeResp);
            }
            if (msgCase_ == MsgOneofCase.PowerOpeReq)
            {
                output.WriteRawTag(234, 2);
                output.WriteMessage(PowerOpeReq);
            }
            if (msgCase_ == MsgOneofCase.IndividualUploadReq)
            {
                output.WriteRawTag(234, 3);
                output.WriteMessage(IndividualUploadReq);
            }
            if (msgCase_ == MsgOneofCase.IndividualDownloadResp)
            {
                output.WriteRawTag(242, 3);
                output.WriteMessage(IndividualDownloadResp);
            }
            if (msgCase_ == MsgOneofCase.IndividualChangeReq)
            {
                output.WriteRawTag(250, 3);
                output.WriteMessage(IndividualChangeReq);
            }
            if (msgCase_ == MsgOneofCase.RangeTeachingReq)
            {
                output.WriteRawTag(186, 4);
                output.WriteMessage(RangeTeachingReq);
            }
            if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp)
            {
                output.WriteRawTag(194, 4);
                output.WriteMessage(RangeTeachingCmpResp);
            }
            if (msgCase_ == MsgOneofCase.AddressTeachResp)
            {
                output.WriteRawTag(210, 4);
                output.WriteMessage(AddressTeachResp);
            }
            if (msgCase_ == MsgOneofCase.AlarmResetReq)
            {
                output.WriteRawTag(218, 5);
                output.WriteMessage(AlarmResetReq);
            }
            if (msgCase_ == MsgOneofCase.AlarmResp)
            {
                output.WriteRawTag(242, 5);
                output.WriteMessage(AlarmResp);
            }
            if (msgCase_ == MsgOneofCase.HostBasicInfoResp)
            {
                output.WriteRawTag(170, 6);
                output.WriteMessage(HostBasicInfoResp);
            }
            if (msgCase_ == MsgOneofCase.BasicInfoVersionRep)
            {
                output.WriteRawTag(178, 6);
                output.WriteMessage(BasicInfoVersionRep);
            }
            if (msgCase_ == MsgOneofCase.BasicInfoResp)
            {
                output.WriteRawTag(250, 6);
                output.WriteMessage(BasicInfoResp);
            }
            if (msgCase_ == MsgOneofCase.TavellingDataResp)
            {
                output.WriteRawTag(138, 7);
                output.WriteMessage(TavellingDataResp);
            }
            if (msgCase_ == MsgOneofCase.SectionDataResp)
            {
                output.WriteRawTag(154, 7);
                output.WriteMessage(SectionDataResp);
            }
            if (msgCase_ == MsgOneofCase.AddressDataResp)
            {
                output.WriteRawTag(170, 7);
                output.WriteMessage(AddressDataResp);
            }
            if (msgCase_ == MsgOneofCase.ScaleDataResp)
            {
                output.WriteRawTag(186, 7);
                output.WriteMessage(ScaleDataResp);
            }
            if (msgCase_ == MsgOneofCase.ControlDataResp)
            {
                output.WriteRawTag(202, 7);
                output.WriteMessage(ControlDataResp);
            }
            if (msgCase_ == MsgOneofCase.GuideDataResp)
            {
                output.WriteRawTag(218, 7);
                output.WriteMessage(GuideDataResp);
            }
            if (msgCase_ == MsgOneofCase.TransResp)
            {
                output.WriteRawTag(154, 8);
                output.WriteMessage(TransResp);
            }
            if (msgCase_ == MsgOneofCase.TranCmpRep)
            {
                output.WriteRawTag(162, 8);
                output.WriteMessage(TranCmpRep);
            }
            if (msgCase_ == MsgOneofCase.ControlZoneResp)
            {
                output.WriteRawTag(170, 8);
                output.WriteMessage(ControlZoneResp);
            }
            if (msgCase_ == MsgOneofCase.TransEventRep)
            {
                output.WriteRawTag(178, 8);
                output.WriteMessage(TransEventRep);
            }
            if (msgCase_ == MsgOneofCase.ImpTransEventRep)
            {
                output.WriteRawTag(194, 8);
                output.WriteMessage(ImpTransEventRep);
            }
            if (msgCase_ == MsgOneofCase.TransCancelResp)
            {
                output.WriteRawTag(202, 8);
                output.WriteMessage(TransCancelResp);
            }
            if (msgCase_ == MsgOneofCase.PauseResp)
            {
                output.WriteRawTag(218, 8);
                output.WriteMessage(PauseResp);
            }
            if (msgCase_ == MsgOneofCase.ModeChangeResp)
            {
                output.WriteRawTag(234, 8);
                output.WriteMessage(ModeChangeResp);
            }
            if (msgCase_ == MsgOneofCase.StatusReqResp)
            {
                output.WriteRawTag(250, 8);
                output.WriteMessage(StatusReqResp);
            }
            if (msgCase_ == MsgOneofCase.StatueChangeRep)
            {
                output.WriteRawTag(130, 9);
                output.WriteMessage(StatueChangeRep);
            }
            if (msgCase_ == MsgOneofCase.PowerOpeResp)
            {
                output.WriteRawTag(138, 9);
                output.WriteMessage(PowerOpeResp);
            }
            if (msgCase_ == MsgOneofCase.IndividualUploadResp)
            {
                output.WriteRawTag(138, 10);
                output.WriteMessage(IndividualUploadResp);
            }
            if (msgCase_ == MsgOneofCase.IndividualDownloadReq)
            {
                output.WriteRawTag(146, 10);
                output.WriteMessage(IndividualDownloadReq);
            }
            if (msgCase_ == MsgOneofCase.IndividualChangeResp)
            {
                output.WriteRawTag(154, 10);
                output.WriteMessage(IndividualChangeResp);
            }
            if (msgCase_ == MsgOneofCase.RangeTeachingResp)
            {
                output.WriteRawTag(218, 10);
                output.WriteMessage(RangeTeachingResp);
            }
            if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep)
            {
                output.WriteRawTag(226, 10);
                output.WriteMessage(RangeTeachingCmpRep);
            }
            if (msgCase_ == MsgOneofCase.AddressTeachRep)
            {
                output.WriteRawTag(242, 10);
                output.WriteMessage(AddressTeachRep);
            }
            if (msgCase_ == MsgOneofCase.AlarmResetResp)
            {
                output.WriteRawTag(250, 11);
                output.WriteMessage(AlarmResetResp);
            }
            if (msgCase_ == MsgOneofCase.AlarmRep)
            {
                output.WriteRawTag(146, 12);
                output.WriteMessage(AlarmRep);
            }
            if (ID != 0)
            {
                output.WriteRawTag(192, 62);
                output.WriteInt32(ID);
            }
            if (SeqNum != 0)
            {
                output.WriteRawTag(200, 62);
                output.WriteInt32(SeqNum);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ID != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(ID);
            }
            if (SeqNum != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeqNum);
            }
            if (msgCase_ == MsgOneofCase.HostBasicInfoRep)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(HostBasicInfoRep);
            }
            if (msgCase_ == MsgOneofCase.HostBasicInfoResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(HostBasicInfoResp);
            }
            if (msgCase_ == MsgOneofCase.BasicInfoVersionRep)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoVersionRep);
            }
            if (msgCase_ == MsgOneofCase.BasicInfoVersionResp)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoVersionResp);
            }
            if (msgCase_ == MsgOneofCase.BasicInfoRep)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoRep);
            }
            if (msgCase_ == MsgOneofCase.BasicInfoResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasicInfoResp);
            }
            if (msgCase_ == MsgOneofCase.TavellingDataRep)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(TavellingDataRep);
            }
            if (msgCase_ == MsgOneofCase.TavellingDataResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(TavellingDataResp);
            }
            if (msgCase_ == MsgOneofCase.SectionDataRep)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SectionDataRep);
            }
            if (msgCase_ == MsgOneofCase.SectionDataResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(SectionDataResp);
            }
            if (msgCase_ == MsgOneofCase.AddressDataRep)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressDataRep);
            }
            if (msgCase_ == MsgOneofCase.AddressDataResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressDataResp);
            }
            if (msgCase_ == MsgOneofCase.ScaleDataRep)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScaleDataRep);
            }
            if (msgCase_ == MsgOneofCase.ScaleDataResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScaleDataResp);
            }
            if (msgCase_ == MsgOneofCase.ControlDataRep)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlDataRep);
            }
            if (msgCase_ == MsgOneofCase.ControlDataResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlDataResp);
            }
            if (msgCase_ == MsgOneofCase.GuideDataRep)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuideDataRep);
            }
            if (msgCase_ == MsgOneofCase.GuideDataResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuideDataResp);
            }
            if (msgCase_ == MsgOneofCase.IndividualUploadReq)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualUploadReq);
            }
            if (msgCase_ == MsgOneofCase.IndividualUploadResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualUploadResp);
            }
            if (msgCase_ == MsgOneofCase.IndividualDownloadReq)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualDownloadReq);
            }
            if (msgCase_ == MsgOneofCase.IndividualDownloadResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualDownloadResp);
            }
            if (msgCase_ == MsgOneofCase.IndividualChangeReq)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualChangeReq);
            }
            if (msgCase_ == MsgOneofCase.IndividualChangeResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndividualChangeResp);
            }
            if (msgCase_ == MsgOneofCase.ModeChangeReq)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModeChangeReq);
            }
            if (msgCase_ == MsgOneofCase.ModeChangeResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModeChangeResp);
            }
            if (msgCase_ == MsgOneofCase.TransReq)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransReq);
            }
            if (msgCase_ == MsgOneofCase.TransResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransResp);
            }
            if (msgCase_ == MsgOneofCase.TranCmpRep)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(TranCmpRep);
            }
            if (msgCase_ == MsgOneofCase.TranCmpResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(TranCmpResp);
            }
            if (msgCase_ == MsgOneofCase.ControlZoneReq)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlZoneReq);
            }
            if (msgCase_ == MsgOneofCase.ControlZoneResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ControlZoneResp);
            }
            if (msgCase_ == MsgOneofCase.TransCancelReq)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransCancelReq);
            }
            if (msgCase_ == MsgOneofCase.TransCancelResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransCancelResp);
            }
            if (msgCase_ == MsgOneofCase.PauseReq)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(PauseReq);
            }
            if (msgCase_ == MsgOneofCase.PauseResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(PauseResp);
            }
            if (msgCase_ == MsgOneofCase.TransEventRep)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransEventRep);
            }
            if (msgCase_ == MsgOneofCase.ImpTransEventRep)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpTransEventRep);
            }
            if (msgCase_ == MsgOneofCase.ImpTransEventResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImpTransEventResp);
            }
            if (msgCase_ == MsgOneofCase.StatusReq)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusReq);
            }
            if (msgCase_ == MsgOneofCase.StatusReqResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusReqResp);
            }
            if (msgCase_ == MsgOneofCase.StatueChangeRep)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatueChangeRep);
            }
            if (msgCase_ == MsgOneofCase.StatusChangeResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusChangeResp);
            }
            if (msgCase_ == MsgOneofCase.PowerOpeReq)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(PowerOpeReq);
            }
            if (msgCase_ == MsgOneofCase.PowerOpeResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(PowerOpeResp);
            }
            if (msgCase_ == MsgOneofCase.RangeTeachingReq)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingReq);
            }
            if (msgCase_ == MsgOneofCase.RangeTeachingResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingResp);
            }
            if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingCmpRep);
            }
            if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(RangeTeachingCmpResp);
            }
            if (msgCase_ == MsgOneofCase.AddressTeachRep)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressTeachRep);
            }
            if (msgCase_ == MsgOneofCase.AddressTeachResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddressTeachResp);
            }
            if (msgCase_ == MsgOneofCase.AlarmResetReq)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmResetReq);
            }
            if (msgCase_ == MsgOneofCase.AlarmResetResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmResetResp);
            }
            if (msgCase_ == MsgOneofCase.AlarmRep)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmRep);
            }
            if (msgCase_ == MsgOneofCase.AlarmResp)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(AlarmResp);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WrapperMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ID != 0)
            {
                ID = other.ID;
            }
            if (other.SeqNum != 0)
            {
                SeqNum = other.SeqNum;
            }
            switch (other.MsgCase)
            {
                case MsgOneofCase.HostBasicInfoRep:
                    HostBasicInfoRep = other.HostBasicInfoRep;
                    break;
                case MsgOneofCase.HostBasicInfoResp:
                    HostBasicInfoResp = other.HostBasicInfoResp;
                    break;
                case MsgOneofCase.BasicInfoVersionRep:
                    BasicInfoVersionRep = other.BasicInfoVersionRep;
                    break;
                case MsgOneofCase.BasicInfoVersionResp:
                    BasicInfoVersionResp = other.BasicInfoVersionResp;
                    break;
                case MsgOneofCase.BasicInfoRep:
                    BasicInfoRep = other.BasicInfoRep;
                    break;
                case MsgOneofCase.BasicInfoResp:
                    BasicInfoResp = other.BasicInfoResp;
                    break;
                case MsgOneofCase.TavellingDataRep:
                    TavellingDataRep = other.TavellingDataRep;
                    break;
                case MsgOneofCase.TavellingDataResp:
                    TavellingDataResp = other.TavellingDataResp;
                    break;
                case MsgOneofCase.SectionDataRep:
                    SectionDataRep = other.SectionDataRep;
                    break;
                case MsgOneofCase.SectionDataResp:
                    SectionDataResp = other.SectionDataResp;
                    break;
                case MsgOneofCase.AddressDataRep:
                    AddressDataRep = other.AddressDataRep;
                    break;
                case MsgOneofCase.AddressDataResp:
                    AddressDataResp = other.AddressDataResp;
                    break;
                case MsgOneofCase.ScaleDataRep:
                    ScaleDataRep = other.ScaleDataRep;
                    break;
                case MsgOneofCase.ScaleDataResp:
                    ScaleDataResp = other.ScaleDataResp;
                    break;
                case MsgOneofCase.ControlDataRep:
                    ControlDataRep = other.ControlDataRep;
                    break;
                case MsgOneofCase.ControlDataResp:
                    ControlDataResp = other.ControlDataResp;
                    break;
                case MsgOneofCase.GuideDataRep:
                    GuideDataRep = other.GuideDataRep;
                    break;
                case MsgOneofCase.GuideDataResp:
                    GuideDataResp = other.GuideDataResp;
                    break;
                case MsgOneofCase.IndividualUploadReq:
                    IndividualUploadReq = other.IndividualUploadReq;
                    break;
                case MsgOneofCase.IndividualUploadResp:
                    IndividualUploadResp = other.IndividualUploadResp;
                    break;
                case MsgOneofCase.IndividualDownloadReq:
                    IndividualDownloadReq = other.IndividualDownloadReq;
                    break;
                case MsgOneofCase.IndividualDownloadResp:
                    IndividualDownloadResp = other.IndividualDownloadResp;
                    break;
                case MsgOneofCase.IndividualChangeReq:
                    IndividualChangeReq = other.IndividualChangeReq;
                    break;
                case MsgOneofCase.IndividualChangeResp:
                    IndividualChangeResp = other.IndividualChangeResp;
                    break;
                case MsgOneofCase.ModeChangeReq:
                    ModeChangeReq = other.ModeChangeReq;
                    break;
                case MsgOneofCase.ModeChangeResp:
                    ModeChangeResp = other.ModeChangeResp;
                    break;
                case MsgOneofCase.TransReq:
                    TransReq = other.TransReq;
                    break;
                case MsgOneofCase.TransResp:
                    TransResp = other.TransResp;
                    break;
                case MsgOneofCase.TranCmpRep:
                    TranCmpRep = other.TranCmpRep;
                    break;
                case MsgOneofCase.TranCmpResp:
                    TranCmpResp = other.TranCmpResp;
                    break;
                case MsgOneofCase.ControlZoneReq:
                    ControlZoneReq = other.ControlZoneReq;
                    break;
                case MsgOneofCase.ControlZoneResp:
                    ControlZoneResp = other.ControlZoneResp;
                    break;
                case MsgOneofCase.TransCancelReq:
                    TransCancelReq = other.TransCancelReq;
                    break;
                case MsgOneofCase.TransCancelResp:
                    TransCancelResp = other.TransCancelResp;
                    break;
                case MsgOneofCase.PauseReq:
                    PauseReq = other.PauseReq;
                    break;
                case MsgOneofCase.PauseResp:
                    PauseResp = other.PauseResp;
                    break;
                case MsgOneofCase.TransEventRep:
                    TransEventRep = other.TransEventRep;
                    break;
                case MsgOneofCase.ImpTransEventRep:
                    ImpTransEventRep = other.ImpTransEventRep;
                    break;
                case MsgOneofCase.ImpTransEventResp:
                    ImpTransEventResp = other.ImpTransEventResp;
                    break;
                case MsgOneofCase.StatusReq:
                    StatusReq = other.StatusReq;
                    break;
                case MsgOneofCase.StatusReqResp:
                    StatusReqResp = other.StatusReqResp;
                    break;
                case MsgOneofCase.StatueChangeRep:
                    StatueChangeRep = other.StatueChangeRep;
                    break;
                case MsgOneofCase.StatusChangeResp:
                    StatusChangeResp = other.StatusChangeResp;
                    break;
                case MsgOneofCase.PowerOpeReq:
                    PowerOpeReq = other.PowerOpeReq;
                    break;
                case MsgOneofCase.PowerOpeResp:
                    PowerOpeResp = other.PowerOpeResp;
                    break;
                case MsgOneofCase.RangeTeachingReq:
                    RangeTeachingReq = other.RangeTeachingReq;
                    break;
                case MsgOneofCase.RangeTeachingResp:
                    RangeTeachingResp = other.RangeTeachingResp;
                    break;
                case MsgOneofCase.RangeTeachingCmpRep:
                    RangeTeachingCmpRep = other.RangeTeachingCmpRep;
                    break;
                case MsgOneofCase.RangeTeachingCmpResp:
                    RangeTeachingCmpResp = other.RangeTeachingCmpResp;
                    break;
                case MsgOneofCase.AddressTeachRep:
                    AddressTeachRep = other.AddressTeachRep;
                    break;
                case MsgOneofCase.AddressTeachResp:
                    AddressTeachResp = other.AddressTeachResp;
                    break;
                case MsgOneofCase.AlarmResetReq:
                    AlarmResetReq = other.AlarmResetReq;
                    break;
                case MsgOneofCase.AlarmResetResp:
                    AlarmResetResp = other.AlarmResetResp;
                    break;
                case MsgOneofCase.AlarmRep:
                    AlarmRep = other.AlarmRep;
                    break;
                case MsgOneofCase.AlarmResp:
                    AlarmResp = other.AlarmResp;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            global::TcpIpClientSample.ID_1_HOST_BASIC_INFO_VERSION_REP subBuilder = new global::TcpIpClientSample.ID_1_HOST_BASIC_INFO_VERSION_REP();
                            if (msgCase_ == MsgOneofCase.HostBasicInfoRep)
                            {
                                subBuilder.MergeFrom(HostBasicInfoRep);
                            }
                            input.ReadMessage(subBuilder);
                            HostBasicInfoRep = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            global::TcpIpClientSample.ID_2_BASIC_INFO_VERSION_RESPONSE subBuilder = new global::TcpIpClientSample.ID_2_BASIC_INFO_VERSION_RESPONSE();
                            if (msgCase_ == MsgOneofCase.BasicInfoVersionResp)
                            {
                                subBuilder.MergeFrom(BasicInfoVersionResp);
                            }
                            input.ReadMessage(subBuilder);
                            BasicInfoVersionResp = subBuilder;
                            break;
                        }
                    case 90:
                        {
                            global::TcpIpClientSample.ID_11_BASIC_INFO_REP subBuilder = new global::TcpIpClientSample.ID_11_BASIC_INFO_REP();
                            if (msgCase_ == MsgOneofCase.BasicInfoRep)
                            {
                                subBuilder.MergeFrom(BasicInfoRep);
                            }
                            input.ReadMessage(subBuilder);
                            BasicInfoRep = subBuilder;
                            break;
                        }
                    case 106:
                        {
                            global::TcpIpClientSample.ID_13_TAVELLING_DATA_REP subBuilder = new global::TcpIpClientSample.ID_13_TAVELLING_DATA_REP();
                            if (msgCase_ == MsgOneofCase.TavellingDataRep)
                            {
                                subBuilder.MergeFrom(TavellingDataRep);
                            }
                            input.ReadMessage(subBuilder);
                            TavellingDataRep = subBuilder;
                            break;
                        }
                    case 122:
                        {
                            global::TcpIpClientSample.ID_15_SECTION_DATA_REP subBuilder = new global::TcpIpClientSample.ID_15_SECTION_DATA_REP();
                            if (msgCase_ == MsgOneofCase.SectionDataRep)
                            {
                                subBuilder.MergeFrom(SectionDataRep);
                            }
                            input.ReadMessage(subBuilder);
                            SectionDataRep = subBuilder;
                            break;
                        }
                    case 138:
                        {
                            global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP subBuilder = new global::TcpIpClientSample.ID_17_ADDRESS_DATA_REP();
                            if (msgCase_ == MsgOneofCase.AddressDataRep)
                            {
                                subBuilder.MergeFrom(AddressDataRep);
                            }
                            input.ReadMessage(subBuilder);
                            AddressDataRep = subBuilder;
                            break;
                        }
                    case 154:
                        {
                            global::TcpIpClientSample.ID_19_SCALE_DATA_REP subBuilder = new global::TcpIpClientSample.ID_19_SCALE_DATA_REP();
                            if (msgCase_ == MsgOneofCase.ScaleDataRep)
                            {
                                subBuilder.MergeFrom(ScaleDataRep);
                            }
                            input.ReadMessage(subBuilder);
                            ScaleDataRep = subBuilder;
                            break;
                        }
                    case 170:
                        {
                            global::TcpIpClientSample.ID_21_CONTROL_DATA_REP subBuilder = new global::TcpIpClientSample.ID_21_CONTROL_DATA_REP();
                            if (msgCase_ == MsgOneofCase.ControlDataRep)
                            {
                                subBuilder.MergeFrom(ControlDataRep);
                            }
                            input.ReadMessage(subBuilder);
                            ControlDataRep = subBuilder;
                            break;
                        }
                    case 186:
                        {
                            global::TcpIpClientSample.ID_23_GUIDE_DATA_REP subBuilder = new global::TcpIpClientSample.ID_23_GUIDE_DATA_REP();
                            if (msgCase_ == MsgOneofCase.GuideDataRep)
                            {
                                subBuilder.MergeFrom(GuideDataRep);
                            }
                            input.ReadMessage(subBuilder);
                            GuideDataRep = subBuilder;
                            break;
                        }
                    case 250:
                        {
                            global::TcpIpClientSample.ID_31_TRANS_REQUEST subBuilder = new global::TcpIpClientSample.ID_31_TRANS_REQUEST();
                            if (msgCase_ == MsgOneofCase.TransReq)
                            {
                                subBuilder.MergeFrom(TransReq);
                            }
                            input.ReadMessage(subBuilder);
                            TransReq = subBuilder;
                            break;
                        }
                    case 258:
                        {
                            global::TcpIpClientSample.ID_32_TRANS_COMPLETE_RESPONSE subBuilder = new global::TcpIpClientSample.ID_32_TRANS_COMPLETE_RESPONSE();
                            if (msgCase_ == MsgOneofCase.TranCmpResp)
                            {
                                subBuilder.MergeFrom(TranCmpResp);
                            }
                            input.ReadMessage(subBuilder);
                            TranCmpResp = subBuilder;
                            break;
                        }
                    case 266:
                        {
                            global::TcpIpClientSample.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST subBuilder = new global::TcpIpClientSample.ID_33_CONTROL_ZONE_REPUEST_CANCEL_REQUEST();
                            if (msgCase_ == MsgOneofCase.ControlZoneReq)
                            {
                                subBuilder.MergeFrom(ControlZoneReq);
                            }
                            input.ReadMessage(subBuilder);
                            ControlZoneReq = subBuilder;
                            break;
                        }
                    case 290:
                        {
                            global::TcpIpClientSample.ID_36_TRANS_EVENT_RESPONSE subBuilder = new global::TcpIpClientSample.ID_36_TRANS_EVENT_RESPONSE();
                            if (msgCase_ == MsgOneofCase.ImpTransEventResp)
                            {
                                subBuilder.MergeFrom(ImpTransEventResp);
                            }
                            input.ReadMessage(subBuilder);
                            ImpTransEventResp = subBuilder;
                            break;
                        }
                    case 298:
                        {
                            global::TcpIpClientSample.ID_37_TRANS_CANCEL_REQUEST subBuilder = new global::TcpIpClientSample.ID_37_TRANS_CANCEL_REQUEST();
                            if (msgCase_ == MsgOneofCase.TransCancelReq)
                            {
                                subBuilder.MergeFrom(TransCancelReq);
                            }
                            input.ReadMessage(subBuilder);
                            TransCancelReq = subBuilder;
                            break;
                        }
                    case 314:
                        {
                            global::TcpIpClientSample.ID_39_PAUSE_REQUEST subBuilder = new global::TcpIpClientSample.ID_39_PAUSE_REQUEST();
                            if (msgCase_ == MsgOneofCase.PauseReq)
                            {
                                subBuilder.MergeFrom(PauseReq);
                            }
                            input.ReadMessage(subBuilder);
                            PauseReq = subBuilder;
                            break;
                        }
                    case 330:
                        {
                            global::TcpIpClientSample.ID_41_MODE_CHANGE_REQ subBuilder = new global::TcpIpClientSample.ID_41_MODE_CHANGE_REQ();
                            if (msgCase_ == MsgOneofCase.ModeChangeReq)
                            {
                                subBuilder.MergeFrom(ModeChangeReq);
                            }
                            input.ReadMessage(subBuilder);
                            ModeChangeReq = subBuilder;
                            break;
                        }
                    case 346:
                        {
                            global::TcpIpClientSample.ID_43_STATUS_REQUEST subBuilder = new global::TcpIpClientSample.ID_43_STATUS_REQUEST();
                            if (msgCase_ == MsgOneofCase.StatusReq)
                            {
                                subBuilder.MergeFrom(StatusReq);
                            }
                            input.ReadMessage(subBuilder);
                            StatusReq = subBuilder;
                            break;
                        }
                    case 354:
                        {
                            global::TcpIpClientSample.ID_44_STATUS_CHANGE_RESPONSE subBuilder = new global::TcpIpClientSample.ID_44_STATUS_CHANGE_RESPONSE();
                            if (msgCase_ == MsgOneofCase.StatusChangeResp)
                            {
                                subBuilder.MergeFrom(StatusChangeResp);
                            }
                            input.ReadMessage(subBuilder);
                            StatusChangeResp = subBuilder;
                            break;
                        }
                    case 362:
                        {
                            global::TcpIpClientSample.ID_45_POWER_OPE_REQ subBuilder = new global::TcpIpClientSample.ID_45_POWER_OPE_REQ();
                            if (msgCase_ == MsgOneofCase.PowerOpeReq)
                            {
                                subBuilder.MergeFrom(PowerOpeReq);
                            }
                            input.ReadMessage(subBuilder);
                            PowerOpeReq = subBuilder;
                            break;
                        }
                    case 490:
                        {
                            global::TcpIpClientSample.ID_61_INDIVIDUAL_UPLOAD_REQ subBuilder = new global::TcpIpClientSample.ID_61_INDIVIDUAL_UPLOAD_REQ();
                            if (msgCase_ == MsgOneofCase.IndividualUploadReq)
                            {
                                subBuilder.MergeFrom(IndividualUploadReq);
                            }
                            input.ReadMessage(subBuilder);
                            IndividualUploadReq = subBuilder;
                            break;
                        }
                    case 498:
                        {
                            global::TcpIpClientSample.ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE subBuilder = new global::TcpIpClientSample.ID_62_INDIVIDUAL_DOWNLOAD_RESPONSE();
                            if (msgCase_ == MsgOneofCase.IndividualDownloadResp)
                            {
                                subBuilder.MergeFrom(IndividualDownloadResp);
                            }
                            input.ReadMessage(subBuilder);
                            IndividualDownloadResp = subBuilder;
                            break;
                        }
                    case 506:
                        {
                            global::TcpIpClientSample.ID_63_INDIVIDUAL_CHANGE_REQ subBuilder = new global::TcpIpClientSample.ID_63_INDIVIDUAL_CHANGE_REQ();
                            if (msgCase_ == MsgOneofCase.IndividualChangeReq)
                            {
                                subBuilder.MergeFrom(IndividualChangeReq);
                            }
                            input.ReadMessage(subBuilder);
                            IndividualChangeReq = subBuilder;
                            break;
                        }
                    case 570:
                        {
                            global::TcpIpClientSample.ID_71_RANGE_TEACHING_REQUEST subBuilder = new global::TcpIpClientSample.ID_71_RANGE_TEACHING_REQUEST();
                            if (msgCase_ == MsgOneofCase.RangeTeachingReq)
                            {
                                subBuilder.MergeFrom(RangeTeachingReq);
                            }
                            input.ReadMessage(subBuilder);
                            RangeTeachingReq = subBuilder;
                            break;
                        }
                    case 578:
                        {
                            global::TcpIpClientSample.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE subBuilder = new global::TcpIpClientSample.ID_72_RANGE_TEACHING_COMPLETE_RESPONSE();
                            if (msgCase_ == MsgOneofCase.RangeTeachingCmpResp)
                            {
                                subBuilder.MergeFrom(RangeTeachingCmpResp);
                            }
                            input.ReadMessage(subBuilder);
                            RangeTeachingCmpResp = subBuilder;
                            break;
                        }
                    case 594:
                        {
                            global::TcpIpClientSample.ID_74_ADDRESS_TEACH_RESPONSE subBuilder = new global::TcpIpClientSample.ID_74_ADDRESS_TEACH_RESPONSE();
                            if (msgCase_ == MsgOneofCase.AddressTeachResp)
                            {
                                subBuilder.MergeFrom(AddressTeachResp);
                            }
                            input.ReadMessage(subBuilder);
                            AddressTeachResp = subBuilder;
                            break;
                        }
                    case 730:
                        {
                            global::TcpIpClientSample.ID_91_ALARM_RESET_REQUEST subBuilder = new global::TcpIpClientSample.ID_91_ALARM_RESET_REQUEST();
                            if (msgCase_ == MsgOneofCase.AlarmResetReq)
                            {
                                subBuilder.MergeFrom(AlarmResetReq);
                            }
                            input.ReadMessage(subBuilder);
                            AlarmResetReq = subBuilder;
                            break;
                        }
                    case 754:
                        {
                            global::TcpIpClientSample.ID_94_ALARM_RESPONSE subBuilder = new global::TcpIpClientSample.ID_94_ALARM_RESPONSE();
                            if (msgCase_ == MsgOneofCase.AlarmResp)
                            {
                                subBuilder.MergeFrom(AlarmResp);
                            }
                            input.ReadMessage(subBuilder);
                            AlarmResp = subBuilder;
                            break;
                        }
                    case 810:
                        {
                            global::TcpIpClientSample.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE subBuilder = new global::TcpIpClientSample.ID_101_HOST_BASIC_INFO_VERSION_RESPONSE();
                            if (msgCase_ == MsgOneofCase.HostBasicInfoResp)
                            {
                                subBuilder.MergeFrom(HostBasicInfoResp);
                            }
                            input.ReadMessage(subBuilder);
                            HostBasicInfoResp = subBuilder;
                            break;
                        }
                    case 818:
                        {
                            global::TcpIpClientSample.ID_102_BASIC_INFO_VERSION_REP subBuilder = new global::TcpIpClientSample.ID_102_BASIC_INFO_VERSION_REP();
                            if (msgCase_ == MsgOneofCase.BasicInfoVersionRep)
                            {
                                subBuilder.MergeFrom(BasicInfoVersionRep);
                            }
                            input.ReadMessage(subBuilder);
                            BasicInfoVersionRep = subBuilder;
                            break;
                        }
                    case 890:
                        {
                            global::TcpIpClientSample.ID_111_BASIC_INFO_RESPONSE subBuilder = new global::TcpIpClientSample.ID_111_BASIC_INFO_RESPONSE();
                            if (msgCase_ == MsgOneofCase.BasicInfoResp)
                            {
                                subBuilder.MergeFrom(BasicInfoResp);
                            }
                            input.ReadMessage(subBuilder);
                            BasicInfoResp = subBuilder;
                            break;
                        }
                    case 906:
                        {
                            global::TcpIpClientSample.ID_113_TAVELLING_DATA_RESPONSE subBuilder = new global::TcpIpClientSample.ID_113_TAVELLING_DATA_RESPONSE();
                            if (msgCase_ == MsgOneofCase.TavellingDataResp)
                            {
                                subBuilder.MergeFrom(TavellingDataResp);
                            }
                            input.ReadMessage(subBuilder);
                            TavellingDataResp = subBuilder;
                            break;
                        }
                    case 922:
                        {
                            global::TcpIpClientSample.ID_115_SECTION_DATA_RESPONSE subBuilder = new global::TcpIpClientSample.ID_115_SECTION_DATA_RESPONSE();
                            if (msgCase_ == MsgOneofCase.SectionDataResp)
                            {
                                subBuilder.MergeFrom(SectionDataResp);
                            }
                            input.ReadMessage(subBuilder);
                            SectionDataResp = subBuilder;
                            break;
                        }
                    case 938:
                        {
                            global::TcpIpClientSample.ID_117_ADDRESS_DATA_RESPONSE subBuilder = new global::TcpIpClientSample.ID_117_ADDRESS_DATA_RESPONSE();
                            if (msgCase_ == MsgOneofCase.AddressDataResp)
                            {
                                subBuilder.MergeFrom(AddressDataResp);
                            }
                            input.ReadMessage(subBuilder);
                            AddressDataResp = subBuilder;
                            break;
                        }
                    case 954:
                        {
                            global::TcpIpClientSample.ID_119_SCALE_DATA_RESPONSE subBuilder = new global::TcpIpClientSample.ID_119_SCALE_DATA_RESPONSE();
                            if (msgCase_ == MsgOneofCase.ScaleDataResp)
                            {
                                subBuilder.MergeFrom(ScaleDataResp);
                            }
                            input.ReadMessage(subBuilder);
                            ScaleDataResp = subBuilder;
                            break;
                        }
                    case 970:
                        {
                            global::TcpIpClientSample.ID_121_CONTROL_DATA_RESPONSE subBuilder = new global::TcpIpClientSample.ID_121_CONTROL_DATA_RESPONSE();
                            if (msgCase_ == MsgOneofCase.ControlDataResp)
                            {
                                subBuilder.MergeFrom(ControlDataResp);
                            }
                            input.ReadMessage(subBuilder);
                            ControlDataResp = subBuilder;
                            break;
                        }
                    case 986:
                        {
                            global::TcpIpClientSample.ID_123_GUIDE_DATA_RESPONSE subBuilder = new global::TcpIpClientSample.ID_123_GUIDE_DATA_RESPONSE();
                            if (msgCase_ == MsgOneofCase.GuideDataResp)
                            {
                                subBuilder.MergeFrom(GuideDataResp);
                            }
                            input.ReadMessage(subBuilder);
                            GuideDataResp = subBuilder;
                            break;
                        }
                    case 1050:
                        {
                            global::TcpIpClientSample.ID_131_TRANS_RESPONSE subBuilder = new global::TcpIpClientSample.ID_131_TRANS_RESPONSE();
                            if (msgCase_ == MsgOneofCase.TransResp)
                            {
                                subBuilder.MergeFrom(TransResp);
                            }
                            input.ReadMessage(subBuilder);
                            TransResp = subBuilder;
                            break;
                        }
                    case 1058:
                        {
                            global::TcpIpClientSample.ID_132_TRANS_COMPLETE_REPORT subBuilder = new global::TcpIpClientSample.ID_132_TRANS_COMPLETE_REPORT();
                            if (msgCase_ == MsgOneofCase.TranCmpRep)
                            {
                                subBuilder.MergeFrom(TranCmpRep);
                            }
                            input.ReadMessage(subBuilder);
                            TranCmpRep = subBuilder;
                            break;
                        }
                    case 1066:
                        {
                            global::TcpIpClientSample.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE subBuilder = new global::TcpIpClientSample.ID_133_CONTROL_ZONE_REPUEST_CANCEL_RESPONSE();
                            if (msgCase_ == MsgOneofCase.ControlZoneResp)
                            {
                                subBuilder.MergeFrom(ControlZoneResp);
                            }
                            input.ReadMessage(subBuilder);
                            ControlZoneResp = subBuilder;
                            break;
                        }
                    case 1074:
                        {
                            global::TcpIpClientSample.ID_134_TRANS_EVENT_REP subBuilder = new global::TcpIpClientSample.ID_134_TRANS_EVENT_REP();
                            if (msgCase_ == MsgOneofCase.TransEventRep)
                            {
                                subBuilder.MergeFrom(TransEventRep);
                            }
                            input.ReadMessage(subBuilder);
                            TransEventRep = subBuilder;
                            break;
                        }
                    case 1090:
                        {
                            global::TcpIpClientSample.ID_136_TRANS_EVENT_REP subBuilder = new global::TcpIpClientSample.ID_136_TRANS_EVENT_REP();
                            if (msgCase_ == MsgOneofCase.ImpTransEventRep)
                            {
                                subBuilder.MergeFrom(ImpTransEventRep);
                            }
                            input.ReadMessage(subBuilder);
                            ImpTransEventRep = subBuilder;
                            break;
                        }
                    case 1098:
                        {
                            global::TcpIpClientSample.ID_137_TRANS_CANCEL_RESPONSE subBuilder = new global::TcpIpClientSample.ID_137_TRANS_CANCEL_RESPONSE();
                            if (msgCase_ == MsgOneofCase.TransCancelResp)
                            {
                                subBuilder.MergeFrom(TransCancelResp);
                            }
                            input.ReadMessage(subBuilder);
                            TransCancelResp = subBuilder;
                            break;
                        }
                    case 1114:
                        {
                            global::TcpIpClientSample.ID_139_PAUSE_RESPONSE subBuilder = new global::TcpIpClientSample.ID_139_PAUSE_RESPONSE();
                            if (msgCase_ == MsgOneofCase.PauseResp)
                            {
                                subBuilder.MergeFrom(PauseResp);
                            }
                            input.ReadMessage(subBuilder);
                            PauseResp = subBuilder;
                            break;
                        }
                    case 1130:
                        {
                            global::TcpIpClientSample.ID_141_MODE_CHANGE_RESPONSE subBuilder = new global::TcpIpClientSample.ID_141_MODE_CHANGE_RESPONSE();
                            if (msgCase_ == MsgOneofCase.ModeChangeResp)
                            {
                                subBuilder.MergeFrom(ModeChangeResp);
                            }
                            input.ReadMessage(subBuilder);
                            ModeChangeResp = subBuilder;
                            break;
                        }
                    case 1146:
                        {
                            global::TcpIpClientSample.ID_143_STATUS_RESPONSE subBuilder = new global::TcpIpClientSample.ID_143_STATUS_RESPONSE();
                            if (msgCase_ == MsgOneofCase.StatusReqResp)
                            {
                                subBuilder.MergeFrom(StatusReqResp);
                            }
                            input.ReadMessage(subBuilder);
                            StatusReqResp = subBuilder;
                            break;
                        }
                    case 1154:
                        {
                            global::TcpIpClientSample.ID_144_STATUS_CHANGE_REP subBuilder = new global::TcpIpClientSample.ID_144_STATUS_CHANGE_REP();
                            if (msgCase_ == MsgOneofCase.StatueChangeRep)
                            {
                                subBuilder.MergeFrom(StatueChangeRep);
                            }
                            input.ReadMessage(subBuilder);
                            StatueChangeRep = subBuilder;
                            break;
                        }
                    case 1162:
                        {
                            global::TcpIpClientSample.ID_145_POWER_OPE_RESPONSE subBuilder = new global::TcpIpClientSample.ID_145_POWER_OPE_RESPONSE();
                            if (msgCase_ == MsgOneofCase.PowerOpeResp)
                            {
                                subBuilder.MergeFrom(PowerOpeResp);
                            }
                            input.ReadMessage(subBuilder);
                            PowerOpeResp = subBuilder;
                            break;
                        }
                    case 1290:
                        {
                            global::TcpIpClientSample.ID_161_INDIVIDUAL_UPLOAD_RESPONSE subBuilder = new global::TcpIpClientSample.ID_161_INDIVIDUAL_UPLOAD_RESPONSE();
                            if (msgCase_ == MsgOneofCase.IndividualUploadResp)
                            {
                                subBuilder.MergeFrom(IndividualUploadResp);
                            }
                            input.ReadMessage(subBuilder);
                            IndividualUploadResp = subBuilder;
                            break;
                        }
                    case 1298:
                        {
                            global::TcpIpClientSample.ID_162_INDIVIDUAL_DOWNLOAD_REQ subBuilder = new global::TcpIpClientSample.ID_162_INDIVIDUAL_DOWNLOAD_REQ();
                            if (msgCase_ == MsgOneofCase.IndividualDownloadReq)
                            {
                                subBuilder.MergeFrom(IndividualDownloadReq);
                            }
                            input.ReadMessage(subBuilder);
                            IndividualDownloadReq = subBuilder;
                            break;
                        }
                    case 1306:
                        {
                            global::TcpIpClientSample.ID_163_INDIVIDUAL_CHANGE_RESPONSE subBuilder = new global::TcpIpClientSample.ID_163_INDIVIDUAL_CHANGE_RESPONSE();
                            if (msgCase_ == MsgOneofCase.IndividualChangeResp)
                            {
                                subBuilder.MergeFrom(IndividualChangeResp);
                            }
                            input.ReadMessage(subBuilder);
                            IndividualChangeResp = subBuilder;
                            break;
                        }
                    case 1370:
                        {
                            global::TcpIpClientSample.ID_171_RANGE_TEACHING_RESPONSE subBuilder = new global::TcpIpClientSample.ID_171_RANGE_TEACHING_RESPONSE();
                            if (msgCase_ == MsgOneofCase.RangeTeachingResp)
                            {
                                subBuilder.MergeFrom(RangeTeachingResp);
                            }
                            input.ReadMessage(subBuilder);
                            RangeTeachingResp = subBuilder;
                            break;
                        }
                    case 1378:
                        {
                            global::TcpIpClientSample.ID_172_RANGE_TEACHING_COMPLETE_REPORT subBuilder = new global::TcpIpClientSample.ID_172_RANGE_TEACHING_COMPLETE_REPORT();
                            if (msgCase_ == MsgOneofCase.RangeTeachingCmpRep)
                            {
                                subBuilder.MergeFrom(RangeTeachingCmpRep);
                            }
                            input.ReadMessage(subBuilder);
                            RangeTeachingCmpRep = subBuilder;
                            break;
                        }
                    case 1394:
                        {
                            global::TcpIpClientSample.ID_174_ADDRESS_TEACH_REPORT subBuilder = new global::TcpIpClientSample.ID_174_ADDRESS_TEACH_REPORT();
                            if (msgCase_ == MsgOneofCase.AddressTeachRep)
                            {
                                subBuilder.MergeFrom(AddressTeachRep);
                            }
                            input.ReadMessage(subBuilder);
                            AddressTeachRep = subBuilder;
                            break;
                        }
                    case 1530:
                        {
                            global::TcpIpClientSample.ID_191_ALARM_RESET_RESPONSE subBuilder = new global::TcpIpClientSample.ID_191_ALARM_RESET_RESPONSE();
                            if (msgCase_ == MsgOneofCase.AlarmResetResp)
                            {
                                subBuilder.MergeFrom(AlarmResetResp);
                            }
                            input.ReadMessage(subBuilder);
                            AlarmResetResp = subBuilder;
                            break;
                        }
                    case 1554:
                        {
                            global::TcpIpClientSample.ID_194_ALARM_REPORT subBuilder = new global::TcpIpClientSample.ID_194_ALARM_REPORT();
                            if (msgCase_ == MsgOneofCase.AlarmRep)
                            {
                                subBuilder.MergeFrom(AlarmRep);
                            }
                            input.ReadMessage(subBuilder);
                            AlarmRep = subBuilder;
                            break;
                        }
                    case 8000:
                        {
                            ID = input.ReadInt32();
                            break;
                        }
                    case 8008:
                        {
                            SeqNum = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
